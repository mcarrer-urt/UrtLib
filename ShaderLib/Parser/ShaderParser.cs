//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/michael/Repos/UrtLib/ShaderLib/Parser/Shader.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	#pragma warning disable 3021
    using System.Globalization;
	using ShaderLib;
	using ShaderLib.Elements;
    using ShaderLib.Elements.Directives;
    using ShaderLib.Elements.Directives.Attributes;
    using ShaderLib.Elements.Directives.ShaderDirectives;
    using ShaderLib.Elements.Directives.ShaderDirectives.General;
    using ShaderLib.Elements.Directives.ShaderDirectives.Q3Map;
    using ShaderLib.Elements.Directives.ShaderDirectives.Qer;
    using ShaderLib.Elements.Directives.StageDirectives;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ShaderParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, ADDITIVE=2, ALPHAFUNC=3, ALPHAGEN=4, ALPHASHADOW=5, ALUMINIUM=6, 
		ANIMMAP=7, ANTIPORTAL=8, AREAPORTAL=9, AUTOSPRITE=10, AUTOSPRITE2=11, 
		BACK=12, BANNER=13, BASE=14, BLEND=15, BLENDFUNC=16, BOTCLIP=17, BRASS=18, 
		BRICK=19, BULGE=20, CARDBOARD=21, CEMENT=22, CERAMICTILE=23, CLAMPMAP=24, 
		CLAY=25, CONST=26, COPPER=27, CLUSTERPORTAL=28, CULL=29, DEFORMVERTEXES=30, 
		DEPTHFUNC=31, DEPTHWRITE=32, DETAIL=33, DOLLARLIGHTMAP=34, DOLLARWHITEIMAGE=35, 
		DIRT=36, DONOTENTER=37, DOTPRODUCT=38, DOTPRODUCT2=39, DUST=40, DISABLE=41, 
		ENTITY=42, ENTITYMERGABLE=43, ENVIRONMENT=44, EQUAL=45, EXACTVERTEX=46, 
		FILTER=47, FLESH=48, FOG=49, FOGPARMS=50, FROMVERTEX=51, FRONT=52, GE128=53, 
		GEQUAL=54, GL_DST_COLOR=55, GL_ONE=56, GL_ONE_MINUS_DST_ALPHA=57, GL_ONE_MINUS_DST_COLOR=58, 
		GL_ONE_MINUS_SRC_ALPHA=59, GL_ONE_MINUS_SRC_COLOR=60, GL_SRC_ALPHA=61, 
		GL_SRC_COLOR=62, GL_ZERO=63, GLASS=64, GRAVEL=65, GRASS=66, GREATER=67, 
		GT0=68, HARDWOOD=69, HINT=70, ICE=71, IDENTITY=72, IDENTITYLIGHTING=73, 
		INVERSESAWTOOTH=74, IRON=75, IVECTOR=76, LADDER=77, LAVA=78, LEQUAL=79, 
		LESS=80, LIGHT=81, LIGHTFILTER=82, LIGHTGRID=83, LIGHTINGDIFFUSE=84, LIGHTINGSPECULAR=85, 
		LIGHTMAP=86, LINOLEUM=87, LT128=88, MAP=89, METALSTEPS=90, MONSTERCLIP=91, 
		MOVE=92, MUD=93, NEAREST=94, NODAMAGE=95, NODLIGHT=96, NODRAW=97, NODROP=98, 
		NOIMPACT=99, NOISE=100, NOLIGHTMAP=101, NOMARKS=102, NOMIPMAPS=103, NONE=104, 
		NONOPAQUE=105, NONSOLID=106, NOPICMIP=107, NORMAL=108, NOSTEPS=109, ONEMINUSENTITY=110, 
		ONEMINUSVERTEX=111, OPAQUE=112, ORIGIN=113, PAVEMENT=114, PLANK=115, PLASTER=116, 
		PLASTIC=117, PLAYERCLIP=118, POINTLIGHT=119, POLYGONOFFSET=120, PORTAL=121, 
		PROJECTIONSHADOW=122, Q3MAP_ALPHAGEN=123, Q3MAP_ALPHAMOD=124, Q3MAP_BACKSHADER=125, 
		Q3MAP_BACKSPLASH=126, Q3MAP_BASESHADER=127, Q3MAP_BOUNCE=128, Q3MAP_BOUNCESCALE=129, 
		Q3MAP_CHEAPWATER=130, Q3MAP_CLIPMODEL=131, Q3MAP_CLONESHADER=132, Q3MAP_COLORGEN=133, 
		Q3MAP_COLORMOD=134, Q3MAP_FANCYWATER=135, Q3MAP_FOGDIR=136, Q3MAP_FORCEMETA=137, 
		Q3MAP_FORCESUNLIGHT=138, Q3MAP_FUR=139, Q3MAP_GLOBALTEXTURE=140, Q3MAP_INDEXED=141, 
		Q3MAP_INVERT=142, Q3MAP_LIGHTIMAGE=143, Q3MAP_LIGHTMAPAXIS=144, Q3MAP_LIGHTMAPBRIGHTNESS=145, 
		Q3MAP_LIGHTMAPFILTERRADIUS=146, Q3MAP_LIGHTMAPGAMMA=147, Q3MAP_LIGHTMAPMERGABLE=148, 
		Q3MAP_LIGHTMAPSAMPLEOFFSET=149, Q3MAP_LIGHTMAPSAMPLESIZE=150, Q3MAP_LIGHTMAPSIZE=151, 
		Q3MAP_LIGHTRGB=152, Q3MAP_LIGHTSTYLE=153, Q3MAP_LIGHTSUBDIVIDE=154, Q3MAP_NOCLIP=155, 
		Q3MAP_NOFAST=156, Q3MAP_NOFANCYWATER=157, Q3MAP_NOFOG=158, Q3MAP_NOLIGHTMAP=159, 
		Q3MAP_NONPLANAR=160, Q3MAP_NORMALIMAGE=161, Q3MAP_NOTJUNC=162, Q3MAP_NOVERTEXLIGHT=163, 
		Q3MAP_NOVERTEXSHADOWS=164, Q3MAP_OFFSET=165, Q3MAP_PATCHSHADOWS=166, Q3MAP_REMAPSHADER=167, 
		Q3MAP_RGBGEN=168, Q3MAP_RGBMOD=169, Q3MAP_SHADEANGLE=170, Q3MAP_SKYLIGHT=171, 
		Q3MAP_SPLOTCHFIX=172, Q3MAP_STYLEMARKER=173, Q3MAP_STYLEMARKER2=174, Q3MAP_SUN=175, 
		Q3MAP_SUNEXT=176, Q3MAP_SURFACELIGHT=177, Q3MAP_SURFACEMODEL=178, Q3MAP_TCGEN=179, 
		Q3MAP_TCMOD=180, Q3MAP_TERRAIN=181, Q3MAP_TESSSIZE=182, Q3MAP_TEXTURESIZE=183, 
		Q3MAP_TRACELIGHT=184, Q3MAP_VERTEXSCALE=185, Q3MAP_VERTEXSHADOWS=186, 
		Q3MAP_VLIGHT=187, QER_ALPHAFUNC=188, QER_EDITORIMAGE=189, QER_NOCARVE=190, 
		QER_TRANS=191, RGBGEN=192, ROCK=193, ROTATE=194, RUG=195, SAND=196, SAWTOOTH=197, 
		SCALE=198, SCROLL=199, SET=200, SHIFT=201, SIN=202, SSKIP=203, SKY=204, 
		SKYPARMS=205, SLICK=206, SLIME=207, SNOW=208, SOFTWOOD=209, SORT=210, 
		SQUARE=211, STEEL=212, STRETCH=213, STRIP=214, STRUCTURAL=215, STUCCO=216, 
		SURFACEPARM=217, TEXT=218, TCGEN=219, TCMOD=220, TESSSIZE=221, TIN=222, 
		TITANIUM=223, TRANS=224, TRANSFORM=225, TRANSLATE=226, TRIANGLE=227, TURB=228, 
		UNDERWATER=229, VECTOR=230, VERTEX=231, VIDEOMAP=232, VOLUME=233, WATER=234, 
		WAVE=235, COMPILETIME=236, DEFAULT=237, EXP=238, FLOAT=239, INT=240, BOOL=241, 
		PATH=242, LCURLYBRACKET=243, RCURLYBRACKET=244, LROUNDBRACKET=245, RROUNDBRACKET=246, 
		DQUOTE=247, SQUOTE=248, WS=249, NL=250, COMMENT=251, MULTILINECOMMENT=252, 
		X=253, Y=254, Z=255;
	public const int
		RULE_shaderList = 0, RULE_shader = 1, RULE_stage = 2, RULE_shaderDirectiveList = 3, 
		RULE_stageList = 4, RULE_stageDirectiveList = 5, RULE_shaderDirective = 6, 
		RULE_generalDirective = 7, RULE_cullDirective = 8, RULE_deformVertexesDirective = 9, 
		RULE_fogParmsDirective = 10, RULE_noMipMapsDirective = 11, RULE_noPicMipDirective = 12, 
		RULE_polygonOffsetDirective = 13, RULE_portalDirective = 14, RULE_skyParmsDirective = 15, 
		RULE_sortDirective = 16, RULE_tessSizeDirective = 17, RULE_lightDirective = 18, 
		RULE_entityMergableDirective = 19, RULE_surfaceParmDirective = 20, RULE_q3mapDirective = 21, 
		RULE_q3mapAlphaGenDirective = 22, RULE_q3mapAlphaModDirective = 23, RULE_q3mapBackShaderDirective = 24, 
		RULE_q3mapBackSplashDirective = 25, RULE_q3mapBaseShaderDirective = 26, 
		RULE_q3mapBounceDirective = 27, RULE_q3mapBounceScaleDirective = 28, RULE_q3mapClipModelDirective = 29, 
		RULE_q3mapCloneShaderDirective = 30, RULE_q3mapColorGenDirective = 31, 
		RULE_q3mapColorModDirective = 32, RULE_q3mapFancyWaterDirective = 33, 
		RULE_q3mapFogDirDirective = 34, RULE_q3mapForceMetaDirective = 35, RULE_q3mapForceSunLightDirective = 36, 
		RULE_q3mapFurDirective = 37, RULE_q3mapGlobalTextureDirective = 38, RULE_q3mapIndexedDirective = 39, 
		RULE_q3mapInvertDirective = 40, RULE_q3mapLightImageDirective = 41, RULE_q3mapLightmapAxisDirective = 42, 
		RULE_q3mapLightmapBrightnessDirective = 43, RULE_q3mapLightmapFilterRadiusDirective = 44, 
		RULE_q3mapLightmapGammaDirective = 45, RULE_q3mapLightmapMergableDirective = 46, 
		RULE_q3mapLightmapSampleOffsetDirective = 47, RULE_q3mapLightmapSampleSizeDirective = 48, 
		RULE_q3mapLightmapSizeDirective = 49, RULE_q3mapLightRGBDirective = 50, 
		RULE_q3mapLightStyleDirective = 51, RULE_q3mapLightSubdivideDirective = 52, 
		RULE_q3mapNoClipDirective = 53, RULE_q3mapNoFastDirective = 54, RULE_q3mapNoFogDirective = 55, 
		RULE_q3mapNoLightmapDirective = 56, RULE_q3mapNonPlanarDirective = 57, 
		RULE_q3mapNormalImageDirective = 58, RULE_q3mapNoTJuncDirective = 59, 
		RULE_q3mapNoVertexLightDirective = 60, RULE_q3mapNoVertexShadowsDirective = 61, 
		RULE_q3mapOffsetDirective = 62, RULE_q3mapPatchShadowsDirective = 63, 
		RULE_q3mapRemapShaderDirective = 64, RULE_q3mapRGBGenDirective = 65, RULE_q3mapRGBModDirective = 66, 
		RULE_q3mapShadeAngleDirective = 67, RULE_q3mapSkyLightDirective = 68, 
		RULE_q3mapSplotchFixDirective = 69, RULE_q3mapStyleMarkerDirective = 70, 
		RULE_q3mapStyleMarker2Directive = 71, RULE_q3mapSunDirective = 72, RULE_q3mapSunExtDirective = 73, 
		RULE_q3mapSurfaceLightDirective = 74, RULE_q3mapSurfaceModelDirective = 75, 
		RULE_q3mapTcGenDirective = 76, RULE_q3mapTcModDirective = 77, RULE_q3mapTerrainDirective = 78, 
		RULE_q3mapTessSizeDirective = 79, RULE_q3mapTextureSizeDirective = 80, 
		RULE_q3mapTraceLightDirective = 81, RULE_q3mapVertexScaleDirective = 82, 
		RULE_q3mapVertexShadowsDirective = 83, RULE_q3mapVLightDirective = 84, 
		RULE_q3mapNoFancyWaterDirective = 85, RULE_q3mapCheapWaterDirective = 86, 
		RULE_editorDirective = 87, RULE_qerEditorImageDirective = 88, RULE_qerNoCarveDirective = 89, 
		RULE_qerTransDirective = 90, RULE_qerAlphaFuncDirective = 91, RULE_stageDirective = 92, 
		RULE_mapDirective = 93, RULE_clampMapDirective = 94, RULE_animMapDirective = 95, 
		RULE_videoMapDirective = 96, RULE_blendFuncDirective = 97, RULE_rGBGenDirective = 98, 
		RULE_alphaGenDirective = 99, RULE_tcGenDirective = 100, RULE_tcModDirective = 101, 
		RULE_depthFuncDirective = 102, RULE_depthWriteDirective = 103, RULE_detailDirective = 104, 
		RULE_alphaFuncDirective = 105, RULE_boolParam = 106, RULE_intParam = 107, 
		RULE_numberParam = 108, RULE_pathParam = 109, RULE_cullType = 110, RULE_waveFormFunctionType = 111, 
		RULE_sortType = 112, RULE_surfaceParmType = 113, RULE_qer_alphaFuncType = 114, 
		RULE_q3map_lightmapAxisType = 115, RULE_blendFuncSimplifiedType = 116, 
		RULE_blendFuncExplicitSrcType = 117, RULE_blendFuncExplicitDestType = 118, 
		RULE_depthFuncType = 119, RULE_alphaFuncType = 120;
	public static readonly string[] ruleNames = {
		"shaderList", "shader", "stage", "shaderDirectiveList", "stageList", "stageDirectiveList", 
		"shaderDirective", "generalDirective", "cullDirective", "deformVertexesDirective", 
		"fogParmsDirective", "noMipMapsDirective", "noPicMipDirective", "polygonOffsetDirective", 
		"portalDirective", "skyParmsDirective", "sortDirective", "tessSizeDirective", 
		"lightDirective", "entityMergableDirective", "surfaceParmDirective", "q3mapDirective", 
		"q3mapAlphaGenDirective", "q3mapAlphaModDirective", "q3mapBackShaderDirective", 
		"q3mapBackSplashDirective", "q3mapBaseShaderDirective", "q3mapBounceDirective", 
		"q3mapBounceScaleDirective", "q3mapClipModelDirective", "q3mapCloneShaderDirective", 
		"q3mapColorGenDirective", "q3mapColorModDirective", "q3mapFancyWaterDirective", 
		"q3mapFogDirDirective", "q3mapForceMetaDirective", "q3mapForceSunLightDirective", 
		"q3mapFurDirective", "q3mapGlobalTextureDirective", "q3mapIndexedDirective", 
		"q3mapInvertDirective", "q3mapLightImageDirective", "q3mapLightmapAxisDirective", 
		"q3mapLightmapBrightnessDirective", "q3mapLightmapFilterRadiusDirective", 
		"q3mapLightmapGammaDirective", "q3mapLightmapMergableDirective", "q3mapLightmapSampleOffsetDirective", 
		"q3mapLightmapSampleSizeDirective", "q3mapLightmapSizeDirective", "q3mapLightRGBDirective", 
		"q3mapLightStyleDirective", "q3mapLightSubdivideDirective", "q3mapNoClipDirective", 
		"q3mapNoFastDirective", "q3mapNoFogDirective", "q3mapNoLightmapDirective", 
		"q3mapNonPlanarDirective", "q3mapNormalImageDirective", "q3mapNoTJuncDirective", 
		"q3mapNoVertexLightDirective", "q3mapNoVertexShadowsDirective", "q3mapOffsetDirective", 
		"q3mapPatchShadowsDirective", "q3mapRemapShaderDirective", "q3mapRGBGenDirective", 
		"q3mapRGBModDirective", "q3mapShadeAngleDirective", "q3mapSkyLightDirective", 
		"q3mapSplotchFixDirective", "q3mapStyleMarkerDirective", "q3mapStyleMarker2Directive", 
		"q3mapSunDirective", "q3mapSunExtDirective", "q3mapSurfaceLightDirective", 
		"q3mapSurfaceModelDirective", "q3mapTcGenDirective", "q3mapTcModDirective", 
		"q3mapTerrainDirective", "q3mapTessSizeDirective", "q3mapTextureSizeDirective", 
		"q3mapTraceLightDirective", "q3mapVertexScaleDirective", "q3mapVertexShadowsDirective", 
		"q3mapVLightDirective", "q3mapNoFancyWaterDirective", "q3mapCheapWaterDirective", 
		"editorDirective", "qerEditorImageDirective", "qerNoCarveDirective", "qerTransDirective", 
		"qerAlphaFuncDirective", "stageDirective", "mapDirective", "clampMapDirective", 
		"animMapDirective", "videoMapDirective", "blendFuncDirective", "rGBGenDirective", 
		"alphaGenDirective", "tcGenDirective", "tcModDirective", "depthFuncDirective", 
		"depthWriteDirective", "detailDirective", "alphaFuncDirective", "boolParam", 
		"intParam", "numberParam", "pathParam", "cullType", "waveFormFunctionType", 
		"sortType", "surfaceParmType", "qer_alphaFuncType", "q3map_lightmapAxisType", 
		"blendFuncSimplifiedType", "blendFuncExplicitSrcType", "blendFuncExplicitDestType", 
		"depthFuncType", "alphaFuncType"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'-'", null, null, 
		null, null, null, "'{'", "'}'", "'('", "')'", "'\"'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "ADDITIVE", "ALPHAFUNC", "ALPHAGEN", "ALPHASHADOW", "ALUMINIUM", 
		"ANIMMAP", "ANTIPORTAL", "AREAPORTAL", "AUTOSPRITE", "AUTOSPRITE2", "BACK", 
		"BANNER", "BASE", "BLEND", "BLENDFUNC", "BOTCLIP", "BRASS", "BRICK", "BULGE", 
		"CARDBOARD", "CEMENT", "CERAMICTILE", "CLAMPMAP", "CLAY", "CONST", "COPPER", 
		"CLUSTERPORTAL", "CULL", "DEFORMVERTEXES", "DEPTHFUNC", "DEPTHWRITE", 
		"DETAIL", "DOLLARLIGHTMAP", "DOLLARWHITEIMAGE", "DIRT", "DONOTENTER", 
		"DOTPRODUCT", "DOTPRODUCT2", "DUST", "DISABLE", "ENTITY", "ENTITYMERGABLE", 
		"ENVIRONMENT", "EQUAL", "EXACTVERTEX", "FILTER", "FLESH", "FOG", "FOGPARMS", 
		"FROMVERTEX", "FRONT", "GE128", "GEQUAL", "GL_DST_COLOR", "GL_ONE", "GL_ONE_MINUS_DST_ALPHA", 
		"GL_ONE_MINUS_DST_COLOR", "GL_ONE_MINUS_SRC_ALPHA", "GL_ONE_MINUS_SRC_COLOR", 
		"GL_SRC_ALPHA", "GL_SRC_COLOR", "GL_ZERO", "GLASS", "GRAVEL", "GRASS", 
		"GREATER", "GT0", "HARDWOOD", "HINT", "ICE", "IDENTITY", "IDENTITYLIGHTING", 
		"INVERSESAWTOOTH", "IRON", "IVECTOR", "LADDER", "LAVA", "LEQUAL", "LESS", 
		"LIGHT", "LIGHTFILTER", "LIGHTGRID", "LIGHTINGDIFFUSE", "LIGHTINGSPECULAR", 
		"LIGHTMAP", "LINOLEUM", "LT128", "MAP", "METALSTEPS", "MONSTERCLIP", "MOVE", 
		"MUD", "NEAREST", "NODAMAGE", "NODLIGHT", "NODRAW", "NODROP", "NOIMPACT", 
		"NOISE", "NOLIGHTMAP", "NOMARKS", "NOMIPMAPS", "NONE", "NONOPAQUE", "NONSOLID", 
		"NOPICMIP", "NORMAL", "NOSTEPS", "ONEMINUSENTITY", "ONEMINUSVERTEX", "OPAQUE", 
		"ORIGIN", "PAVEMENT", "PLANK", "PLASTER", "PLASTIC", "PLAYERCLIP", "POINTLIGHT", 
		"POLYGONOFFSET", "PORTAL", "PROJECTIONSHADOW", "Q3MAP_ALPHAGEN", "Q3MAP_ALPHAMOD", 
		"Q3MAP_BACKSHADER", "Q3MAP_BACKSPLASH", "Q3MAP_BASESHADER", "Q3MAP_BOUNCE", 
		"Q3MAP_BOUNCESCALE", "Q3MAP_CHEAPWATER", "Q3MAP_CLIPMODEL", "Q3MAP_CLONESHADER", 
		"Q3MAP_COLORGEN", "Q3MAP_COLORMOD", "Q3MAP_FANCYWATER", "Q3MAP_FOGDIR", 
		"Q3MAP_FORCEMETA", "Q3MAP_FORCESUNLIGHT", "Q3MAP_FUR", "Q3MAP_GLOBALTEXTURE", 
		"Q3MAP_INDEXED", "Q3MAP_INVERT", "Q3MAP_LIGHTIMAGE", "Q3MAP_LIGHTMAPAXIS", 
		"Q3MAP_LIGHTMAPBRIGHTNESS", "Q3MAP_LIGHTMAPFILTERRADIUS", "Q3MAP_LIGHTMAPGAMMA", 
		"Q3MAP_LIGHTMAPMERGABLE", "Q3MAP_LIGHTMAPSAMPLEOFFSET", "Q3MAP_LIGHTMAPSAMPLESIZE", 
		"Q3MAP_LIGHTMAPSIZE", "Q3MAP_LIGHTRGB", "Q3MAP_LIGHTSTYLE", "Q3MAP_LIGHTSUBDIVIDE", 
		"Q3MAP_NOCLIP", "Q3MAP_NOFAST", "Q3MAP_NOFANCYWATER", "Q3MAP_NOFOG", "Q3MAP_NOLIGHTMAP", 
		"Q3MAP_NONPLANAR", "Q3MAP_NORMALIMAGE", "Q3MAP_NOTJUNC", "Q3MAP_NOVERTEXLIGHT", 
		"Q3MAP_NOVERTEXSHADOWS", "Q3MAP_OFFSET", "Q3MAP_PATCHSHADOWS", "Q3MAP_REMAPSHADER", 
		"Q3MAP_RGBGEN", "Q3MAP_RGBMOD", "Q3MAP_SHADEANGLE", "Q3MAP_SKYLIGHT", 
		"Q3MAP_SPLOTCHFIX", "Q3MAP_STYLEMARKER", "Q3MAP_STYLEMARKER2", "Q3MAP_SUN", 
		"Q3MAP_SUNEXT", "Q3MAP_SURFACELIGHT", "Q3MAP_SURFACEMODEL", "Q3MAP_TCGEN", 
		"Q3MAP_TCMOD", "Q3MAP_TERRAIN", "Q3MAP_TESSSIZE", "Q3MAP_TEXTURESIZE", 
		"Q3MAP_TRACELIGHT", "Q3MAP_VERTEXSCALE", "Q3MAP_VERTEXSHADOWS", "Q3MAP_VLIGHT", 
		"QER_ALPHAFUNC", "QER_EDITORIMAGE", "QER_NOCARVE", "QER_TRANS", "RGBGEN", 
		"ROCK", "ROTATE", "RUG", "SAND", "SAWTOOTH", "SCALE", "SCROLL", "SET", 
		"SHIFT", "SIN", "SSKIP", "SKY", "SKYPARMS", "SLICK", "SLIME", "SNOW", 
		"SOFTWOOD", "SORT", "SQUARE", "STEEL", "STRETCH", "STRIP", "STRUCTURAL", 
		"STUCCO", "SURFACEPARM", "TEXT", "TCGEN", "TCMOD", "TESSSIZE", "TIN", 
		"TITANIUM", "TRANS", "TRANSFORM", "TRANSLATE", "TRIANGLE", "TURB", "UNDERWATER", 
		"VECTOR", "VERTEX", "VIDEOMAP", "VOLUME", "WATER", "WAVE", "COMPILETIME", 
		"DEFAULT", "EXP", "FLOAT", "INT", "BOOL", "PATH", "LCURLYBRACKET", "RCURLYBRACKET", 
		"LROUNDBRACKET", "RROUNDBRACKET", "DQUOTE", "SQUOTE", "WS", "NL", "COMMENT", 
		"MULTILINECOMMENT", "X", "Y", "Z"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShaderParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShaderParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShaderParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderListContext : ParserRuleContext {
		public List<Shader> value;
		public ShaderContext a1;
		public ShaderContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext[] shader() {
			return GetRuleContexts<ShaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader(int i) {
			return GetRuleContext<ShaderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		public ShaderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterShaderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitShaderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderListContext shaderList() {
		ShaderListContext _localctx = new ShaderListContext(Context, State);
		EnterRule(_localctx, 0, RULE_shaderList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new List<Shader>();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (PATH - 242)) | (1L << (DQUOTE - 242)) | (1L << (SQUOTE - 242)))) != 0)) {
				{
				State = 243;
				_localctx.a1 = shader();
				_localctx.value.Add(_localctx.a1.value);
				}
			}

			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS || _la==NL) {
				{
				{
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 248;
					Match(WS);
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 254;
				Match(NL);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS || _la==NL) {
					{
					{
					State = 255;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 261;
				_localctx.a2 = shader();
				_localctx.value.Add(_localctx.a2.value);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public Shader value;
		public PathParamContext a1;
		public ShaderDirectiveListContext a2;
		public StageListContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ShaderParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ShaderParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPILETIME() { return GetToken(ShaderParser.COMPILETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDirectiveListContext shaderDirectiveList() {
			return GetRuleContext<ShaderDirectiveListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageListContext stageList() {
			return GetRuleContext<StageListContext>(0);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_shader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{

			       _localctx.value =  new Shader()
					   {
							CompileTime = false,
							Directives = new List<ShaderDirective>(),
							Stages = new List<Stage>()
					   };
			       
			State = 270;
			_localctx.a1 = pathParam();
			_localctx.value.Name = _localctx.a1.value;
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPILETIME) {
				{
				State = 272;
				Match(COMPILETIME);
				_localctx.value.CompileTime = true;
				}
			}

			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				_la = TokenStream.LA(1);
				if ( !(_la==WS || _la==NL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WS || _la==NL );
			State = 281;
			Match(LCURLYBRACKET);
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 283;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 282;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 287;
				_localctx.a2 = shaderDirectiveList();
				_localctx.value.Directives = _localctx.a2.value;
				}
				break;
			}
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 292;
					Match(WS);
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 298;
				Match(NL);
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 299;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 304;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 305;
				_localctx.a3 = stageList();
				_localctx.value.Stages = _localctx.a3.value;
				}
				break;
			}
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 310;
				Match(WS);
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316;
			Match(NL);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS || _la==NL) {
				{
				{
				State = 317;
				_la = TokenStream.LA(1);
				if ( !(_la==WS || _la==NL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 323;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public Stage value;
		public StageDirectiveListContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(ShaderParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(ShaderParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageDirectiveListContext stageDirectiveList() {
			return GetRuleContext<StageDirectiveListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			 _localctx.value =  new Stage() 
			       { 
			            Directives = new List<StageDirective>()
			       }; 
			       
			State = 326;
			Match(LCURLYBRACKET);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS || _la==NL) {
				{
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 327;
					Match(WS);
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 333;
				Match(NL);
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 334;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 339;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				State = 340;
				_localctx.a = stageDirectiveList();
				_localctx.value.Directives = _localctx.a.value;
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 342;
					Match(WS);
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 348;
				Match(NL);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS || _la==NL) {
					{
					{
					State = 349;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 357;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDirectiveListContext : ParserRuleContext {
		public List<ShaderDirective> value;
		public ShaderDirectiveContext a1;
		public ShaderDirectiveContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDirectiveContext[] shaderDirective() {
			return GetRuleContexts<ShaderDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDirectiveContext shaderDirective(int i) {
			return GetRuleContext<ShaderDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		public ShaderDirectiveListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDirectiveList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterShaderDirectiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitShaderDirectiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDirectiveList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDirectiveListContext shaderDirectiveList() {
		ShaderDirectiveListContext _localctx = new ShaderDirectiveListContext(Context, State);
		EnterRule(_localctx, 6, RULE_shaderDirectiveList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new List<ShaderDirective>();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & ((1L << (CULL - 29)) | (1L << (DEFORMVERTEXES - 29)) | (1L << (ENTITYMERGABLE - 29)) | (1L << (FOGPARMS - 29)) | (1L << (LIGHT - 29)))) != 0) || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NOMIPMAPS - 103)) | (1L << (NOPICMIP - 103)) | (1L << (POLYGONOFFSET - 103)) | (1L << (PORTAL - 103)) | (1L << (Q3MAP_ALPHAGEN - 103)) | (1L << (Q3MAP_ALPHAMOD - 103)) | (1L << (Q3MAP_BACKSHADER - 103)) | (1L << (Q3MAP_BACKSPLASH - 103)) | (1L << (Q3MAP_BASESHADER - 103)) | (1L << (Q3MAP_BOUNCE - 103)) | (1L << (Q3MAP_BOUNCESCALE - 103)) | (1L << (Q3MAP_CHEAPWATER - 103)) | (1L << (Q3MAP_CLIPMODEL - 103)) | (1L << (Q3MAP_CLONESHADER - 103)) | (1L << (Q3MAP_COLORGEN - 103)) | (1L << (Q3MAP_COLORMOD - 103)) | (1L << (Q3MAP_FANCYWATER - 103)) | (1L << (Q3MAP_FOGDIR - 103)) | (1L << (Q3MAP_FORCEMETA - 103)) | (1L << (Q3MAP_FORCESUNLIGHT - 103)) | (1L << (Q3MAP_FUR - 103)) | (1L << (Q3MAP_GLOBALTEXTURE - 103)) | (1L << (Q3MAP_INDEXED - 103)) | (1L << (Q3MAP_INVERT - 103)) | (1L << (Q3MAP_LIGHTIMAGE - 103)) | (1L << (Q3MAP_LIGHTMAPAXIS - 103)) | (1L << (Q3MAP_LIGHTMAPBRIGHTNESS - 103)) | (1L << (Q3MAP_LIGHTMAPFILTERRADIUS - 103)) | (1L << (Q3MAP_LIGHTMAPGAMMA - 103)) | (1L << (Q3MAP_LIGHTMAPMERGABLE - 103)) | (1L << (Q3MAP_LIGHTMAPSAMPLEOFFSET - 103)) | (1L << (Q3MAP_LIGHTMAPSAMPLESIZE - 103)) | (1L << (Q3MAP_LIGHTMAPSIZE - 103)) | (1L << (Q3MAP_LIGHTRGB - 103)) | (1L << (Q3MAP_LIGHTSTYLE - 103)) | (1L << (Q3MAP_LIGHTSUBDIVIDE - 103)) | (1L << (Q3MAP_NOCLIP - 103)) | (1L << (Q3MAP_NOFAST - 103)) | (1L << (Q3MAP_NOFANCYWATER - 103)) | (1L << (Q3MAP_NOFOG - 103)) | (1L << (Q3MAP_NOLIGHTMAP - 103)) | (1L << (Q3MAP_NONPLANAR - 103)) | (1L << (Q3MAP_NORMALIMAGE - 103)) | (1L << (Q3MAP_NOTJUNC - 103)) | (1L << (Q3MAP_NOVERTEXLIGHT - 103)) | (1L << (Q3MAP_NOVERTEXSHADOWS - 103)) | (1L << (Q3MAP_OFFSET - 103)) | (1L << (Q3MAP_PATCHSHADOWS - 103)))) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (Q3MAP_REMAPSHADER - 167)) | (1L << (Q3MAP_RGBGEN - 167)) | (1L << (Q3MAP_RGBMOD - 167)) | (1L << (Q3MAP_SHADEANGLE - 167)) | (1L << (Q3MAP_SKYLIGHT - 167)) | (1L << (Q3MAP_SPLOTCHFIX - 167)) | (1L << (Q3MAP_STYLEMARKER - 167)) | (1L << (Q3MAP_STYLEMARKER2 - 167)) | (1L << (Q3MAP_SUN - 167)) | (1L << (Q3MAP_SUNEXT - 167)) | (1L << (Q3MAP_SURFACELIGHT - 167)) | (1L << (Q3MAP_SURFACEMODEL - 167)) | (1L << (Q3MAP_TCGEN - 167)) | (1L << (Q3MAP_TCMOD - 167)) | (1L << (Q3MAP_TERRAIN - 167)) | (1L << (Q3MAP_TESSSIZE - 167)) | (1L << (Q3MAP_TEXTURESIZE - 167)) | (1L << (Q3MAP_TRACELIGHT - 167)) | (1L << (Q3MAP_VERTEXSCALE - 167)) | (1L << (Q3MAP_VERTEXSHADOWS - 167)) | (1L << (Q3MAP_VLIGHT - 167)) | (1L << (QER_ALPHAFUNC - 167)) | (1L << (QER_EDITORIMAGE - 167)) | (1L << (QER_NOCARVE - 167)) | (1L << (QER_TRANS - 167)) | (1L << (SKYPARMS - 167)) | (1L << (SORT - 167)) | (1L << (SURFACEPARM - 167)) | (1L << (TESSSIZE - 167)))) != 0)) {
				{
				State = 360;
				_localctx.a1 = shaderDirective();
				_localctx.value.Add(_localctx.a1.value);
				}
			}

			State = 383;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 365;
						Match(WS);
						}
						}
						State = 370;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 371;
					Match(NL);
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS || _la==NL) {
						{
						{
						State = 372;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 377;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 378;
					_localctx.a2 = shaderDirective();
					_localctx.value.Add(_localctx.a2.value);
					}
					} 
				}
				State = 385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageListContext : ParserRuleContext {
		public List<Stage> value;
		public StageContext a1;
		public StageContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		public StageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stageList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterStageList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitStageList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStageList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StageListContext stageList() {
		StageListContext _localctx = new StageListContext(Context, State);
		EnterRule(_localctx, 8, RULE_stageList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new List<Stage>();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLYBRACKET) {
				{
				State = 387;
				_localctx.a1 = stage();
				_localctx.value.Add(_localctx.a1.value);
				}
			}

			State = 410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 392;
						Match(WS);
						}
						}
						State = 397;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 398;
					Match(NL);
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS || _la==NL) {
						{
						{
						State = 399;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 404;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 405;
					_localctx.a2 = stage();
					_localctx.value.Add(_localctx.a2.value);
					}
					} 
				}
				State = 412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageDirectiveListContext : ParserRuleContext {
		public List<StageDirective> value;
		public StageDirectiveContext a1;
		public StageDirectiveContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageDirectiveContext[] stageDirective() {
			return GetRuleContexts<StageDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageDirectiveContext stageDirective(int i) {
			return GetRuleContext<StageDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		public StageDirectiveListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stageDirectiveList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterStageDirectiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitStageDirectiveList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStageDirectiveList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StageDirectiveListContext stageDirectiveList() {
		StageDirectiveListContext _localctx = new StageDirectiveListContext(Context, State);
		EnterRule(_localctx, 10, RULE_stageDirectiveList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new List<StageDirective>();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHAFUNC) | (1L << ALPHAGEN) | (1L << ANIMMAP) | (1L << BLENDFUNC) | (1L << CLAMPMAP) | (1L << DEPTHFUNC) | (1L << DEPTHWRITE) | (1L << DETAIL))) != 0) || _la==MAP || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RGBGEN - 192)) | (1L << (TCGEN - 192)) | (1L << (TCMOD - 192)) | (1L << (VIDEOMAP - 192)))) != 0)) {
				{
				State = 414;
				_localctx.a1 = stageDirective();
				_localctx.value.Add(_localctx.a1.value);
				}
			}

			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 419;
						Match(WS);
						}
						}
						State = 424;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 425;
					Match(NL);
					State = 429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS || _la==NL) {
						{
						{
						State = 426;
						_la = TokenStream.LA(1);
						if ( !(_la==WS || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 431;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 432;
					_localctx.a2 = stageDirective();
					_localctx.value.Add(_localctx.a2.value);
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDirectiveContext : ParserRuleContext {
		public ShaderDirective value;
		public GeneralDirectiveContext a1;
		public SurfaceParmDirectiveContext a2;
		public Q3mapDirectiveContext a3;
		public EditorDirectiveContext a4;
		[System.Diagnostics.DebuggerNonUserCode] public GeneralDirectiveContext generalDirective() {
			return GetRuleContext<GeneralDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SurfaceParmDirectiveContext surfaceParmDirective() {
			return GetRuleContext<SurfaceParmDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapDirectiveContext q3mapDirective() {
			return GetRuleContext<Q3mapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EditorDirectiveContext editorDirective() {
			return GetRuleContext<EditorDirectiveContext>(0);
		}
		public ShaderDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDirectiveContext shaderDirective() {
		ShaderDirectiveContext _localctx = new ShaderDirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_shaderDirective);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CULL:
			case DEFORMVERTEXES:
			case ENTITYMERGABLE:
			case FOGPARMS:
			case LIGHT:
			case NOMIPMAPS:
			case NOPICMIP:
			case POLYGONOFFSET:
			case PORTAL:
			case SKYPARMS:
			case SORT:
			case TESSSIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				_localctx.a1 = generalDirective();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case SURFACEPARM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 443;
				_localctx.a2 = surfaceParmDirective();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			case Q3MAP_ALPHAGEN:
			case Q3MAP_ALPHAMOD:
			case Q3MAP_BACKSHADER:
			case Q3MAP_BACKSPLASH:
			case Q3MAP_BASESHADER:
			case Q3MAP_BOUNCE:
			case Q3MAP_BOUNCESCALE:
			case Q3MAP_CHEAPWATER:
			case Q3MAP_CLIPMODEL:
			case Q3MAP_CLONESHADER:
			case Q3MAP_COLORGEN:
			case Q3MAP_COLORMOD:
			case Q3MAP_FANCYWATER:
			case Q3MAP_FOGDIR:
			case Q3MAP_FORCEMETA:
			case Q3MAP_FORCESUNLIGHT:
			case Q3MAP_FUR:
			case Q3MAP_GLOBALTEXTURE:
			case Q3MAP_INDEXED:
			case Q3MAP_INVERT:
			case Q3MAP_LIGHTIMAGE:
			case Q3MAP_LIGHTMAPAXIS:
			case Q3MAP_LIGHTMAPBRIGHTNESS:
			case Q3MAP_LIGHTMAPFILTERRADIUS:
			case Q3MAP_LIGHTMAPGAMMA:
			case Q3MAP_LIGHTMAPMERGABLE:
			case Q3MAP_LIGHTMAPSAMPLEOFFSET:
			case Q3MAP_LIGHTMAPSAMPLESIZE:
			case Q3MAP_LIGHTMAPSIZE:
			case Q3MAP_LIGHTRGB:
			case Q3MAP_LIGHTSTYLE:
			case Q3MAP_LIGHTSUBDIVIDE:
			case Q3MAP_NOCLIP:
			case Q3MAP_NOFAST:
			case Q3MAP_NOFANCYWATER:
			case Q3MAP_NOFOG:
			case Q3MAP_NOLIGHTMAP:
			case Q3MAP_NONPLANAR:
			case Q3MAP_NORMALIMAGE:
			case Q3MAP_NOTJUNC:
			case Q3MAP_NOVERTEXLIGHT:
			case Q3MAP_NOVERTEXSHADOWS:
			case Q3MAP_OFFSET:
			case Q3MAP_PATCHSHADOWS:
			case Q3MAP_REMAPSHADER:
			case Q3MAP_RGBGEN:
			case Q3MAP_RGBMOD:
			case Q3MAP_SHADEANGLE:
			case Q3MAP_SKYLIGHT:
			case Q3MAP_SPLOTCHFIX:
			case Q3MAP_STYLEMARKER:
			case Q3MAP_STYLEMARKER2:
			case Q3MAP_SUN:
			case Q3MAP_SUNEXT:
			case Q3MAP_SURFACELIGHT:
			case Q3MAP_SURFACEMODEL:
			case Q3MAP_TCGEN:
			case Q3MAP_TCMOD:
			case Q3MAP_TERRAIN:
			case Q3MAP_TESSSIZE:
			case Q3MAP_TEXTURESIZE:
			case Q3MAP_TRACELIGHT:
			case Q3MAP_VERTEXSCALE:
			case Q3MAP_VERTEXSHADOWS:
			case Q3MAP_VLIGHT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446;
				_localctx.a3 = q3mapDirective();
				_localctx.value =  _localctx.a3.value;
				}
				break;
			case QER_ALPHAFUNC:
			case QER_EDITORIMAGE:
			case QER_NOCARVE:
			case QER_TRANS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 449;
				_localctx.a4 = editorDirective();
				_localctx.value =  _localctx.a4.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralDirectiveContext : ParserRuleContext {
		public GeneralDirective value;
		public CullDirectiveContext a1;
		public DeformVertexesDirectiveContext a2;
		public FogParmsDirectiveContext a3;
		public NoMipMapsDirectiveContext a4;
		public NoPicMipDirectiveContext a5;
		public PolygonOffsetDirectiveContext a6;
		public PortalDirectiveContext a7;
		public SkyParmsDirectiveContext a8;
		public SortDirectiveContext a9;
		public TessSizeDirectiveContext a10;
		public LightDirectiveContext a11;
		public EntityMergableDirectiveContext a12;
		[System.Diagnostics.DebuggerNonUserCode] public CullDirectiveContext cullDirective() {
			return GetRuleContext<CullDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeformVertexesDirectiveContext deformVertexesDirective() {
			return GetRuleContext<DeformVertexesDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FogParmsDirectiveContext fogParmsDirective() {
			return GetRuleContext<FogParmsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoMipMapsDirectiveContext noMipMapsDirective() {
			return GetRuleContext<NoMipMapsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoPicMipDirectiveContext noPicMipDirective() {
			return GetRuleContext<NoPicMipDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PolygonOffsetDirectiveContext polygonOffsetDirective() {
			return GetRuleContext<PolygonOffsetDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PortalDirectiveContext portalDirective() {
			return GetRuleContext<PortalDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkyParmsDirectiveContext skyParmsDirective() {
			return GetRuleContext<SkyParmsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortDirectiveContext sortDirective() {
			return GetRuleContext<SortDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TessSizeDirectiveContext tessSizeDirective() {
			return GetRuleContext<TessSizeDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LightDirectiveContext lightDirective() {
			return GetRuleContext<LightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityMergableDirectiveContext entityMergableDirective() {
			return GetRuleContext<EntityMergableDirectiveContext>(0);
		}
		public GeneralDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterGeneralDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitGeneralDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralDirectiveContext generalDirective() {
		GeneralDirectiveContext _localctx = new GeneralDirectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_generalDirective);
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 454;
				_localctx.a1 = cullDirective();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case DEFORMVERTEXES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457;
				_localctx.a2 = deformVertexesDirective();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			case FOGPARMS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 460;
				_localctx.a3 = fogParmsDirective();
				_localctx.value =  _localctx.a3.value;
				}
				break;
			case NOMIPMAPS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 463;
				_localctx.a4 = noMipMapsDirective();
				_localctx.value =  _localctx.a4.value;
				}
				break;
			case NOPICMIP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 466;
				_localctx.a5 = noPicMipDirective();
				_localctx.value =  _localctx.a5.value;
				}
				break;
			case POLYGONOFFSET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 469;
				_localctx.a6 = polygonOffsetDirective();
				_localctx.value =  _localctx.a6.value;
				}
				break;
			case PORTAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 472;
				_localctx.a7 = portalDirective();
				_localctx.value =  _localctx.a7.value;
				}
				break;
			case SKYPARMS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 475;
				_localctx.a8 = skyParmsDirective();
				_localctx.value =  _localctx.a8.value;
				}
				break;
			case SORT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 478;
				_localctx.a9 = sortDirective();
				_localctx.value =  _localctx.a9.value;
				}
				break;
			case TESSSIZE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 481;
				_localctx.a10 = tessSizeDirective();
				_localctx.value =  _localctx.a10.value;
				}
				break;
			case LIGHT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 484;
				_localctx.a11 = lightDirective();
				_localctx.value =  _localctx.a11.value;
				}
				break;
			case ENTITYMERGABLE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 487;
				_localctx.a12 = entityMergableDirective();
				_localctx.value =  _localctx.a12.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullDirectiveContext : ParserRuleContext {
		public Cull value;
		public CullTypeContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CULL() { return GetToken(ShaderParser.CULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CullTypeContext cullType() {
			return GetRuleContext<CullTypeContext>(0);
		}
		public CullDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterCullDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitCullDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullDirectiveContext cullDirective() {
		CullDirectiveContext _localctx = new CullDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_cullDirective);
		try {
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 492;
				Match(CULL);
				_localctx.value =  new Cull();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				Match(CULL);
				State = 495;
				Match(WS);
				State = 496;
				_localctx.a = cullType();
				_localctx.value =  new Cull(_localctx.a.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeformVertexesDirectiveContext : ParserRuleContext {
		public DeformVertexes value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		public WaveFormFunctionTypeContext b4;
		public NumberParamContext b5;
		public NumberParamContext b6;
		public NumberParamContext b7;
		public NumberParamContext b8;
		public NumberParamContext c1;
		public WaveFormFunctionTypeContext c2;
		public NumberParamContext c3;
		public NumberParamContext c4;
		public NumberParamContext c5;
		public NumberParamContext f1;
		public NumberParamContext f2;
		public NumberParamContext g1;
		public WaveFormFunctionTypeContext g2;
		public NumberParamContext g3;
		public NumberParamContext g4;
		public NumberParamContext g5;
		public NumberParamContext g6;
		public IntParamContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFORMVERTEXES() { return GetToken(ShaderParser.DEFORMVERTEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOSPRITE() { return GetToken(ShaderParser.AUTOSPRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOSPRITE2() { return GetToken(ShaderParser.AUTOSPRITE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULGE() { return GetToken(ShaderParser.BULGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(ShaderParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveFormFunctionTypeContext waveFormFunctionType() {
			return GetRuleContext<WaveFormFunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMAL() { return GetToken(ShaderParser.NORMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAVE() { return GetToken(ShaderParser.WAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ShaderParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECTIONSHADOW() { return GetToken(ShaderParser.PROJECTIONSHADOW, 0); }
		public DeformVertexesDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deformVertexesDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterDeformVertexesDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitDeformVertexesDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeformVertexesDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeformVertexesDirectiveContext deformVertexesDirective() {
		DeformVertexesDirectiveContext _localctx = new DeformVertexesDirectiveContext(Context, State);
		EnterRule(_localctx, 18, RULE_deformVertexesDirective);
		try {
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				Match(DEFORMVERTEXES);
				State = 502;
				Match(WS);
				State = 503;
				Match(AUTOSPRITE);
				_localctx.value =  new DeformVertexesAutoSprite();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(DEFORMVERTEXES);
				State = 506;
				Match(WS);
				State = 507;
				Match(AUTOSPRITE2);
				_localctx.value =  new DeformVertexesAutoSprite2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509;
				Match(DEFORMVERTEXES);
				State = 510;
				Match(WS);
				State = 511;
				Match(BULGE);
				State = 512;
				Match(WS);
				State = 513;
				_localctx.a1 = numberParam();
				State = 514;
				Match(WS);
				State = 515;
				_localctx.a2 = numberParam();
				State = 516;
				Match(WS);
				State = 517;
				_localctx.a3 = numberParam();
				_localctx.value =  new DeformVertexesBulge(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 520;
				Match(DEFORMVERTEXES);
				State = 521;
				Match(WS);
				State = 522;
				Match(MOVE);
				State = 523;
				Match(WS);
				State = 524;
				_localctx.b1 = numberParam();
				State = 525;
				Match(WS);
				State = 526;
				_localctx.b2 = numberParam();
				State = 527;
				Match(WS);
				State = 528;
				_localctx.b3 = numberParam();
				State = 529;
				Match(WS);
				State = 530;
				_localctx.b4 = waveFormFunctionType();
				State = 531;
				Match(WS);
				State = 532;
				_localctx.b5 = numberParam();
				State = 533;
				Match(WS);
				State = 534;
				_localctx.b6 = numberParam();
				State = 535;
				Match(WS);
				State = 536;
				_localctx.b7 = numberParam();
				State = 537;
				Match(WS);
				State = 538;
				_localctx.b8 = numberParam();
				_localctx.value =  new DeformVertexesMove(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value, _localctx.b4.value, _localctx.b5.value, _localctx.b6.value, _localctx.b7.value, _localctx.b8.value);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 541;
				Match(DEFORMVERTEXES);
				State = 542;
				Match(WS);
				State = 543;
				Match(NORMAL);
				State = 544;
				Match(WS);
				State = 545;
				_localctx.c1 = numberParam();
				State = 546;
				Match(WS);
				State = 547;
				_localctx.c2 = waveFormFunctionType();
				State = 548;
				Match(WS);
				State = 549;
				_localctx.c3 = numberParam();
				State = 550;
				Match(WS);
				State = 551;
				_localctx.c4 = numberParam();
				State = 552;
				Match(WS);
				State = 553;
				_localctx.c5 = numberParam();
				_localctx.value =  new DeformVertexesNormal(_localctx.c1.value, _localctx.c2.value, _localctx.c3.value, _localctx.c4.value, _localctx.c5.value);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 556;
				Match(DEFORMVERTEXES);
				State = 557;
				Match(WS);
				State = 558;
				Match(NORMAL);
				State = 559;
				Match(WS);
				State = 560;
				_localctx.f1 = numberParam();
				State = 561;
				Match(WS);
				State = 562;
				_localctx.f2 = numberParam();
				_localctx.value =  new DeformVertexesNormal(0, null, 0, _localctx.f1.value, _localctx.f2.value);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 565;
				Match(DEFORMVERTEXES);
				State = 566;
				Match(WS);
				State = 567;
				Match(WAVE);
				State = 568;
				Match(WS);
				State = 569;
				_localctx.g1 = numberParam();
				State = 570;
				Match(WS);
				State = 571;
				_localctx.g2 = waveFormFunctionType();
				State = 572;
				Match(WS);
				State = 573;
				_localctx.g3 = numberParam();
				State = 574;
				Match(WS);
				State = 575;
				_localctx.g4 = numberParam();
				State = 576;
				Match(WS);
				State = 577;
				_localctx.g5 = numberParam();
				State = 578;
				Match(WS);
				State = 579;
				_localctx.g6 = numberParam();
				_localctx.value =  new DeformVertexesWave(_localctx.g1.value, _localctx.g2.value, _localctx.g3.value, _localctx.g4.value, _localctx.g5.value, _localctx.g6.value);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 582;
				Match(DEFORMVERTEXES);
				State = 583;
				Match(WS);
				State = 584;
				Match(TEXT);
				State = 585;
				_localctx.e = intParam();
				_localctx.value =  new DeformVertexesText(_localctx.e.value);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 588;
				Match(DEFORMVERTEXES);
				State = 589;
				Match(WS);
				State = 590;
				Match(PROJECTIONSHADOW);
				_localctx.value =  new DeformVertexesProjectionShadow();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FogParmsDirectiveContext : ParserRuleContext {
		public FogParms value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOGPARMS() { return GetToken(ShaderParser.FOGPARMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public FogParmsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fogParmsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterFogParmsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitFogParmsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFogParmsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FogParmsDirectiveContext fogParmsDirective() {
		FogParmsDirectiveContext _localctx = new FogParmsDirectiveContext(Context, State);
		EnterRule(_localctx, 20, RULE_fogParmsDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(FOGPARMS);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 595;
				Match(WS);
				}
			}

			State = 598;
			Match(LROUNDBRACKET);
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 599;
				Match(WS);
				}
			}

			State = 602;
			_localctx.a1 = numberParam();
			State = 603;
			Match(WS);
			State = 604;
			_localctx.a2 = numberParam();
			State = 605;
			Match(WS);
			State = 606;
			_localctx.a3 = numberParam();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 607;
				Match(WS);
				}
			}

			State = 610;
			Match(RROUNDBRACKET);
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 611;
				Match(WS);
				}
			}

			State = 614;
			_localctx.a4 = numberParam();
			_localctx.value =  new FogParms(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoMipMapsDirectiveContext : ParserRuleContext {
		public NoMipMaps value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMIPMAPS() { return GetToken(ShaderParser.NOMIPMAPS, 0); }
		public NoMipMapsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noMipMapsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterNoMipMapsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitNoMipMapsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoMipMapsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoMipMapsDirectiveContext noMipMapsDirective() {
		NoMipMapsDirectiveContext _localctx = new NoMipMapsDirectiveContext(Context, State);
		EnterRule(_localctx, 22, RULE_noMipMapsDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(NOMIPMAPS);
			_localctx.value =  new NoMipMaps();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPicMipDirectiveContext : ParserRuleContext {
		public NoPicMip value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPICMIP() { return GetToken(ShaderParser.NOPICMIP, 0); }
		public NoPicMipDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPicMipDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterNoPicMipDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitNoPicMipDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoPicMipDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoPicMipDirectiveContext noPicMipDirective() {
		NoPicMipDirectiveContext _localctx = new NoPicMipDirectiveContext(Context, State);
		EnterRule(_localctx, 24, RULE_noPicMipDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(NOPICMIP);
			_localctx.value =  new NoPicMip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolygonOffsetDirectiveContext : ParserRuleContext {
		public PolygonOffset value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONOFFSET() { return GetToken(ShaderParser.POLYGONOFFSET, 0); }
		public PolygonOffsetDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polygonOffsetDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterPolygonOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitPolygonOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolygonOffsetDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolygonOffsetDirectiveContext polygonOffsetDirective() {
		PolygonOffsetDirectiveContext _localctx = new PolygonOffsetDirectiveContext(Context, State);
		EnterRule(_localctx, 26, RULE_polygonOffsetDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(POLYGONOFFSET);
			_localctx.value =  new PolygonOffset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PortalDirectiveContext : ParserRuleContext {
		public Portal value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORTAL() { return GetToken(ShaderParser.PORTAL, 0); }
		public PortalDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_portalDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterPortalDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitPortalDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPortalDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PortalDirectiveContext portalDirective() {
		PortalDirectiveContext _localctx = new PortalDirectiveContext(Context, State);
		EnterRule(_localctx, 28, RULE_portalDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			Match(PORTAL);
			_localctx.value =  new Portal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkyParmsDirectiveContext : ParserRuleContext {
		public SkyParms value;
		public PathParamContext a1;
		public NumberParamContext a2;
		public PathParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKYPARMS() { return GetToken(ShaderParser.SKYPARMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(ShaderParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(ShaderParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext[] pathParam() {
			return GetRuleContexts<PathParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam(int i) {
			return GetRuleContext<PathParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public SkyParmsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skyParmsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterSkyParmsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitSkyParmsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkyParmsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkyParmsDirectiveContext skyParmsDirective() {
		SkyParmsDirectiveContext _localctx = new SkyParmsDirectiveContext(Context, State);
		EnterRule(_localctx, 30, RULE_skyParmsDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			string path1 = null; float float1 = 128; string path2 = null;
			State = 630;
			Match(SKYPARMS);
			State = 631;
			Match(WS);
			State = 636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 632;
				Match(DEFAULT);
				}
				break;
			case PATH:
			case DQUOTE:
			case SQUOTE:
				{
				State = 633;
				_localctx.a1 = pathParam();
				path1=_localctx.a1.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 638;
			Match(WS);
			State = 643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 639;
				Match(DEFAULT);
				}
				break;
			case EXP:
			case FLOAT:
			case INT:
			case DQUOTE:
			case SQUOTE:
				{
				State = 640;
				_localctx.a2 = numberParam();
				float1=_localctx.a2.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 645;
			Match(WS);
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 646;
				Match(DEFAULT);
				}
				break;
			case PATH:
			case DQUOTE:
			case SQUOTE:
				{
				State = 647;
				_localctx.a3 = pathParam();
				path2=_localctx.a3.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_localctx.value =  new SkyParms(path1, float1, path2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortDirectiveContext : ParserRuleContext {
		public Sort value;
		public SortTypeContext a;
		public IntParamContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SORT() { return GetToken(ShaderParser.SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortTypeContext sortType() {
			return GetRuleContext<SortTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		public SortDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterSortDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitSortDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortDirectiveContext sortDirective() {
		SortDirectiveContext _localctx = new SortDirectiveContext(Context, State);
		EnterRule(_localctx, 32, RULE_sortDirective);
		try {
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654;
				Match(SORT);
				State = 655;
				Match(WS);
				State = 656;
				_localctx.a = sortType();
				_localctx.value =  new Sort(_localctx.a.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				Match(SORT);
				State = 660;
				Match(WS);
				State = 661;
				_localctx.b = intParam();
				_localctx.value =  new Sort(_localctx.b.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TessSizeDirectiveContext : ParserRuleContext {
		public TessSize value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TESSSIZE() { return GetToken(ShaderParser.TESSSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public TessSizeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tessSizeDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterTessSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitTessSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTessSizeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TessSizeDirectiveContext tessSizeDirective() {
		TessSizeDirectiveContext _localctx = new TessSizeDirectiveContext(Context, State);
		EnterRule(_localctx, 34, RULE_tessSizeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(TESSSIZE);
			State = 667;
			Match(WS);
			State = 668;
			_localctx.a = numberParam();
			_localctx.value =  new TessSize(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LightDirectiveContext : ParserRuleContext {
		public Light value;
		public IntParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT() { return GetToken(ShaderParser.LIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		public LightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LightDirectiveContext lightDirective() {
		LightDirectiveContext _localctx = new LightDirectiveContext(Context, State);
		EnterRule(_localctx, 36, RULE_lightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(LIGHT);
			State = 672;
			Match(WS);
			State = 673;
			_localctx.a = intParam();
			_localctx.value =  new Light(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityMergableDirectiveContext : ParserRuleContext {
		public EntityMergable value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITYMERGABLE() { return GetToken(ShaderParser.ENTITYMERGABLE, 0); }
		public EntityMergableDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityMergableDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterEntityMergableDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitEntityMergableDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityMergableDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityMergableDirectiveContext entityMergableDirective() {
		EntityMergableDirectiveContext _localctx = new EntityMergableDirectiveContext(Context, State);
		EnterRule(_localctx, 38, RULE_entityMergableDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(ENTITYMERGABLE);
			_localctx.value =  new EntityMergable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfaceParmDirectiveContext : ParserRuleContext {
		public SurfaceParm value;
		public SurfaceParmTypeContext a1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SURFACEPARM() { return GetToken(ShaderParser.SURFACEPARM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SurfaceParmTypeContext surfaceParmType() {
			return GetRuleContext<SurfaceParmTypeContext>(0);
		}
		public SurfaceParmDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfaceParmDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterSurfaceParmDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitSurfaceParmDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfaceParmDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfaceParmDirectiveContext surfaceParmDirective() {
		SurfaceParmDirectiveContext _localctx = new SurfaceParmDirectiveContext(Context, State);
		EnterRule(_localctx, 40, RULE_surfaceParmDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(SURFACEPARM);
			State = 680;
			Match(WS);
			State = 681;
			_localctx.a1 = surfaceParmType();
			_localctx.value =  new SurfaceParm(_localctx.a1.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapDirectiveContext : ParserRuleContext {
		public Q3MapDirective value;
		public Q3mapAlphaGenDirectiveContext a1;
		public Q3mapAlphaModDirectiveContext a2;
		public Q3mapBackShaderDirectiveContext a3;
		public Q3mapBackSplashDirectiveContext a4;
		public Q3mapBaseShaderDirectiveContext a5;
		public Q3mapBounceDirectiveContext a6;
		public Q3mapBounceScaleDirectiveContext a7;
		public Q3mapClipModelDirectiveContext a8;
		public Q3mapCloneShaderDirectiveContext a9;
		public Q3mapColorGenDirectiveContext a10;
		public Q3mapColorModDirectiveContext a11;
		public Q3mapFancyWaterDirectiveContext a12;
		public Q3mapFogDirDirectiveContext a13;
		public Q3mapForceMetaDirectiveContext a14;
		public Q3mapForceSunLightDirectiveContext a15;
		public Q3mapFurDirectiveContext a16;
		public Q3mapGlobalTextureDirectiveContext a17;
		public Q3mapIndexedDirectiveContext a18;
		public Q3mapInvertDirectiveContext a19;
		public Q3mapLightImageDirectiveContext a20;
		public Q3mapLightmapAxisDirectiveContext a21;
		public Q3mapLightmapBrightnessDirectiveContext a22;
		public Q3mapLightmapFilterRadiusDirectiveContext a23;
		public Q3mapLightmapGammaDirectiveContext a24;
		public Q3mapLightmapMergableDirectiveContext a25;
		public Q3mapLightmapSampleOffsetDirectiveContext a26;
		public Q3mapLightmapSampleSizeDirectiveContext a27;
		public Q3mapLightmapSizeDirectiveContext a28;
		public Q3mapLightRGBDirectiveContext a29;
		public Q3mapLightStyleDirectiveContext a30;
		public Q3mapLightSubdivideDirectiveContext a31;
		public Q3mapNoClipDirectiveContext a32;
		public Q3mapNoFastDirectiveContext a33;
		public Q3mapNoFogDirectiveContext a34;
		public Q3mapNoLightmapDirectiveContext a35;
		public Q3mapNonPlanarDirectiveContext a36;
		public Q3mapNormalImageDirectiveContext a37;
		public Q3mapNoTJuncDirectiveContext a38;
		public Q3mapNoVertexLightDirectiveContext a39;
		public Q3mapNoVertexShadowsDirectiveContext a40;
		public Q3mapOffsetDirectiveContext a41;
		public Q3mapPatchShadowsDirectiveContext a42;
		public Q3mapRemapShaderDirectiveContext a43;
		public Q3mapRGBGenDirectiveContext a44;
		public Q3mapRGBModDirectiveContext a45;
		public Q3mapShadeAngleDirectiveContext a46;
		public Q3mapSkyLightDirectiveContext a47;
		public Q3mapSplotchFixDirectiveContext a48;
		public Q3mapStyleMarkerDirectiveContext a49;
		public Q3mapStyleMarker2DirectiveContext a50;
		public Q3mapSunDirectiveContext a51;
		public Q3mapSunExtDirectiveContext a52;
		public Q3mapSurfaceLightDirectiveContext a53;
		public Q3mapSurfaceModelDirectiveContext a54;
		public Q3mapTcGenDirectiveContext a55;
		public Q3mapTcModDirectiveContext a56;
		public Q3mapTerrainDirectiveContext a57;
		public Q3mapTessSizeDirectiveContext a58;
		public Q3mapTextureSizeDirectiveContext a59;
		public Q3mapTraceLightDirectiveContext a60;
		public Q3mapVertexScaleDirectiveContext a61;
		public Q3mapVertexShadowsDirectiveContext a62;
		public Q3mapVLightDirectiveContext a63;
		public Q3mapNoFancyWaterDirectiveContext a64;
		public Q3mapCheapWaterDirectiveContext a65;
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapAlphaGenDirectiveContext q3mapAlphaGenDirective() {
			return GetRuleContext<Q3mapAlphaGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapAlphaModDirectiveContext q3mapAlphaModDirective() {
			return GetRuleContext<Q3mapAlphaModDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapBackShaderDirectiveContext q3mapBackShaderDirective() {
			return GetRuleContext<Q3mapBackShaderDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapBackSplashDirectiveContext q3mapBackSplashDirective() {
			return GetRuleContext<Q3mapBackSplashDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapBaseShaderDirectiveContext q3mapBaseShaderDirective() {
			return GetRuleContext<Q3mapBaseShaderDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapBounceDirectiveContext q3mapBounceDirective() {
			return GetRuleContext<Q3mapBounceDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapBounceScaleDirectiveContext q3mapBounceScaleDirective() {
			return GetRuleContext<Q3mapBounceScaleDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapClipModelDirectiveContext q3mapClipModelDirective() {
			return GetRuleContext<Q3mapClipModelDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapCloneShaderDirectiveContext q3mapCloneShaderDirective() {
			return GetRuleContext<Q3mapCloneShaderDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapColorGenDirectiveContext q3mapColorGenDirective() {
			return GetRuleContext<Q3mapColorGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapColorModDirectiveContext q3mapColorModDirective() {
			return GetRuleContext<Q3mapColorModDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapFancyWaterDirectiveContext q3mapFancyWaterDirective() {
			return GetRuleContext<Q3mapFancyWaterDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapFogDirDirectiveContext q3mapFogDirDirective() {
			return GetRuleContext<Q3mapFogDirDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapForceMetaDirectiveContext q3mapForceMetaDirective() {
			return GetRuleContext<Q3mapForceMetaDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapForceSunLightDirectiveContext q3mapForceSunLightDirective() {
			return GetRuleContext<Q3mapForceSunLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapFurDirectiveContext q3mapFurDirective() {
			return GetRuleContext<Q3mapFurDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapGlobalTextureDirectiveContext q3mapGlobalTextureDirective() {
			return GetRuleContext<Q3mapGlobalTextureDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapIndexedDirectiveContext q3mapIndexedDirective() {
			return GetRuleContext<Q3mapIndexedDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapInvertDirectiveContext q3mapInvertDirective() {
			return GetRuleContext<Q3mapInvertDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightImageDirectiveContext q3mapLightImageDirective() {
			return GetRuleContext<Q3mapLightImageDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapAxisDirectiveContext q3mapLightmapAxisDirective() {
			return GetRuleContext<Q3mapLightmapAxisDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapBrightnessDirectiveContext q3mapLightmapBrightnessDirective() {
			return GetRuleContext<Q3mapLightmapBrightnessDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapFilterRadiusDirectiveContext q3mapLightmapFilterRadiusDirective() {
			return GetRuleContext<Q3mapLightmapFilterRadiusDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapGammaDirectiveContext q3mapLightmapGammaDirective() {
			return GetRuleContext<Q3mapLightmapGammaDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapMergableDirectiveContext q3mapLightmapMergableDirective() {
			return GetRuleContext<Q3mapLightmapMergableDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapSampleOffsetDirectiveContext q3mapLightmapSampleOffsetDirective() {
			return GetRuleContext<Q3mapLightmapSampleOffsetDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapSampleSizeDirectiveContext q3mapLightmapSampleSizeDirective() {
			return GetRuleContext<Q3mapLightmapSampleSizeDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightmapSizeDirectiveContext q3mapLightmapSizeDirective() {
			return GetRuleContext<Q3mapLightmapSizeDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightRGBDirectiveContext q3mapLightRGBDirective() {
			return GetRuleContext<Q3mapLightRGBDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightStyleDirectiveContext q3mapLightStyleDirective() {
			return GetRuleContext<Q3mapLightStyleDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapLightSubdivideDirectiveContext q3mapLightSubdivideDirective() {
			return GetRuleContext<Q3mapLightSubdivideDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoClipDirectiveContext q3mapNoClipDirective() {
			return GetRuleContext<Q3mapNoClipDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoFastDirectiveContext q3mapNoFastDirective() {
			return GetRuleContext<Q3mapNoFastDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoFogDirectiveContext q3mapNoFogDirective() {
			return GetRuleContext<Q3mapNoFogDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoLightmapDirectiveContext q3mapNoLightmapDirective() {
			return GetRuleContext<Q3mapNoLightmapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNonPlanarDirectiveContext q3mapNonPlanarDirective() {
			return GetRuleContext<Q3mapNonPlanarDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNormalImageDirectiveContext q3mapNormalImageDirective() {
			return GetRuleContext<Q3mapNormalImageDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoTJuncDirectiveContext q3mapNoTJuncDirective() {
			return GetRuleContext<Q3mapNoTJuncDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoVertexLightDirectiveContext q3mapNoVertexLightDirective() {
			return GetRuleContext<Q3mapNoVertexLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoVertexShadowsDirectiveContext q3mapNoVertexShadowsDirective() {
			return GetRuleContext<Q3mapNoVertexShadowsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapOffsetDirectiveContext q3mapOffsetDirective() {
			return GetRuleContext<Q3mapOffsetDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapPatchShadowsDirectiveContext q3mapPatchShadowsDirective() {
			return GetRuleContext<Q3mapPatchShadowsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapRemapShaderDirectiveContext q3mapRemapShaderDirective() {
			return GetRuleContext<Q3mapRemapShaderDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapRGBGenDirectiveContext q3mapRGBGenDirective() {
			return GetRuleContext<Q3mapRGBGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapRGBModDirectiveContext q3mapRGBModDirective() {
			return GetRuleContext<Q3mapRGBModDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapShadeAngleDirectiveContext q3mapShadeAngleDirective() {
			return GetRuleContext<Q3mapShadeAngleDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSkyLightDirectiveContext q3mapSkyLightDirective() {
			return GetRuleContext<Q3mapSkyLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSplotchFixDirectiveContext q3mapSplotchFixDirective() {
			return GetRuleContext<Q3mapSplotchFixDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapStyleMarkerDirectiveContext q3mapStyleMarkerDirective() {
			return GetRuleContext<Q3mapStyleMarkerDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapStyleMarker2DirectiveContext q3mapStyleMarker2Directive() {
			return GetRuleContext<Q3mapStyleMarker2DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSunDirectiveContext q3mapSunDirective() {
			return GetRuleContext<Q3mapSunDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSunExtDirectiveContext q3mapSunExtDirective() {
			return GetRuleContext<Q3mapSunExtDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSurfaceLightDirectiveContext q3mapSurfaceLightDirective() {
			return GetRuleContext<Q3mapSurfaceLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapSurfaceModelDirectiveContext q3mapSurfaceModelDirective() {
			return GetRuleContext<Q3mapSurfaceModelDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTcGenDirectiveContext q3mapTcGenDirective() {
			return GetRuleContext<Q3mapTcGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTcModDirectiveContext q3mapTcModDirective() {
			return GetRuleContext<Q3mapTcModDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTerrainDirectiveContext q3mapTerrainDirective() {
			return GetRuleContext<Q3mapTerrainDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTessSizeDirectiveContext q3mapTessSizeDirective() {
			return GetRuleContext<Q3mapTessSizeDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTextureSizeDirectiveContext q3mapTextureSizeDirective() {
			return GetRuleContext<Q3mapTextureSizeDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapTraceLightDirectiveContext q3mapTraceLightDirective() {
			return GetRuleContext<Q3mapTraceLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapVertexScaleDirectiveContext q3mapVertexScaleDirective() {
			return GetRuleContext<Q3mapVertexScaleDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapVertexShadowsDirectiveContext q3mapVertexShadowsDirective() {
			return GetRuleContext<Q3mapVertexShadowsDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapVLightDirectiveContext q3mapVLightDirective() {
			return GetRuleContext<Q3mapVLightDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapNoFancyWaterDirectiveContext q3mapNoFancyWaterDirective() {
			return GetRuleContext<Q3mapNoFancyWaterDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Q3mapCheapWaterDirectiveContext q3mapCheapWaterDirective() {
			return GetRuleContext<Q3mapCheapWaterDirectiveContext>(0);
		}
		public Q3mapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapDirectiveContext q3mapDirective() {
		Q3mapDirectiveContext _localctx = new Q3mapDirectiveContext(Context, State);
		EnterRule(_localctx, 42, RULE_q3mapDirective);
		try {
			State = 879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Q3MAP_ALPHAGEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				_localctx.a1 = q3mapAlphaGenDirective();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case Q3MAP_ALPHAMOD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 687;
				_localctx.a2 = q3mapAlphaModDirective();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			case Q3MAP_BACKSHADER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 690;
				_localctx.a3 = q3mapBackShaderDirective();
				_localctx.value =  _localctx.a3.value;
				}
				break;
			case Q3MAP_BACKSPLASH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 693;
				_localctx.a4 = q3mapBackSplashDirective();
				_localctx.value =  _localctx.a4.value;
				}
				break;
			case Q3MAP_BASESHADER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 696;
				_localctx.a5 = q3mapBaseShaderDirective();
				_localctx.value =  _localctx.a5.value;
				}
				break;
			case Q3MAP_BOUNCE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 699;
				_localctx.a6 = q3mapBounceDirective();
				_localctx.value =  _localctx.a6.value;
				}
				break;
			case Q3MAP_BOUNCESCALE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 702;
				_localctx.a7 = q3mapBounceScaleDirective();
				_localctx.value =  _localctx.a7.value;
				}
				break;
			case Q3MAP_CLIPMODEL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 705;
				_localctx.a8 = q3mapClipModelDirective();
				_localctx.value =  _localctx.a8.value;
				}
				break;
			case Q3MAP_CLONESHADER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 708;
				_localctx.a9 = q3mapCloneShaderDirective();
				_localctx.value =  _localctx.a9.value;
				}
				break;
			case Q3MAP_COLORGEN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 711;
				_localctx.a10 = q3mapColorGenDirective();
				_localctx.value =  _localctx.a10.value;
				}
				break;
			case Q3MAP_COLORMOD:
				EnterOuterAlt(_localctx, 11);
				{
				State = 714;
				_localctx.a11 = q3mapColorModDirective();
				_localctx.value =  _localctx.a11.value;
				}
				break;
			case Q3MAP_FANCYWATER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 717;
				_localctx.a12 = q3mapFancyWaterDirective();
				_localctx.value =  _localctx.a12.value;
				}
				break;
			case Q3MAP_FOGDIR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 720;
				_localctx.a13 = q3mapFogDirDirective();
				_localctx.value =  _localctx.a13.value;
				}
				break;
			case Q3MAP_FORCEMETA:
				EnterOuterAlt(_localctx, 14);
				{
				State = 723;
				_localctx.a14 = q3mapForceMetaDirective();
				_localctx.value =  _localctx.a14.value;
				}
				break;
			case Q3MAP_FORCESUNLIGHT:
				EnterOuterAlt(_localctx, 15);
				{
				State = 726;
				_localctx.a15 = q3mapForceSunLightDirective();
				_localctx.value =  _localctx.a15.value;
				}
				break;
			case Q3MAP_FUR:
				EnterOuterAlt(_localctx, 16);
				{
				State = 729;
				_localctx.a16 = q3mapFurDirective();
				_localctx.value =  _localctx.a16.value;
				}
				break;
			case Q3MAP_GLOBALTEXTURE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 732;
				_localctx.a17 = q3mapGlobalTextureDirective();
				_localctx.value =  _localctx.a17.value;
				}
				break;
			case Q3MAP_INDEXED:
				EnterOuterAlt(_localctx, 18);
				{
				State = 735;
				_localctx.a18 = q3mapIndexedDirective();
				_localctx.value =  _localctx.a18.value;
				}
				break;
			case Q3MAP_INVERT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 738;
				_localctx.a19 = q3mapInvertDirective();
				_localctx.value =  _localctx.a19.value;
				}
				break;
			case Q3MAP_LIGHTIMAGE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 741;
				_localctx.a20 = q3mapLightImageDirective();
				_localctx.value =  _localctx.a20.value;
				}
				break;
			case Q3MAP_LIGHTMAPAXIS:
				EnterOuterAlt(_localctx, 21);
				{
				State = 744;
				_localctx.a21 = q3mapLightmapAxisDirective();
				_localctx.value =  _localctx.a21.value;
				}
				break;
			case Q3MAP_LIGHTMAPBRIGHTNESS:
				EnterOuterAlt(_localctx, 22);
				{
				State = 747;
				_localctx.a22 = q3mapLightmapBrightnessDirective();
				_localctx.value =  _localctx.a22.value;
				}
				break;
			case Q3MAP_LIGHTMAPFILTERRADIUS:
				EnterOuterAlt(_localctx, 23);
				{
				State = 750;
				_localctx.a23 = q3mapLightmapFilterRadiusDirective();
				_localctx.value =  _localctx.a23.value;
				}
				break;
			case Q3MAP_LIGHTMAPGAMMA:
				EnterOuterAlt(_localctx, 24);
				{
				State = 753;
				_localctx.a24 = q3mapLightmapGammaDirective();
				_localctx.value =  _localctx.a24.value;
				}
				break;
			case Q3MAP_LIGHTMAPMERGABLE:
				EnterOuterAlt(_localctx, 25);
				{
				State = 756;
				_localctx.a25 = q3mapLightmapMergableDirective();
				_localctx.value =  _localctx.a25.value;
				}
				break;
			case Q3MAP_LIGHTMAPSAMPLEOFFSET:
				EnterOuterAlt(_localctx, 26);
				{
				State = 759;
				_localctx.a26 = q3mapLightmapSampleOffsetDirective();
				_localctx.value =  _localctx.a26.value;
				}
				break;
			case Q3MAP_LIGHTMAPSAMPLESIZE:
				EnterOuterAlt(_localctx, 27);
				{
				State = 762;
				_localctx.a27 = q3mapLightmapSampleSizeDirective();
				_localctx.value =  _localctx.a27.value;
				}
				break;
			case Q3MAP_LIGHTMAPSIZE:
				EnterOuterAlt(_localctx, 28);
				{
				State = 765;
				_localctx.a28 = q3mapLightmapSizeDirective();
				_localctx.value =  _localctx.a28.value;
				}
				break;
			case Q3MAP_LIGHTRGB:
				EnterOuterAlt(_localctx, 29);
				{
				State = 768;
				_localctx.a29 = q3mapLightRGBDirective();
				_localctx.value =  _localctx.a29.value;
				}
				break;
			case Q3MAP_LIGHTSTYLE:
				EnterOuterAlt(_localctx, 30);
				{
				State = 771;
				_localctx.a30 = q3mapLightStyleDirective();
				_localctx.value =  _localctx.a30.value;
				}
				break;
			case Q3MAP_LIGHTSUBDIVIDE:
				EnterOuterAlt(_localctx, 31);
				{
				State = 774;
				_localctx.a31 = q3mapLightSubdivideDirective();
				_localctx.value =  _localctx.a31.value;
				}
				break;
			case Q3MAP_NOCLIP:
				EnterOuterAlt(_localctx, 32);
				{
				State = 777;
				_localctx.a32 = q3mapNoClipDirective();
				_localctx.value =  _localctx.a32.value;
				}
				break;
			case Q3MAP_NOFAST:
				EnterOuterAlt(_localctx, 33);
				{
				State = 780;
				_localctx.a33 = q3mapNoFastDirective();
				_localctx.value =  _localctx.a33.value;
				}
				break;
			case Q3MAP_NOFOG:
				EnterOuterAlt(_localctx, 34);
				{
				State = 783;
				_localctx.a34 = q3mapNoFogDirective();
				_localctx.value =  _localctx.a34.value;
				}
				break;
			case Q3MAP_NOLIGHTMAP:
				EnterOuterAlt(_localctx, 35);
				{
				State = 786;
				_localctx.a35 = q3mapNoLightmapDirective();
				_localctx.value =  _localctx.a35.value;
				}
				break;
			case Q3MAP_NONPLANAR:
				EnterOuterAlt(_localctx, 36);
				{
				State = 789;
				_localctx.a36 = q3mapNonPlanarDirective();
				_localctx.value =  _localctx.a36.value;
				}
				break;
			case Q3MAP_NORMALIMAGE:
				EnterOuterAlt(_localctx, 37);
				{
				State = 792;
				_localctx.a37 = q3mapNormalImageDirective();
				_localctx.value =  _localctx.a37.value;
				}
				break;
			case Q3MAP_NOTJUNC:
				EnterOuterAlt(_localctx, 38);
				{
				State = 795;
				_localctx.a38 = q3mapNoTJuncDirective();
				_localctx.value =  _localctx.a38.value;
				}
				break;
			case Q3MAP_NOVERTEXLIGHT:
				EnterOuterAlt(_localctx, 39);
				{
				State = 798;
				_localctx.a39 = q3mapNoVertexLightDirective();
				_localctx.value =  _localctx.a39.value;
				}
				break;
			case Q3MAP_NOVERTEXSHADOWS:
				EnterOuterAlt(_localctx, 40);
				{
				State = 801;
				_localctx.a40 = q3mapNoVertexShadowsDirective();
				_localctx.value =  _localctx.a40.value;
				}
				break;
			case Q3MAP_OFFSET:
				EnterOuterAlt(_localctx, 41);
				{
				State = 804;
				_localctx.a41 = q3mapOffsetDirective();
				_localctx.value =  _localctx.a41.value;
				}
				break;
			case Q3MAP_PATCHSHADOWS:
				EnterOuterAlt(_localctx, 42);
				{
				State = 807;
				_localctx.a42 = q3mapPatchShadowsDirective();
				_localctx.value =  _localctx.a42.value;
				}
				break;
			case Q3MAP_REMAPSHADER:
				EnterOuterAlt(_localctx, 43);
				{
				State = 810;
				_localctx.a43 = q3mapRemapShaderDirective();
				_localctx.value =  _localctx.a43.value;
				}
				break;
			case Q3MAP_RGBGEN:
				EnterOuterAlt(_localctx, 44);
				{
				State = 813;
				_localctx.a44 = q3mapRGBGenDirective();
				_localctx.value =  _localctx.a44.value;
				}
				break;
			case Q3MAP_RGBMOD:
				EnterOuterAlt(_localctx, 45);
				{
				State = 816;
				_localctx.a45 = q3mapRGBModDirective();
				_localctx.value =  _localctx.a45.value;
				}
				break;
			case Q3MAP_SHADEANGLE:
				EnterOuterAlt(_localctx, 46);
				{
				State = 819;
				_localctx.a46 = q3mapShadeAngleDirective();
				_localctx.value =  _localctx.a46.value;
				}
				break;
			case Q3MAP_SKYLIGHT:
				EnterOuterAlt(_localctx, 47);
				{
				State = 822;
				_localctx.a47 = q3mapSkyLightDirective();
				_localctx.value =  _localctx.a47.value;
				}
				break;
			case Q3MAP_SPLOTCHFIX:
				EnterOuterAlt(_localctx, 48);
				{
				State = 825;
				_localctx.a48 = q3mapSplotchFixDirective();
				_localctx.value =  _localctx.a48.value;
				}
				break;
			case Q3MAP_STYLEMARKER:
				EnterOuterAlt(_localctx, 49);
				{
				State = 828;
				_localctx.a49 = q3mapStyleMarkerDirective();
				_localctx.value =  _localctx.a49.value;
				}
				break;
			case Q3MAP_STYLEMARKER2:
				EnterOuterAlt(_localctx, 50);
				{
				State = 831;
				_localctx.a50 = q3mapStyleMarker2Directive();
				_localctx.value =  _localctx.a50.value;
				}
				break;
			case Q3MAP_SUN:
				EnterOuterAlt(_localctx, 51);
				{
				State = 834;
				_localctx.a51 = q3mapSunDirective();
				_localctx.value =  _localctx.a51.value;
				}
				break;
			case Q3MAP_SUNEXT:
				EnterOuterAlt(_localctx, 52);
				{
				State = 837;
				_localctx.a52 = q3mapSunExtDirective();
				_localctx.value =  _localctx.a52.value;
				}
				break;
			case Q3MAP_SURFACELIGHT:
				EnterOuterAlt(_localctx, 53);
				{
				State = 840;
				_localctx.a53 = q3mapSurfaceLightDirective();
				_localctx.value =  _localctx.a53.value;
				}
				break;
			case Q3MAP_SURFACEMODEL:
				EnterOuterAlt(_localctx, 54);
				{
				State = 843;
				_localctx.a54 = q3mapSurfaceModelDirective();
				_localctx.value =  _localctx.a54.value;
				}
				break;
			case Q3MAP_TCGEN:
				EnterOuterAlt(_localctx, 55);
				{
				State = 846;
				_localctx.a55 = q3mapTcGenDirective();
				_localctx.value =  _localctx.a55.value;
				}
				break;
			case Q3MAP_TCMOD:
				EnterOuterAlt(_localctx, 56);
				{
				State = 849;
				_localctx.a56 = q3mapTcModDirective();
				_localctx.value =  _localctx.a56.value;
				}
				break;
			case Q3MAP_TERRAIN:
				EnterOuterAlt(_localctx, 57);
				{
				State = 852;
				_localctx.a57 = q3mapTerrainDirective();
				_localctx.value =  _localctx.a57.value;
				}
				break;
			case Q3MAP_TESSSIZE:
				EnterOuterAlt(_localctx, 58);
				{
				State = 855;
				_localctx.a58 = q3mapTessSizeDirective();
				_localctx.value =  _localctx.a58.value;
				}
				break;
			case Q3MAP_TEXTURESIZE:
				EnterOuterAlt(_localctx, 59);
				{
				State = 858;
				_localctx.a59 = q3mapTextureSizeDirective();
				_localctx.value =  _localctx.a59.value;
				}
				break;
			case Q3MAP_TRACELIGHT:
				EnterOuterAlt(_localctx, 60);
				{
				State = 861;
				_localctx.a60 = q3mapTraceLightDirective();
				_localctx.value =  _localctx.a60.value;
				}
				break;
			case Q3MAP_VERTEXSCALE:
				EnterOuterAlt(_localctx, 61);
				{
				State = 864;
				_localctx.a61 = q3mapVertexScaleDirective();
				_localctx.value =  _localctx.a61.value;
				}
				break;
			case Q3MAP_VERTEXSHADOWS:
				EnterOuterAlt(_localctx, 62);
				{
				State = 867;
				_localctx.a62 = q3mapVertexShadowsDirective();
				_localctx.value =  _localctx.a62.value;
				}
				break;
			case Q3MAP_VLIGHT:
				EnterOuterAlt(_localctx, 63);
				{
				State = 870;
				_localctx.a63 = q3mapVLightDirective();
				_localctx.value =  _localctx.a63.value;
				}
				break;
			case Q3MAP_NOFANCYWATER:
				EnterOuterAlt(_localctx, 64);
				{
				State = 873;
				_localctx.a64 = q3mapNoFancyWaterDirective();
				_localctx.value =  _localctx.a64.value;
				}
				break;
			case Q3MAP_CHEAPWATER:
				EnterOuterAlt(_localctx, 65);
				{
				State = 876;
				_localctx.a65 = q3mapCheapWaterDirective();
				_localctx.value =  _localctx.a65.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapAlphaGenDirectiveContext : ParserRuleContext {
		public Q3MapAlphaGen value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_ALPHAGEN() { return GetToken(ShaderParser.Q3MAP_ALPHAGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ShaderParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapAlphaGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapAlphaGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapAlphaGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapAlphaGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapAlphaGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapAlphaGenDirectiveContext q3mapAlphaGenDirective() {
		Q3mapAlphaGenDirectiveContext _localctx = new Q3mapAlphaGenDirectiveContext(Context, State);
		EnterRule(_localctx, 44, RULE_q3mapAlphaGenDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(Q3MAP_ALPHAGEN);
			State = 882;
			Match(WS);
			State = 883;
			Match(CONST);
			State = 884;
			Match(WS);
			State = 885;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapAlphaGenConst(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapAlphaModDirectiveContext : ParserRuleContext {
		public Q3MapAlphaMod value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		public NumberParamContext c;
		public NumberParamContext d;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_ALPHAMOD() { return GetToken(ShaderParser.Q3MAP_ALPHAMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTPRODUCT() { return GetToken(ShaderParser.DOTPRODUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTPRODUCT2() { return GetToken(ShaderParser.DOTPRODUCT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(ShaderParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLUME() { return GetToken(ShaderParser.VOLUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ShaderParser.SET, 0); }
		public Q3mapAlphaModDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapAlphaModDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapAlphaModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapAlphaModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapAlphaModDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapAlphaModDirectiveContext q3mapAlphaModDirective() {
		Q3mapAlphaModDirectiveContext _localctx = new Q3mapAlphaModDirectiveContext(Context, State);
		EnterRule(_localctx, 46, RULE_q3mapAlphaModDirective);
		int _la;
		try {
			State = 948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 888;
				Match(Q3MAP_ALPHAMOD);
				State = 889;
				Match(WS);
				State = 890;
				Match(DOTPRODUCT);
				State = 892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 891;
					Match(WS);
					}
				}

				State = 894;
				Match(LROUNDBRACKET);
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 895;
					Match(WS);
					}
				}

				State = 898;
				_localctx.a1 = numberParam();
				State = 899;
				Match(WS);
				State = 900;
				_localctx.a2 = numberParam();
				State = 901;
				Match(WS);
				State = 902;
				_localctx.a3 = numberParam();
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 903;
					Match(WS);
					}
				}

				State = 906;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapAlphaModDotProduct(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				Match(Q3MAP_ALPHAMOD);
				State = 910;
				Match(WS);
				State = 911;
				Match(DOTPRODUCT2);
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 912;
					Match(WS);
					}
				}

				State = 915;
				Match(LROUNDBRACKET);
				State = 917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 916;
					Match(WS);
					}
				}

				State = 919;
				_localctx.b1 = numberParam();
				State = 920;
				Match(WS);
				State = 921;
				_localctx.b2 = numberParam();
				State = 922;
				Match(WS);
				State = 923;
				_localctx.b3 = numberParam();
				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 924;
					Match(WS);
					}
				}

				State = 927;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapAlphaModDotProduct2(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 930;
				Match(Q3MAP_ALPHAMOD);
				State = 931;
				Match(WS);
				State = 932;
				Match(SCALE);
				State = 933;
				Match(WS);
				State = 934;
				_localctx.c = numberParam();
				_localctx.value =  new Q3MapAlphaModScale(_localctx.c.value);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 937;
				Match(Q3MAP_ALPHAMOD);
				State = 938;
				Match(WS);
				State = 939;
				Match(VOLUME);
				_localctx.value =  new Q3MapAlphaModVolume();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 941;
				Match(Q3MAP_ALPHAMOD);
				State = 942;
				Match(WS);
				State = 943;
				Match(SET);
				State = 944;
				Match(WS);
				State = 945;
				_localctx.d = numberParam();
				_localctx.value =  new Q3MapAlphaModSet(_localctx.d.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapBackShaderDirectiveContext : ParserRuleContext {
		public Q3MapBackShader value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_BACKSHADER() { return GetToken(ShaderParser.Q3MAP_BACKSHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapBackShaderDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapBackShaderDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapBackShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapBackShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapBackShaderDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapBackShaderDirectiveContext q3mapBackShaderDirective() {
		Q3mapBackShaderDirectiveContext _localctx = new Q3mapBackShaderDirectiveContext(Context, State);
		EnterRule(_localctx, 48, RULE_q3mapBackShaderDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			Match(Q3MAP_BACKSHADER);
			State = 951;
			Match(WS);
			State = 952;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapBackShader(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapBackSplashDirectiveContext : ParserRuleContext {
		public Q3MapBackSplash value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_BACKSPLASH() { return GetToken(ShaderParser.Q3MAP_BACKSPLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapBackSplashDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapBackSplashDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapBackSplashDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapBackSplashDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapBackSplashDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapBackSplashDirectiveContext q3mapBackSplashDirective() {
		Q3mapBackSplashDirectiveContext _localctx = new Q3mapBackSplashDirectiveContext(Context, State);
		EnterRule(_localctx, 50, RULE_q3mapBackSplashDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(Q3MAP_BACKSPLASH);
			State = 956;
			Match(WS);
			State = 957;
			_localctx.a1 = numberParam();
			State = 958;
			Match(WS);
			State = 959;
			_localctx.a2 = numberParam();
			_localctx.value =  new Q3MapBackSplash(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapBaseShaderDirectiveContext : ParserRuleContext {
		public Q3MapBaseShader value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_BASESHADER() { return GetToken(ShaderParser.Q3MAP_BASESHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapBaseShaderDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapBaseShaderDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapBaseShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapBaseShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapBaseShaderDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapBaseShaderDirectiveContext q3mapBaseShaderDirective() {
		Q3mapBaseShaderDirectiveContext _localctx = new Q3mapBaseShaderDirectiveContext(Context, State);
		EnterRule(_localctx, 52, RULE_q3mapBaseShaderDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			Match(Q3MAP_BASESHADER);
			State = 963;
			Match(WS);
			State = 964;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapBaseShader(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapBounceDirectiveContext : ParserRuleContext {
		public Q3MapBounce value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_BOUNCE() { return GetToken(ShaderParser.Q3MAP_BOUNCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapBounceDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapBounceDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapBounceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapBounceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapBounceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapBounceDirectiveContext q3mapBounceDirective() {
		Q3mapBounceDirectiveContext _localctx = new Q3mapBounceDirectiveContext(Context, State);
		EnterRule(_localctx, 54, RULE_q3mapBounceDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			Match(Q3MAP_BOUNCE);
			State = 968;
			Match(WS);
			State = 969;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapBounce(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapBounceScaleDirectiveContext : ParserRuleContext {
		public Q3MapBounceScale value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_BOUNCESCALE() { return GetToken(ShaderParser.Q3MAP_BOUNCESCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapBounceScaleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapBounceScaleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapBounceScaleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapBounceScaleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapBounceScaleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapBounceScaleDirectiveContext q3mapBounceScaleDirective() {
		Q3mapBounceScaleDirectiveContext _localctx = new Q3mapBounceScaleDirectiveContext(Context, State);
		EnterRule(_localctx, 56, RULE_q3mapBounceScaleDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(Q3MAP_BOUNCESCALE);
			State = 973;
			Match(WS);
			State = 974;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapBounceScale(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapClipModelDirectiveContext : ParserRuleContext {
		public Q3MapClipModel value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_CLIPMODEL() { return GetToken(ShaderParser.Q3MAP_CLIPMODEL, 0); }
		public Q3mapClipModelDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapClipModelDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapClipModelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapClipModelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapClipModelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapClipModelDirectiveContext q3mapClipModelDirective() {
		Q3mapClipModelDirectiveContext _localctx = new Q3mapClipModelDirectiveContext(Context, State);
		EnterRule(_localctx, 58, RULE_q3mapClipModelDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			Match(Q3MAP_CLIPMODEL);
			_localctx.value =  new Q3MapClipModel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapCloneShaderDirectiveContext : ParserRuleContext {
		public Q3MapCloneShader value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_CLONESHADER() { return GetToken(ShaderParser.Q3MAP_CLONESHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapCloneShaderDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapCloneShaderDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapCloneShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapCloneShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapCloneShaderDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapCloneShaderDirectiveContext q3mapCloneShaderDirective() {
		Q3mapCloneShaderDirectiveContext _localctx = new Q3mapCloneShaderDirectiveContext(Context, State);
		EnterRule(_localctx, 60, RULE_q3mapCloneShaderDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 980;
			Match(Q3MAP_CLONESHADER);
			State = 981;
			Match(WS);
			State = 982;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapCloneShader(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapColorGenDirectiveContext : ParserRuleContext {
		public Q3MapColorGen value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_COLORGEN() { return GetToken(ShaderParser.Q3MAP_COLORGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ShaderParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapColorGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapColorGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapColorGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapColorGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapColorGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapColorGenDirectiveContext q3mapColorGenDirective() {
		Q3mapColorGenDirectiveContext _localctx = new Q3mapColorGenDirectiveContext(Context, State);
		EnterRule(_localctx, 62, RULE_q3mapColorGenDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			Match(Q3MAP_COLORGEN);
			State = 986;
			Match(WS);
			State = 987;
			Match(CONST);
			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 988;
				Match(WS);
				}
			}

			State = 991;
			Match(LROUNDBRACKET);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 992;
				Match(WS);
				}
			}

			State = 995;
			_localctx.a1 = numberParam();
			State = 996;
			Match(WS);
			State = 997;
			_localctx.a2 = numberParam();
			State = 998;
			Match(WS);
			State = 999;
			_localctx.a3 = numberParam();
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 1000;
				Match(WS);
				}
			}

			State = 1003;
			Match(RROUNDBRACKET);
			_localctx.value =  new Q3MapColorGenConst(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapColorModDirectiveContext : ParserRuleContext {
		public Q3MapColorMod value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_COLORMOD() { return GetToken(ShaderParser.Q3MAP_COLORMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(ShaderParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ShaderParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLUME() { return GetToken(ShaderParser.VOLUME, 0); }
		public Q3mapColorModDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapColorModDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapColorModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapColorModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapColorModDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapColorModDirectiveContext q3mapColorModDirective() {
		Q3mapColorModDirectiveContext _localctx = new Q3mapColorModDirectiveContext(Context, State);
		EnterRule(_localctx, 64, RULE_q3mapColorModDirective);
		int _la;
		try {
			State = 1052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006;
				Match(Q3MAP_COLORMOD);
				State = 1007;
				Match(WS);
				State = 1008;
				Match(SCALE);
				State = 1010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1009;
					Match(WS);
					}
				}

				State = 1012;
				Match(LROUNDBRACKET);
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1013;
					Match(WS);
					}
				}

				State = 1016;
				_localctx.a1 = numberParam();
				State = 1017;
				Match(WS);
				State = 1018;
				_localctx.a2 = numberParam();
				State = 1019;
				Match(WS);
				State = 1020;
				_localctx.a3 = numberParam();
				State = 1022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1021;
					Match(WS);
					}
				}

				State = 1024;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapColorModScale(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1027;
				Match(Q3MAP_COLORMOD);
				State = 1028;
				Match(WS);
				State = 1029;
				Match(SET);
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1030;
					Match(WS);
					}
				}

				State = 1033;
				Match(LROUNDBRACKET);
				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1034;
					Match(WS);
					}
				}

				State = 1037;
				_localctx.b1 = numberParam();
				State = 1038;
				Match(WS);
				State = 1039;
				_localctx.b2 = numberParam();
				State = 1040;
				Match(WS);
				State = 1041;
				_localctx.b3 = numberParam();
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1042;
					Match(WS);
					}
				}

				State = 1045;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapColorModSet(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1048;
				Match(Q3MAP_COLORMOD);
				State = 1049;
				Match(WS);
				State = 1050;
				Match(VOLUME);
				_localctx.value =  new Q3MapColorModVolume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapFancyWaterDirectiveContext : ParserRuleContext {
		public Q3MapFancyWater value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_FANCYWATER() { return GetToken(ShaderParser.Q3MAP_FANCYWATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapFancyWaterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapFancyWaterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapFancyWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapFancyWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapFancyWaterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapFancyWaterDirectiveContext q3mapFancyWaterDirective() {
		Q3mapFancyWaterDirectiveContext _localctx = new Q3mapFancyWaterDirectiveContext(Context, State);
		EnterRule(_localctx, 66, RULE_q3mapFancyWaterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			Match(Q3MAP_FANCYWATER);
			State = 1055;
			Match(WS);
			State = 1056;
			_localctx.a1 = numberParam();
			State = 1057;
			Match(WS);
			State = 1058;
			_localctx.a2 = numberParam();
			State = 1059;
			Match(WS);
			State = 1060;
			_localctx.a3 = numberParam();
			State = 1061;
			Match(WS);
			State = 1062;
			_localctx.a4 = numberParam();
			_localctx.value =  new Q3MapFancyWater(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapFogDirDirectiveContext : ParserRuleContext {
		public Q3MapFogDir value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_FOGDIR() { return GetToken(ShaderParser.Q3MAP_FOGDIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapFogDirDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapFogDirDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapFogDirDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapFogDirDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapFogDirDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapFogDirDirectiveContext q3mapFogDirDirective() {
		Q3mapFogDirDirectiveContext _localctx = new Q3mapFogDirDirectiveContext(Context, State);
		EnterRule(_localctx, 68, RULE_q3mapFogDirDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			Match(Q3MAP_FOGDIR);
			State = 1066;
			Match(WS);
			State = 1067;
			_localctx.a1 = numberParam();
			State = 1068;
			Match(WS);
			State = 1069;
			_localctx.a2 = numberParam();
			State = 1070;
			Match(WS);
			State = 1071;
			_localctx.a3 = numberParam();
			_localctx.value =  new Q3MapFogDir(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapForceMetaDirectiveContext : ParserRuleContext {
		public Q3MapForceMeta value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_FORCEMETA() { return GetToken(ShaderParser.Q3MAP_FORCEMETA, 0); }
		public Q3mapForceMetaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapForceMetaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapForceMetaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapForceMetaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapForceMetaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapForceMetaDirectiveContext q3mapForceMetaDirective() {
		Q3mapForceMetaDirectiveContext _localctx = new Q3mapForceMetaDirectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_q3mapForceMetaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1074;
			Match(Q3MAP_FORCEMETA);
			_localctx.value =  new Q3MapForceMeta();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapForceSunLightDirectiveContext : ParserRuleContext {
		public Q3MapForceSunLight value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_FORCESUNLIGHT() { return GetToken(ShaderParser.Q3MAP_FORCESUNLIGHT, 0); }
		public Q3mapForceSunLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapForceSunLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapForceSunLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapForceSunLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapForceSunLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapForceSunLightDirectiveContext q3mapForceSunLightDirective() {
		Q3mapForceSunLightDirectiveContext _localctx = new Q3mapForceSunLightDirectiveContext(Context, State);
		EnterRule(_localctx, 72, RULE_q3mapForceSunLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(Q3MAP_FORCESUNLIGHT);
			_localctx.value =  new Q3MapForceSunLight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapFurDirectiveContext : ParserRuleContext {
		public Q3MapFur value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_FUR() { return GetToken(ShaderParser.Q3MAP_FUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapFurDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapFurDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapFurDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapFurDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapFurDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapFurDirectiveContext q3mapFurDirective() {
		Q3mapFurDirectiveContext _localctx = new Q3mapFurDirectiveContext(Context, State);
		EnterRule(_localctx, 74, RULE_q3mapFurDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			Match(Q3MAP_FUR);
			State = 1081;
			Match(WS);
			State = 1082;
			_localctx.a1 = numberParam();
			State = 1083;
			Match(WS);
			State = 1084;
			_localctx.a2 = numberParam();
			State = 1085;
			Match(WS);
			State = 1086;
			_localctx.a3 = numberParam();
			_localctx.value =  new Q3MapFur(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapGlobalTextureDirectiveContext : ParserRuleContext {
		public Q3MapGlobalTexture value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_GLOBALTEXTURE() { return GetToken(ShaderParser.Q3MAP_GLOBALTEXTURE, 0); }
		public Q3mapGlobalTextureDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapGlobalTextureDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapGlobalTextureDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapGlobalTextureDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapGlobalTextureDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapGlobalTextureDirectiveContext q3mapGlobalTextureDirective() {
		Q3mapGlobalTextureDirectiveContext _localctx = new Q3mapGlobalTextureDirectiveContext(Context, State);
		EnterRule(_localctx, 76, RULE_q3mapGlobalTextureDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			Match(Q3MAP_GLOBALTEXTURE);
			_localctx.value =  new Q3MapGlobalTexture();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapIndexedDirectiveContext : ParserRuleContext {
		public Q3MapIndexed value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_INDEXED() { return GetToken(ShaderParser.Q3MAP_INDEXED, 0); }
		public Q3mapIndexedDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapIndexedDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapIndexedDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapIndexedDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapIndexedDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapIndexedDirectiveContext q3mapIndexedDirective() {
		Q3mapIndexedDirectiveContext _localctx = new Q3mapIndexedDirectiveContext(Context, State);
		EnterRule(_localctx, 78, RULE_q3mapIndexedDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			Match(Q3MAP_INDEXED);
			_localctx.value =  new Q3MapIndexed();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapInvertDirectiveContext : ParserRuleContext {
		public Q3MapInvert value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_INVERT() { return GetToken(ShaderParser.Q3MAP_INVERT, 0); }
		public Q3mapInvertDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapInvertDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapInvertDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapInvertDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapInvertDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapInvertDirectiveContext q3mapInvertDirective() {
		Q3mapInvertDirectiveContext _localctx = new Q3mapInvertDirectiveContext(Context, State);
		EnterRule(_localctx, 80, RULE_q3mapInvertDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(Q3MAP_INVERT);
			_localctx.value =  new Q3MapInvert();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightImageDirectiveContext : ParserRuleContext {
		public Q3MapLightImage value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTIMAGE() { return GetToken(ShaderParser.Q3MAP_LIGHTIMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapLightImageDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightImageDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightImageDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightImageDirectiveContext q3mapLightImageDirective() {
		Q3mapLightImageDirectiveContext _localctx = new Q3mapLightImageDirectiveContext(Context, State);
		EnterRule(_localctx, 82, RULE_q3mapLightImageDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(Q3MAP_LIGHTIMAGE);
			State = 1099;
			Match(WS);
			State = 1100;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapLightImage(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapAxisDirectiveContext : ParserRuleContext {
		public Q3MapLightmapAxis value;
		public Q3map_lightmapAxisTypeContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPAXIS() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPAXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Q3map_lightmapAxisTypeContext q3map_lightmapAxisType() {
			return GetRuleContext<Q3map_lightmapAxisTypeContext>(0);
		}
		public Q3mapLightmapAxisDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapAxisDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapAxisDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapAxisDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapAxisDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapAxisDirectiveContext q3mapLightmapAxisDirective() {
		Q3mapLightmapAxisDirectiveContext _localctx = new Q3mapLightmapAxisDirectiveContext(Context, State);
		EnterRule(_localctx, 84, RULE_q3mapLightmapAxisDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103;
			Match(Q3MAP_LIGHTMAPAXIS);
			State = 1104;
			Match(WS);
			State = 1105;
			_localctx.a = q3map_lightmapAxisType();
			_localctx.value =  new Q3MapLightmapAxis(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapBrightnessDirectiveContext : ParserRuleContext {
		public Q3MapLightmapBrightness value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPBRIGHTNESS() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPBRIGHTNESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapLightmapBrightnessDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapBrightnessDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapBrightnessDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapBrightnessDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapBrightnessDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapBrightnessDirectiveContext q3mapLightmapBrightnessDirective() {
		Q3mapLightmapBrightnessDirectiveContext _localctx = new Q3mapLightmapBrightnessDirectiveContext(Context, State);
		EnterRule(_localctx, 86, RULE_q3mapLightmapBrightnessDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(Q3MAP_LIGHTMAPBRIGHTNESS);
			State = 1109;
			Match(WS);
			State = 1110;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapLightmapBrightness(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapFilterRadiusDirectiveContext : ParserRuleContext {
		public Q3MapLightmapFilterRadius value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPFILTERRADIUS() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPFILTERRADIUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapLightmapFilterRadiusDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapFilterRadiusDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapFilterRadiusDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapFilterRadiusDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapFilterRadiusDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapFilterRadiusDirectiveContext q3mapLightmapFilterRadiusDirective() {
		Q3mapLightmapFilterRadiusDirectiveContext _localctx = new Q3mapLightmapFilterRadiusDirectiveContext(Context, State);
		EnterRule(_localctx, 88, RULE_q3mapLightmapFilterRadiusDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			Match(Q3MAP_LIGHTMAPFILTERRADIUS);
			State = 1114;
			Match(WS);
			State = 1115;
			_localctx.a1 = numberParam();
			State = 1116;
			Match(WS);
			State = 1117;
			_localctx.a2 = numberParam();
			_localctx.value =  new Q3MapLightmapFilterRadius(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapGammaDirectiveContext : ParserRuleContext {
		public Q3MapLightmapGamma value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPGAMMA() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPGAMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapLightmapGammaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapGammaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapGammaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapGammaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapGammaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapGammaDirectiveContext q3mapLightmapGammaDirective() {
		Q3mapLightmapGammaDirectiveContext _localctx = new Q3mapLightmapGammaDirectiveContext(Context, State);
		EnterRule(_localctx, 90, RULE_q3mapLightmapGammaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			Match(Q3MAP_LIGHTMAPGAMMA);
			State = 1121;
			Match(WS);
			State = 1122;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapLightmapGamma(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapMergableDirectiveContext : ParserRuleContext {
		public Q3MapLightmapMergable value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPMERGABLE() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPMERGABLE, 0); }
		public Q3mapLightmapMergableDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapMergableDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapMergableDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapMergableDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapMergableDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapMergableDirectiveContext q3mapLightmapMergableDirective() {
		Q3mapLightmapMergableDirectiveContext _localctx = new Q3mapLightmapMergableDirectiveContext(Context, State);
		EnterRule(_localctx, 92, RULE_q3mapLightmapMergableDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(Q3MAP_LIGHTMAPMERGABLE);
			_localctx.value =  new Q3MapLightmapMergable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapSampleOffsetDirectiveContext : ParserRuleContext {
		public Q3MapLightmapSampleOffset value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPSAMPLEOFFSET() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPSAMPLEOFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapLightmapSampleOffsetDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapSampleOffsetDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapSampleOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapSampleOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapSampleOffsetDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapSampleOffsetDirectiveContext q3mapLightmapSampleOffsetDirective() {
		Q3mapLightmapSampleOffsetDirectiveContext _localctx = new Q3mapLightmapSampleOffsetDirectiveContext(Context, State);
		EnterRule(_localctx, 94, RULE_q3mapLightmapSampleOffsetDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			Match(Q3MAP_LIGHTMAPSAMPLEOFFSET);
			State = 1129;
			Match(WS);
			State = 1130;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapLightmapSampleOffset(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapSampleSizeDirectiveContext : ParserRuleContext {
		public Q3MapLightmapSampleSize value;
		public IntParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPSAMPLESIZE() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPSAMPLESIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		public Q3mapLightmapSampleSizeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapSampleSizeDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapSampleSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapSampleSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapSampleSizeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapSampleSizeDirectiveContext q3mapLightmapSampleSizeDirective() {
		Q3mapLightmapSampleSizeDirectiveContext _localctx = new Q3mapLightmapSampleSizeDirectiveContext(Context, State);
		EnterRule(_localctx, 96, RULE_q3mapLightmapSampleSizeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			Match(Q3MAP_LIGHTMAPSAMPLESIZE);
			State = 1134;
			Match(WS);
			State = 1135;
			_localctx.a = intParam();
			_localctx.value =  new Q3MapLightmapSampleSize(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightmapSizeDirectiveContext : ParserRuleContext {
		public Q3MapLightmapSize value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTMAPSIZE() { return GetToken(ShaderParser.Q3MAP_LIGHTMAPSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapLightmapSizeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightmapSizeDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightmapSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightmapSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightmapSizeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightmapSizeDirectiveContext q3mapLightmapSizeDirective() {
		Q3mapLightmapSizeDirectiveContext _localctx = new Q3mapLightmapSizeDirectiveContext(Context, State);
		EnterRule(_localctx, 98, RULE_q3mapLightmapSizeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			Match(Q3MAP_LIGHTMAPSIZE);
			State = 1139;
			Match(WS);
			State = 1140;
			_localctx.a1 = numberParam();
			State = 1141;
			Match(WS);
			State = 1142;
			_localctx.a2 = numberParam();
			_localctx.value =  new Q3MapLightmapSize(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightRGBDirectiveContext : ParserRuleContext {
		public Q3MapLightRGB value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTRGB() { return GetToken(ShaderParser.Q3MAP_LIGHTRGB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapLightRGBDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightRGBDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightRGBDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightRGBDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightRGBDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightRGBDirectiveContext q3mapLightRGBDirective() {
		Q3mapLightRGBDirectiveContext _localctx = new Q3mapLightRGBDirectiveContext(Context, State);
		EnterRule(_localctx, 100, RULE_q3mapLightRGBDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(Q3MAP_LIGHTRGB);
			State = 1146;
			Match(WS);
			State = 1147;
			_localctx.a1 = numberParam();
			State = 1148;
			Match(WS);
			State = 1149;
			_localctx.a2 = numberParam();
			State = 1150;
			Match(WS);
			State = 1151;
			_localctx.a3 = numberParam();
			_localctx.value =  new Q3MapLightRGB(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightStyleDirectiveContext : ParserRuleContext {
		public Q3MapLightStyle value;
		public IntParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTSTYLE() { return GetToken(ShaderParser.Q3MAP_LIGHTSTYLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		public Q3mapLightStyleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightStyleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightStyleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightStyleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightStyleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightStyleDirectiveContext q3mapLightStyleDirective() {
		Q3mapLightStyleDirectiveContext _localctx = new Q3mapLightStyleDirectiveContext(Context, State);
		EnterRule(_localctx, 102, RULE_q3mapLightStyleDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			Match(Q3MAP_LIGHTSTYLE);
			State = 1155;
			Match(WS);
			State = 1156;
			_localctx.a = intParam();
			_localctx.value =  new Q3MapLightStyle(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapLightSubdivideDirectiveContext : ParserRuleContext {
		public Q3MapLightSubdivide value;
		public IntParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_LIGHTSUBDIVIDE() { return GetToken(ShaderParser.Q3MAP_LIGHTSUBDIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam() {
			return GetRuleContext<IntParamContext>(0);
		}
		public Q3mapLightSubdivideDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapLightSubdivideDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapLightSubdivideDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapLightSubdivideDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapLightSubdivideDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapLightSubdivideDirectiveContext q3mapLightSubdivideDirective() {
		Q3mapLightSubdivideDirectiveContext _localctx = new Q3mapLightSubdivideDirectiveContext(Context, State);
		EnterRule(_localctx, 104, RULE_q3mapLightSubdivideDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			Match(Q3MAP_LIGHTSUBDIVIDE);
			State = 1160;
			Match(WS);
			State = 1161;
			_localctx.a = intParam();
			_localctx.value =  new Q3MapLightSubdivide(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoClipDirectiveContext : ParserRuleContext {
		public Q3MapNoClip value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOCLIP() { return GetToken(ShaderParser.Q3MAP_NOCLIP, 0); }
		public Q3mapNoClipDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoClipDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoClipDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoClipDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoClipDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoClipDirectiveContext q3mapNoClipDirective() {
		Q3mapNoClipDirectiveContext _localctx = new Q3mapNoClipDirectiveContext(Context, State);
		EnterRule(_localctx, 106, RULE_q3mapNoClipDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164;
			Match(Q3MAP_NOCLIP);
			_localctx.value =  new Q3MapNoClip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoFastDirectiveContext : ParserRuleContext {
		public Q3MapNoFast value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOFAST() { return GetToken(ShaderParser.Q3MAP_NOFAST, 0); }
		public Q3mapNoFastDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoFastDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoFastDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoFastDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoFastDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoFastDirectiveContext q3mapNoFastDirective() {
		Q3mapNoFastDirectiveContext _localctx = new Q3mapNoFastDirectiveContext(Context, State);
		EnterRule(_localctx, 108, RULE_q3mapNoFastDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			Match(Q3MAP_NOFAST);
			_localctx.value =  new Q3MapNoFast();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoFogDirectiveContext : ParserRuleContext {
		public Q3MapNoFog value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOFOG() { return GetToken(ShaderParser.Q3MAP_NOFOG, 0); }
		public Q3mapNoFogDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoFogDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoFogDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoFogDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoFogDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoFogDirectiveContext q3mapNoFogDirective() {
		Q3mapNoFogDirectiveContext _localctx = new Q3mapNoFogDirectiveContext(Context, State);
		EnterRule(_localctx, 110, RULE_q3mapNoFogDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			Match(Q3MAP_NOFOG);
			_localctx.value =  new Q3MapNoFog();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoLightmapDirectiveContext : ParserRuleContext {
		public Q3MapNoLightmap value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOLIGHTMAP() { return GetToken(ShaderParser.Q3MAP_NOLIGHTMAP, 0); }
		public Q3mapNoLightmapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoLightmapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoLightmapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoLightmapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoLightmapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoLightmapDirectiveContext q3mapNoLightmapDirective() {
		Q3mapNoLightmapDirectiveContext _localctx = new Q3mapNoLightmapDirectiveContext(Context, State);
		EnterRule(_localctx, 112, RULE_q3mapNoLightmapDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173;
			Match(Q3MAP_NOLIGHTMAP);
			_localctx.value =  new Q3MapNoLightmap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNonPlanarDirectiveContext : ParserRuleContext {
		public Q3MapNonPlanar value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NONPLANAR() { return GetToken(ShaderParser.Q3MAP_NONPLANAR, 0); }
		public Q3mapNonPlanarDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNonPlanarDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNonPlanarDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNonPlanarDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNonPlanarDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNonPlanarDirectiveContext q3mapNonPlanarDirective() {
		Q3mapNonPlanarDirectiveContext _localctx = new Q3mapNonPlanarDirectiveContext(Context, State);
		EnterRule(_localctx, 114, RULE_q3mapNonPlanarDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			Match(Q3MAP_NONPLANAR);
			_localctx.value =  new Q3MapNonPlanar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNormalImageDirectiveContext : ParserRuleContext {
		public Q3MapNormalImage value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NORMALIMAGE() { return GetToken(ShaderParser.Q3MAP_NORMALIMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapNormalImageDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNormalImageDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNormalImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNormalImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNormalImageDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNormalImageDirectiveContext q3mapNormalImageDirective() {
		Q3mapNormalImageDirectiveContext _localctx = new Q3mapNormalImageDirectiveContext(Context, State);
		EnterRule(_localctx, 116, RULE_q3mapNormalImageDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			Match(Q3MAP_NORMALIMAGE);
			State = 1180;
			Match(WS);
			State = 1181;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapNormalImage(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoTJuncDirectiveContext : ParserRuleContext {
		public Q3MapNoTJunc value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOTJUNC() { return GetToken(ShaderParser.Q3MAP_NOTJUNC, 0); }
		public Q3mapNoTJuncDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoTJuncDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoTJuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoTJuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoTJuncDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoTJuncDirectiveContext q3mapNoTJuncDirective() {
		Q3mapNoTJuncDirectiveContext _localctx = new Q3mapNoTJuncDirectiveContext(Context, State);
		EnterRule(_localctx, 118, RULE_q3mapNoTJuncDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			Match(Q3MAP_NOTJUNC);
			_localctx.value =  new Q3MapNoTJunc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoVertexLightDirectiveContext : ParserRuleContext {
		public Q3MapNoVertexLight value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOVERTEXLIGHT() { return GetToken(ShaderParser.Q3MAP_NOVERTEXLIGHT, 0); }
		public Q3mapNoVertexLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoVertexLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoVertexLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoVertexLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoVertexLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoVertexLightDirectiveContext q3mapNoVertexLightDirective() {
		Q3mapNoVertexLightDirectiveContext _localctx = new Q3mapNoVertexLightDirectiveContext(Context, State);
		EnterRule(_localctx, 120, RULE_q3mapNoVertexLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187;
			Match(Q3MAP_NOVERTEXLIGHT);
			_localctx.value =  new Q3MapNoVertexLight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoVertexShadowsDirectiveContext : ParserRuleContext {
		public Q3MapNoVertexShadows value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOVERTEXSHADOWS() { return GetToken(ShaderParser.Q3MAP_NOVERTEXSHADOWS, 0); }
		public Q3mapNoVertexShadowsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoVertexShadowsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoVertexShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoVertexShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoVertexShadowsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoVertexShadowsDirectiveContext q3mapNoVertexShadowsDirective() {
		Q3mapNoVertexShadowsDirectiveContext _localctx = new Q3mapNoVertexShadowsDirectiveContext(Context, State);
		EnterRule(_localctx, 122, RULE_q3mapNoVertexShadowsDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(Q3MAP_NOVERTEXSHADOWS);
			_localctx.value =  new Q3MapNoVertexShadows();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapOffsetDirectiveContext : ParserRuleContext {
		public Q3MapOffset value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_OFFSET() { return GetToken(ShaderParser.Q3MAP_OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapOffsetDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapOffsetDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapOffsetDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapOffsetDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapOffsetDirectiveContext q3mapOffsetDirective() {
		Q3mapOffsetDirectiveContext _localctx = new Q3mapOffsetDirectiveContext(Context, State);
		EnterRule(_localctx, 124, RULE_q3mapOffsetDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			Match(Q3MAP_OFFSET);
			State = 1194;
			Match(WS);
			State = 1195;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapOffset(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapPatchShadowsDirectiveContext : ParserRuleContext {
		public Q3MapPatchShadows value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_PATCHSHADOWS() { return GetToken(ShaderParser.Q3MAP_PATCHSHADOWS, 0); }
		public Q3mapPatchShadowsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapPatchShadowsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapPatchShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapPatchShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapPatchShadowsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapPatchShadowsDirectiveContext q3mapPatchShadowsDirective() {
		Q3mapPatchShadowsDirectiveContext _localctx = new Q3mapPatchShadowsDirectiveContext(Context, State);
		EnterRule(_localctx, 126, RULE_q3mapPatchShadowsDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			Match(Q3MAP_PATCHSHADOWS);
			_localctx.value =  new Q3MapPatchShadows();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapRemapShaderDirectiveContext : ParserRuleContext {
		public Q3MapRemapShader value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_REMAPSHADER() { return GetToken(ShaderParser.Q3MAP_REMAPSHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public Q3mapRemapShaderDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapRemapShaderDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapRemapShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapRemapShaderDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapRemapShaderDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapRemapShaderDirectiveContext q3mapRemapShaderDirective() {
		Q3mapRemapShaderDirectiveContext _localctx = new Q3mapRemapShaderDirectiveContext(Context, State);
		EnterRule(_localctx, 128, RULE_q3mapRemapShaderDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201;
			Match(Q3MAP_REMAPSHADER);
			State = 1202;
			Match(WS);
			State = 1203;
			_localctx.a = pathParam();
			_localctx.value =  new Q3MapRemapShader(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapRGBGenDirectiveContext : ParserRuleContext {
		public Q3MapRGBGen value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_RGBGEN() { return GetToken(ShaderParser.Q3MAP_RGBGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ShaderParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapRGBGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapRGBGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapRGBGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapRGBGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapRGBGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapRGBGenDirectiveContext q3mapRGBGenDirective() {
		Q3mapRGBGenDirectiveContext _localctx = new Q3mapRGBGenDirectiveContext(Context, State);
		EnterRule(_localctx, 130, RULE_q3mapRGBGenDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			Match(Q3MAP_RGBGEN);
			State = 1207;
			Match(WS);
			State = 1208;
			Match(CONST);
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 1209;
				Match(WS);
				}
			}

			State = 1212;
			Match(LROUNDBRACKET);
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 1213;
				Match(WS);
				}
			}

			State = 1216;
			_localctx.a1 = numberParam();
			State = 1217;
			Match(WS);
			State = 1218;
			_localctx.a2 = numberParam();
			State = 1219;
			Match(WS);
			State = 1220;
			_localctx.a3 = numberParam();
			State = 1222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 1221;
				Match(WS);
				}
			}

			State = 1224;
			Match(RROUNDBRACKET);
			_localctx.value =  new Q3MapRGBGenConst(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapRGBModDirectiveContext : ParserRuleContext {
		public Q3MapRGBMod value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_RGBMOD() { return GetToken(ShaderParser.Q3MAP_RGBMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(ShaderParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(ShaderParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLUME() { return GetToken(ShaderParser.VOLUME, 0); }
		public Q3mapRGBModDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapRGBModDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapRGBModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapRGBModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapRGBModDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapRGBModDirectiveContext q3mapRGBModDirective() {
		Q3mapRGBModDirectiveContext _localctx = new Q3mapRGBModDirectiveContext(Context, State);
		EnterRule(_localctx, 132, RULE_q3mapRGBModDirective);
		int _la;
		try {
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1227;
				Match(Q3MAP_RGBMOD);
				State = 1228;
				Match(WS);
				State = 1229;
				Match(SCALE);
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1230;
					Match(WS);
					}
				}

				State = 1233;
				Match(LROUNDBRACKET);
				State = 1235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1234;
					Match(WS);
					}
				}

				State = 1237;
				_localctx.a1 = numberParam();
				State = 1238;
				Match(WS);
				State = 1239;
				_localctx.a2 = numberParam();
				State = 1240;
				Match(WS);
				State = 1241;
				_localctx.a3 = numberParam();
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1242;
					Match(WS);
					}
				}

				State = 1245;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapRGBModScale(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				Match(Q3MAP_RGBMOD);
				State = 1249;
				Match(WS);
				State = 1250;
				Match(SET);
				State = 1252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1251;
					Match(WS);
					}
				}

				State = 1254;
				Match(LROUNDBRACKET);
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1255;
					Match(WS);
					}
				}

				State = 1258;
				_localctx.b1 = numberParam();
				State = 1259;
				Match(WS);
				State = 1260;
				_localctx.b2 = numberParam();
				State = 1261;
				Match(WS);
				State = 1262;
				_localctx.b3 = numberParam();
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1263;
					Match(WS);
					}
				}

				State = 1266;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapRGBModSet(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1269;
				Match(Q3MAP_RGBMOD);
				State = 1270;
				Match(WS);
				State = 1271;
				Match(VOLUME);
				_localctx.value =  new Q3MapRGBModVolume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapShadeAngleDirectiveContext : ParserRuleContext {
		public Q3MapShadeAngle value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SHADEANGLE() { return GetToken(ShaderParser.Q3MAP_SHADEANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapShadeAngleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapShadeAngleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapShadeAngleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapShadeAngleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapShadeAngleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapShadeAngleDirectiveContext q3mapShadeAngleDirective() {
		Q3mapShadeAngleDirectiveContext _localctx = new Q3mapShadeAngleDirectiveContext(Context, State);
		EnterRule(_localctx, 134, RULE_q3mapShadeAngleDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			Match(Q3MAP_SHADEANGLE);
			State = 1276;
			Match(WS);
			State = 1277;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapShadeAngle(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSkyLightDirectiveContext : ParserRuleContext {
		public Q3MapSkyLight value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SKYLIGHT() { return GetToken(ShaderParser.Q3MAP_SKYLIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapSkyLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSkyLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSkyLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSkyLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSkyLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSkyLightDirectiveContext q3mapSkyLightDirective() {
		Q3mapSkyLightDirectiveContext _localctx = new Q3mapSkyLightDirectiveContext(Context, State);
		EnterRule(_localctx, 136, RULE_q3mapSkyLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280;
			Match(Q3MAP_SKYLIGHT);
			State = 1281;
			Match(WS);
			State = 1282;
			_localctx.a1 = numberParam();
			State = 1283;
			Match(WS);
			State = 1284;
			_localctx.a2 = numberParam();
			_localctx.value =  new Q3MapSkyLight(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSplotchFixDirectiveContext : ParserRuleContext {
		public Q3MapSplotchFix value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SPLOTCHFIX() { return GetToken(ShaderParser.Q3MAP_SPLOTCHFIX, 0); }
		public Q3mapSplotchFixDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSplotchFixDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSplotchFixDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSplotchFixDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSplotchFixDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSplotchFixDirectiveContext q3mapSplotchFixDirective() {
		Q3mapSplotchFixDirectiveContext _localctx = new Q3mapSplotchFixDirectiveContext(Context, State);
		EnterRule(_localctx, 138, RULE_q3mapSplotchFixDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			Match(Q3MAP_SPLOTCHFIX);
			_localctx.value =  new Q3MapSplotchFix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapStyleMarkerDirectiveContext : ParserRuleContext {
		public Q3MapStyleMarker value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_STYLEMARKER() { return GetToken(ShaderParser.Q3MAP_STYLEMARKER, 0); }
		public Q3mapStyleMarkerDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapStyleMarkerDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapStyleMarkerDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapStyleMarkerDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapStyleMarkerDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapStyleMarkerDirectiveContext q3mapStyleMarkerDirective() {
		Q3mapStyleMarkerDirectiveContext _localctx = new Q3mapStyleMarkerDirectiveContext(Context, State);
		EnterRule(_localctx, 140, RULE_q3mapStyleMarkerDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			Match(Q3MAP_STYLEMARKER);
			_localctx.value =  new Q3MapStyleMarker();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapStyleMarker2DirectiveContext : ParserRuleContext {
		public Q3MapStyleMarker2 value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_STYLEMARKER2() { return GetToken(ShaderParser.Q3MAP_STYLEMARKER2, 0); }
		public Q3mapStyleMarker2DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapStyleMarker2Directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapStyleMarker2Directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapStyleMarker2Directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapStyleMarker2Directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapStyleMarker2DirectiveContext q3mapStyleMarker2Directive() {
		Q3mapStyleMarker2DirectiveContext _localctx = new Q3mapStyleMarker2DirectiveContext(Context, State);
		EnterRule(_localctx, 142, RULE_q3mapStyleMarker2Directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			Match(Q3MAP_STYLEMARKER2);
			_localctx.value =  new Q3MapStyleMarker2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSunDirectiveContext : ParserRuleContext {
		public Q3MapSun value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext a6;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SUN() { return GetToken(ShaderParser.Q3MAP_SUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapSunDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSunDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSunDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSunDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSunDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSunDirectiveContext q3mapSunDirective() {
		Q3mapSunDirectiveContext _localctx = new Q3mapSunDirectiveContext(Context, State);
		EnterRule(_localctx, 144, RULE_q3mapSunDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1296;
			Match(Q3MAP_SUN);
			State = 1297;
			Match(WS);
			State = 1298;
			_localctx.a1 = numberParam();
			State = 1299;
			Match(WS);
			State = 1300;
			_localctx.a2 = numberParam();
			State = 1301;
			Match(WS);
			State = 1302;
			_localctx.a3 = numberParam();
			State = 1303;
			Match(WS);
			State = 1304;
			_localctx.a4 = numberParam();
			State = 1305;
			Match(WS);
			State = 1306;
			_localctx.a5 = numberParam();
			State = 1307;
			Match(WS);
			State = 1308;
			_localctx.a6 = numberParam();
			_localctx.value =  new Q3MapSun(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value, _localctx.a6.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSunExtDirectiveContext : ParserRuleContext {
		public Q3MapSunExt value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext a6;
		public NumberParamContext a7;
		public NumberParamContext a8;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SUNEXT() { return GetToken(ShaderParser.Q3MAP_SUNEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapSunExtDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSunExtDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSunExtDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSunExtDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSunExtDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSunExtDirectiveContext q3mapSunExtDirective() {
		Q3mapSunExtDirectiveContext _localctx = new Q3mapSunExtDirectiveContext(Context, State);
		EnterRule(_localctx, 146, RULE_q3mapSunExtDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			Match(Q3MAP_SUNEXT);
			State = 1312;
			Match(WS);
			State = 1313;
			_localctx.a1 = numberParam();
			State = 1314;
			Match(WS);
			State = 1315;
			_localctx.a2 = numberParam();
			State = 1316;
			Match(WS);
			State = 1317;
			_localctx.a3 = numberParam();
			State = 1318;
			Match(WS);
			State = 1319;
			_localctx.a4 = numberParam();
			State = 1320;
			Match(WS);
			State = 1321;
			_localctx.a5 = numberParam();
			State = 1322;
			Match(WS);
			State = 1323;
			_localctx.a6 = numberParam();
			State = 1324;
			Match(WS);
			State = 1325;
			_localctx.a7 = numberParam();
			State = 1326;
			Match(WS);
			State = 1327;
			_localctx.a8 = numberParam();
			_localctx.value =  new Q3MapSunExt(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value, _localctx.a6.value, _localctx.a7.value, _localctx.a8.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSurfaceLightDirectiveContext : ParserRuleContext {
		public Q3MapSurfaceLight value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SURFACELIGHT() { return GetToken(ShaderParser.Q3MAP_SURFACELIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapSurfaceLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSurfaceLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSurfaceLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSurfaceLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSurfaceLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSurfaceLightDirectiveContext q3mapSurfaceLightDirective() {
		Q3mapSurfaceLightDirectiveContext _localctx = new Q3mapSurfaceLightDirectiveContext(Context, State);
		EnterRule(_localctx, 148, RULE_q3mapSurfaceLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			Match(Q3MAP_SURFACELIGHT);
			State = 1331;
			Match(WS);
			State = 1332;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapSurfaceLight(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapSurfaceModelDirectiveContext : ParserRuleContext {
		public Q3MapSurfaceModel value;
		public PathParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext a6;
		public NumberParamContext a7;
		public BoolParamContext a8;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_SURFACEMODEL() { return GetToken(ShaderParser.Q3MAP_SURFACEMODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolParamContext boolParam() {
			return GetRuleContext<BoolParamContext>(0);
		}
		public Q3mapSurfaceModelDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapSurfaceModelDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapSurfaceModelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapSurfaceModelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapSurfaceModelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapSurfaceModelDirectiveContext q3mapSurfaceModelDirective() {
		Q3mapSurfaceModelDirectiveContext _localctx = new Q3mapSurfaceModelDirectiveContext(Context, State);
		EnterRule(_localctx, 150, RULE_q3mapSurfaceModelDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			Match(Q3MAP_SURFACEMODEL);
			State = 1336;
			Match(WS);
			State = 1337;
			_localctx.a1 = pathParam();
			State = 1338;
			Match(WS);
			State = 1339;
			_localctx.a2 = numberParam();
			State = 1340;
			Match(WS);
			State = 1341;
			_localctx.a3 = numberParam();
			State = 1342;
			Match(WS);
			State = 1343;
			_localctx.a4 = numberParam();
			State = 1344;
			Match(WS);
			State = 1345;
			_localctx.a5 = numberParam();
			State = 1346;
			Match(WS);
			State = 1347;
			_localctx.a6 = numberParam();
			State = 1348;
			Match(WS);
			State = 1349;
			_localctx.a7 = numberParam();
			State = 1350;
			Match(WS);
			State = 1351;
			_localctx.a8 = boolParam();
			_localctx.value =  new Q3MapSurfaceModel(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value, _localctx.a6.value, _localctx.a7.value, _localctx.a8.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTcGenDirectiveContext : ParserRuleContext {
		public Q3MapTcGen value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext a6;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		public NumberParamContext b4;
		public NumberParamContext b5;
		public NumberParamContext b6;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TCGEN() { return GetToken(ShaderParser.Q3MAP_TCGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(ShaderParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LROUNDBRACKET() { return GetTokens(ShaderParser.LROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET(int i) {
			return GetToken(ShaderParser.LROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RROUNDBRACKET() { return GetTokens(ShaderParser.RROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET(int i) {
			return GetToken(ShaderParser.RROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IVECTOR() { return GetToken(ShaderParser.IVECTOR, 0); }
		public Q3mapTcGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTcGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTcGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTcGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTcGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTcGenDirectiveContext q3mapTcGenDirective() {
		Q3mapTcGenDirectiveContext _localctx = new Q3mapTcGenDirectiveContext(Context, State);
		EnterRule(_localctx, 152, RULE_q3mapTcGenDirective);
		int _la;
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354;
				Match(Q3MAP_TCGEN);
				State = 1355;
				Match(WS);
				State = 1356;
				Match(VECTOR);
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1357;
					Match(WS);
					}
				}

				State = 1360;
				Match(LROUNDBRACKET);
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1361;
					Match(WS);
					}
				}

				State = 1364;
				_localctx.a1 = numberParam();
				State = 1365;
				Match(WS);
				State = 1366;
				_localctx.a2 = numberParam();
				State = 1367;
				Match(WS);
				State = 1368;
				_localctx.a3 = numberParam();
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1369;
					Match(WS);
					}
				}

				State = 1372;
				Match(RROUNDBRACKET);
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1373;
					Match(WS);
					}
				}

				State = 1376;
				Match(LROUNDBRACKET);
				State = 1378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1377;
					Match(WS);
					}
				}

				State = 1380;
				_localctx.a4 = numberParam();
				State = 1381;
				Match(WS);
				State = 1382;
				_localctx.a5 = numberParam();
				State = 1383;
				Match(WS);
				State = 1384;
				_localctx.a6 = numberParam();
				State = 1386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1385;
					Match(WS);
					}
				}

				State = 1388;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapTcGenVector(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value, _localctx.a6.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391;
				Match(Q3MAP_TCGEN);
				State = 1392;
				Match(WS);
				State = 1393;
				Match(IVECTOR);
				State = 1395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1394;
					Match(WS);
					}
				}

				State = 1397;
				Match(LROUNDBRACKET);
				State = 1399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1398;
					Match(WS);
					}
				}

				State = 1401;
				_localctx.b1 = numberParam();
				State = 1402;
				Match(WS);
				State = 1403;
				_localctx.b2 = numberParam();
				State = 1404;
				Match(WS);
				State = 1405;
				_localctx.b3 = numberParam();
				State = 1407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1406;
					Match(WS);
					}
				}

				State = 1409;
				Match(RROUNDBRACKET);
				State = 1411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1410;
					Match(WS);
					}
				}

				State = 1413;
				Match(LROUNDBRACKET);
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1414;
					Match(WS);
					}
				}

				State = 1417;
				_localctx.b4 = numberParam();
				State = 1418;
				Match(WS);
				State = 1419;
				_localctx.b5 = numberParam();
				State = 1420;
				Match(WS);
				State = 1421;
				_localctx.b6 = numberParam();
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1422;
					Match(WS);
					}
				}

				State = 1425;
				Match(RROUNDBRACKET);
				_localctx.value =  new Q3MapTcGenIVector(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value, _localctx.b4.value, _localctx.b5.value, _localctx.b6.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTcModDirectiveContext : ParserRuleContext {
		public Q3MapTcMod value;
		public NumberParamContext a;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext c1;
		public NumberParamContext c2;
		public NumberParamContext d1;
		public NumberParamContext d2;
		public NumberParamContext e1;
		public NumberParamContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TCMOD() { return GetToken(ShaderParser.Q3MAP_TCMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(ShaderParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(ShaderParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSLATE() { return GetToken(ShaderParser.TRANSLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(ShaderParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT() { return GetToken(ShaderParser.SHIFT, 0); }
		public Q3mapTcModDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTcModDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTcModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTcModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTcModDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTcModDirectiveContext q3mapTcModDirective() {
		Q3mapTcModDirectiveContext _localctx = new Q3mapTcModDirectiveContext(Context, State);
		EnterRule(_localctx, 154, RULE_q3mapTcModDirective);
		try {
			State = 1473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1430;
				Match(Q3MAP_TCMOD);
				State = 1431;
				Match(WS);
				State = 1432;
				Match(ROTATE);
				State = 1433;
				Match(WS);
				State = 1434;
				_localctx.a = numberParam();
				_localctx.value =  new Q3MapTcModRotate(_localctx.a.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1437;
				Match(Q3MAP_TCMOD);
				State = 1438;
				Match(WS);
				State = 1439;
				Match(SCALE);
				State = 1440;
				Match(WS);
				State = 1441;
				_localctx.b1 = numberParam();
				State = 1442;
				Match(WS);
				State = 1443;
				_localctx.b2 = numberParam();
				_localctx.value =  new Q3MapTcModScale(_localctx.b1.value, _localctx.b2.value);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1446;
				Match(Q3MAP_TCMOD);
				State = 1447;
				Match(WS);
				State = 1448;
				Match(TRANSLATE);
				State = 1449;
				Match(WS);
				State = 1450;
				_localctx.c1 = numberParam();
				State = 1451;
				Match(WS);
				State = 1452;
				_localctx.c2 = numberParam();
				_localctx.value =  new Q3MapTcModTranslate(_localctx.c1.value, _localctx.c2.value);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1455;
				Match(Q3MAP_TCMOD);
				State = 1456;
				Match(WS);
				State = 1457;
				Match(MOVE);
				State = 1458;
				Match(WS);
				State = 1459;
				_localctx.d1 = numberParam();
				State = 1460;
				Match(WS);
				State = 1461;
				_localctx.d2 = numberParam();
				_localctx.value =  new Q3MapTcModMove(_localctx.d1.value, _localctx.d2.value);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1464;
				Match(Q3MAP_TCMOD);
				State = 1465;
				Match(WS);
				State = 1466;
				Match(SHIFT);
				State = 1467;
				Match(WS);
				State = 1468;
				_localctx.e1 = numberParam();
				State = 1469;
				Match(WS);
				State = 1470;
				_localctx.e2 = numberParam();
				_localctx.value =  new Q3MapTcModShift(_localctx.e1.value, _localctx.e2.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTerrainDirectiveContext : ParserRuleContext {
		public Q3MapTerrain value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TERRAIN() { return GetToken(ShaderParser.Q3MAP_TERRAIN, 0); }
		public Q3mapTerrainDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTerrainDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTerrainDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTerrainDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTerrainDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTerrainDirectiveContext q3mapTerrainDirective() {
		Q3mapTerrainDirectiveContext _localctx = new Q3mapTerrainDirectiveContext(Context, State);
		EnterRule(_localctx, 156, RULE_q3mapTerrainDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475;
			Match(Q3MAP_TERRAIN);
			_localctx.value =  new Q3MapTerrain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTessSizeDirectiveContext : ParserRuleContext {
		public Q3MapTessSize value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TESSSIZE() { return GetToken(ShaderParser.Q3MAP_TESSSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapTessSizeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTessSizeDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTessSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTessSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTessSizeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTessSizeDirectiveContext q3mapTessSizeDirective() {
		Q3mapTessSizeDirectiveContext _localctx = new Q3mapTessSizeDirectiveContext(Context, State);
		EnterRule(_localctx, 158, RULE_q3mapTessSizeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478;
			Match(Q3MAP_TESSSIZE);
			State = 1479;
			Match(WS);
			State = 1480;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapTessSize(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTextureSizeDirectiveContext : ParserRuleContext {
		public Q3MapTextureSize value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TEXTURESIZE() { return GetToken(ShaderParser.Q3MAP_TEXTURESIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapTextureSizeDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTextureSizeDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTextureSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTextureSizeDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTextureSizeDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTextureSizeDirectiveContext q3mapTextureSizeDirective() {
		Q3mapTextureSizeDirectiveContext _localctx = new Q3mapTextureSizeDirectiveContext(Context, State);
		EnterRule(_localctx, 160, RULE_q3mapTextureSizeDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483;
			Match(Q3MAP_TEXTURESIZE);
			State = 1484;
			Match(WS);
			State = 1485;
			_localctx.a1 = numberParam();
			State = 1486;
			Match(WS);
			State = 1487;
			_localctx.a2 = numberParam();
			_localctx.value =  new Q3MapTextureSize(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapTraceLightDirectiveContext : ParserRuleContext {
		public Q3MapTraceLight value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_TRACELIGHT() { return GetToken(ShaderParser.Q3MAP_TRACELIGHT, 0); }
		public Q3mapTraceLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapTraceLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapTraceLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapTraceLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapTraceLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapTraceLightDirectiveContext q3mapTraceLightDirective() {
		Q3mapTraceLightDirectiveContext _localctx = new Q3mapTraceLightDirectiveContext(Context, State);
		EnterRule(_localctx, 162, RULE_q3mapTraceLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			Match(Q3MAP_TRACELIGHT);
			_localctx.value =  new Q3MapTraceLight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapVertexScaleDirectiveContext : ParserRuleContext {
		public Q3MapVertexScale value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_VERTEXSCALE() { return GetToken(ShaderParser.Q3MAP_VERTEXSCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public Q3mapVertexScaleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapVertexScaleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapVertexScaleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapVertexScaleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapVertexScaleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapVertexScaleDirectiveContext q3mapVertexScaleDirective() {
		Q3mapVertexScaleDirectiveContext _localctx = new Q3mapVertexScaleDirectiveContext(Context, State);
		EnterRule(_localctx, 164, RULE_q3mapVertexScaleDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			Match(Q3MAP_VERTEXSCALE);
			State = 1494;
			Match(WS);
			State = 1495;
			_localctx.a = numberParam();
			_localctx.value =  new Q3MapVertexScale(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapVertexShadowsDirectiveContext : ParserRuleContext {
		public Q3MapVertexShadows value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_VERTEXSHADOWS() { return GetToken(ShaderParser.Q3MAP_VERTEXSHADOWS, 0); }
		public Q3mapVertexShadowsDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapVertexShadowsDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapVertexShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapVertexShadowsDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapVertexShadowsDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapVertexShadowsDirectiveContext q3mapVertexShadowsDirective() {
		Q3mapVertexShadowsDirectiveContext _localctx = new Q3mapVertexShadowsDirectiveContext(Context, State);
		EnterRule(_localctx, 166, RULE_q3mapVertexShadowsDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			Match(Q3MAP_VERTEXSHADOWS);
			_localctx.value =  new Q3MapVertexShadows();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapVLightDirectiveContext : ParserRuleContext {
		public Q3MapVLight value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_VLIGHT() { return GetToken(ShaderParser.Q3MAP_VLIGHT, 0); }
		public Q3mapVLightDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapVLightDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapVLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapVLightDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapVLightDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapVLightDirectiveContext q3mapVLightDirective() {
		Q3mapVLightDirectiveContext _localctx = new Q3mapVLightDirectiveContext(Context, State);
		EnterRule(_localctx, 168, RULE_q3mapVLightDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501;
			Match(Q3MAP_VLIGHT);
			_localctx.value =  new Q3MapVLight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapNoFancyWaterDirectiveContext : ParserRuleContext {
		public Q3MapNoFancyWater value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_NOFANCYWATER() { return GetToken(ShaderParser.Q3MAP_NOFANCYWATER, 0); }
		public Q3mapNoFancyWaterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapNoFancyWaterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapNoFancyWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapNoFancyWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapNoFancyWaterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapNoFancyWaterDirectiveContext q3mapNoFancyWaterDirective() {
		Q3mapNoFancyWaterDirectiveContext _localctx = new Q3mapNoFancyWaterDirectiveContext(Context, State);
		EnterRule(_localctx, 170, RULE_q3mapNoFancyWaterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504;
			Match(Q3MAP_NOFANCYWATER);
			_localctx.value =  new Q3MapNoFancyWater();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3mapCheapWaterDirectiveContext : ParserRuleContext {
		public Q3MapCheapWater value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Q3MAP_CHEAPWATER() { return GetToken(ShaderParser.Q3MAP_CHEAPWATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public Q3mapCheapWaterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3mapCheapWaterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3mapCheapWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3mapCheapWaterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3mapCheapWaterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3mapCheapWaterDirectiveContext q3mapCheapWaterDirective() {
		Q3mapCheapWaterDirectiveContext _localctx = new Q3mapCheapWaterDirectiveContext(Context, State);
		EnterRule(_localctx, 172, RULE_q3mapCheapWaterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1507;
			Match(Q3MAP_CHEAPWATER);
			State = 1508;
			Match(WS);
			State = 1509;
			_localctx.a1 = numberParam();
			State = 1510;
			Match(WS);
			State = 1511;
			_localctx.a2 = numberParam();
			State = 1512;
			Match(WS);
			State = 1513;
			_localctx.a3 = numberParam();
			State = 1514;
			Match(WS);
			State = 1515;
			_localctx.a4 = numberParam();
			_localctx.value =  new Q3MapCheapWater(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EditorDirectiveContext : ParserRuleContext {
		public QerDirective value;
		public QerEditorImageDirectiveContext a1;
		public QerNoCarveDirectiveContext a2;
		public QerTransDirectiveContext a3;
		public QerAlphaFuncDirectiveContext a4;
		[System.Diagnostics.DebuggerNonUserCode] public QerEditorImageDirectiveContext qerEditorImageDirective() {
			return GetRuleContext<QerEditorImageDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QerNoCarveDirectiveContext qerNoCarveDirective() {
			return GetRuleContext<QerNoCarveDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QerTransDirectiveContext qerTransDirective() {
			return GetRuleContext<QerTransDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QerAlphaFuncDirectiveContext qerAlphaFuncDirective() {
			return GetRuleContext<QerAlphaFuncDirectiveContext>(0);
		}
		public EditorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_editorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterEditorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitEditorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEditorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EditorDirectiveContext editorDirective() {
		EditorDirectiveContext _localctx = new EditorDirectiveContext(Context, State);
		EnterRule(_localctx, 174, RULE_editorDirective);
		try {
			State = 1530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QER_EDITORIMAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518;
				_localctx.a1 = qerEditorImageDirective();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case QER_NOCARVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521;
				_localctx.a2 = qerNoCarveDirective();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			case QER_TRANS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1524;
				_localctx.a3 = qerTransDirective();
				_localctx.value =  _localctx.a3.value;
				}
				break;
			case QER_ALPHAFUNC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1527;
				_localctx.a4 = qerAlphaFuncDirective();
				_localctx.value =  _localctx.a4.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QerEditorImageDirectiveContext : ParserRuleContext {
		public QerEditorImage value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QER_EDITORIMAGE() { return GetToken(ShaderParser.QER_EDITORIMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public QerEditorImageDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qerEditorImageDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQerEditorImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQerEditorImageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQerEditorImageDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QerEditorImageDirectiveContext qerEditorImageDirective() {
		QerEditorImageDirectiveContext _localctx = new QerEditorImageDirectiveContext(Context, State);
		EnterRule(_localctx, 176, RULE_qerEditorImageDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532;
			Match(QER_EDITORIMAGE);
			State = 1533;
			Match(WS);
			State = 1534;
			_localctx.a = pathParam();
			_localctx.value =  new QerEditorImage(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QerNoCarveDirectiveContext : ParserRuleContext {
		public QerNoCarve value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QER_NOCARVE() { return GetToken(ShaderParser.QER_NOCARVE, 0); }
		public QerNoCarveDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qerNoCarveDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQerNoCarveDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQerNoCarveDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQerNoCarveDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QerNoCarveDirectiveContext qerNoCarveDirective() {
		QerNoCarveDirectiveContext _localctx = new QerNoCarveDirectiveContext(Context, State);
		EnterRule(_localctx, 178, RULE_qerNoCarveDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537;
			Match(QER_NOCARVE);
			_localctx.value =  new QerNoCarve();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QerTransDirectiveContext : ParserRuleContext {
		public QerTrans value;
		public NumberParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QER_TRANS() { return GetToken(ShaderParser.QER_TRANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public QerTransDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qerTransDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQerTransDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQerTransDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQerTransDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QerTransDirectiveContext qerTransDirective() {
		QerTransDirectiveContext _localctx = new QerTransDirectiveContext(Context, State);
		EnterRule(_localctx, 180, RULE_qerTransDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540;
			Match(QER_TRANS);
			State = 1541;
			Match(WS);
			State = 1542;
			_localctx.a = numberParam();
			_localctx.value =  new QerTrans(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QerAlphaFuncDirectiveContext : ParserRuleContext {
		public QerAlphaFunc value;
		public Qer_alphaFuncTypeContext a1;
		public NumberParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QER_ALPHAFUNC() { return GetToken(ShaderParser.QER_ALPHAFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qer_alphaFuncTypeContext qer_alphaFuncType() {
			return GetRuleContext<Qer_alphaFuncTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		public QerAlphaFuncDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qerAlphaFuncDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQerAlphaFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQerAlphaFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQerAlphaFuncDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QerAlphaFuncDirectiveContext qerAlphaFuncDirective() {
		QerAlphaFuncDirectiveContext _localctx = new QerAlphaFuncDirectiveContext(Context, State);
		EnterRule(_localctx, 182, RULE_qerAlphaFuncDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			Match(QER_ALPHAFUNC);
			State = 1546;
			Match(WS);
			State = 1547;
			_localctx.a1 = qer_alphaFuncType();
			State = 1548;
			Match(WS);
			State = 1549;
			_localctx.a2 = numberParam();
			_localctx.value =  new QerAlphaFunc(_localctx.a1.value, _localctx.a2.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageDirectiveContext : ParserRuleContext {
		public StageDirective value;
		public MapDirectiveContext a1;
		public ClampMapDirectiveContext a2;
		public AnimMapDirectiveContext a3;
		public VideoMapDirectiveContext a4;
		public BlendFuncDirectiveContext a5;
		public RGBGenDirectiveContext a6;
		public AlphaGenDirectiveContext a7;
		public TcGenDirectiveContext a8;
		public TcModDirectiveContext a9;
		public DepthFuncDirectiveContext a10;
		public DepthWriteDirectiveContext a11;
		public DetailDirectiveContext a12;
		public AlphaFuncDirectiveContext a13;
		[System.Diagnostics.DebuggerNonUserCode] public MapDirectiveContext mapDirective() {
			return GetRuleContext<MapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClampMapDirectiveContext clampMapDirective() {
			return GetRuleContext<ClampMapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnimMapDirectiveContext animMapDirective() {
			return GetRuleContext<AnimMapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VideoMapDirectiveContext videoMapDirective() {
			return GetRuleContext<VideoMapDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFuncDirectiveContext blendFuncDirective() {
			return GetRuleContext<BlendFuncDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RGBGenDirectiveContext rGBGenDirective() {
			return GetRuleContext<RGBGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlphaGenDirectiveContext alphaGenDirective() {
			return GetRuleContext<AlphaGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TcGenDirectiveContext tcGenDirective() {
			return GetRuleContext<TcGenDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TcModDirectiveContext tcModDirective() {
			return GetRuleContext<TcModDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DepthFuncDirectiveContext depthFuncDirective() {
			return GetRuleContext<DepthFuncDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DepthWriteDirectiveContext depthWriteDirective() {
			return GetRuleContext<DepthWriteDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailDirectiveContext detailDirective() {
			return GetRuleContext<DetailDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlphaFuncDirectiveContext alphaFuncDirective() {
			return GetRuleContext<AlphaFuncDirectiveContext>(0);
		}
		public StageDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stageDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterStageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitStageDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStageDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StageDirectiveContext stageDirective() {
		StageDirectiveContext _localctx = new StageDirectiveContext(Context, State);
		EnterRule(_localctx, 184, RULE_stageDirective);
		try {
			State = 1591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1552;
				_localctx.a1 = mapDirective();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case CLAMPMAP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1555;
				_localctx.a2 = clampMapDirective();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			case ANIMMAP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1558;
				_localctx.a3 = animMapDirective();
				_localctx.value =  _localctx.a3.value;
				}
				break;
			case VIDEOMAP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1561;
				_localctx.a4 = videoMapDirective();
				_localctx.value =  _localctx.a4.value;
				}
				break;
			case BLENDFUNC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1564;
				_localctx.a5 = blendFuncDirective();
				_localctx.value =  _localctx.a5.value;
				}
				break;
			case RGBGEN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1567;
				_localctx.a6 = rGBGenDirective();
				_localctx.value =  _localctx.a6.value;
				}
				break;
			case ALPHAGEN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1570;
				_localctx.a7 = alphaGenDirective();
				_localctx.value =  _localctx.a7.value;
				}
				break;
			case TCGEN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1573;
				_localctx.a8 = tcGenDirective();
				_localctx.value =  _localctx.a8.value;
				}
				break;
			case TCMOD:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1576;
				_localctx.a9 = tcModDirective();
				_localctx.value =  _localctx.a9.value;
				}
				break;
			case DEPTHFUNC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1579;
				_localctx.a10 = depthFuncDirective();
				_localctx.value =  _localctx.a10.value;
				}
				break;
			case DEPTHWRITE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1582;
				_localctx.a11 = depthWriteDirective();
				_localctx.value =  _localctx.a11.value;
				}
				break;
			case DETAIL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1585;
				_localctx.a12 = detailDirective();
				_localctx.value =  _localctx.a12.value;
				}
				break;
			case ALPHAFUNC:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1588;
				_localctx.a13 = alphaFuncDirective();
				_localctx.value =  _localctx.a13.value;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDirectiveContext : ParserRuleContext {
		public Map value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(ShaderParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLARLIGHTMAP() { return GetToken(ShaderParser.DOLLARLIGHTMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLARWHITEIMAGE() { return GetToken(ShaderParser.DOLLARWHITEIMAGE, 0); }
		public MapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDirectiveContext mapDirective() {
		MapDirectiveContext _localctx = new MapDirectiveContext(Context, State);
		EnterRule(_localctx, 186, RULE_mapDirective);
		try {
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593;
				Match(MAP);
				State = 1594;
				Match(WS);
				State = 1595;
				_localctx.a = pathParam();
				_localctx.value =  new MapTexture(_localctx.a.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1598;
				Match(MAP);
				State = 1599;
				Match(WS);
				State = 1600;
				Match(DOLLARLIGHTMAP);
				_localctx.value =  new MapLightmap();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1602;
				Match(MAP);
				State = 1603;
				Match(WS);
				State = 1604;
				Match(DOLLARWHITEIMAGE);
				_localctx.value =  new MapWhiteImage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClampMapDirectiveContext : ParserRuleContext {
		public ClampMap value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLAMPMAP() { return GetToken(ShaderParser.CLAMPMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public ClampMapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clampMapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterClampMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitClampMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClampMapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClampMapDirectiveContext clampMapDirective() {
		ClampMapDirectiveContext _localctx = new ClampMapDirectiveContext(Context, State);
		EnterRule(_localctx, 188, RULE_clampMapDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608;
			Match(CLAMPMAP);
			State = 1609;
			Match(WS);
			State = 1610;
			_localctx.a = pathParam();
			_localctx.value =  new ClampMap(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnimMapDirectiveContext : ParserRuleContext {
		public AnimMap value;
		public NumberParamContext a;
		public PathParamContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANIMMAP() { return GetToken(ShaderParser.ANIMMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam() {
			return GetRuleContext<NumberParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ShaderParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ShaderParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext[] pathParam() {
			return GetRuleContexts<PathParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam(int i) {
			return GetRuleContext<PathParamContext>(i);
		}
		public AnimMapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_animMapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterAnimMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitAnimMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnimMapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnimMapDirectiveContext animMapDirective() {
		AnimMapDirectiveContext _localctx = new AnimMapDirectiveContext(Context, State);
		EnterRule(_localctx, 190, RULE_animMapDirective);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			List<string> textures = new List<string>();
			State = 1614;
			Match(ANIMMAP);
			State = 1615;
			Match(WS);
			State = 1616;
			_localctx.a = numberParam();
			State = 1621;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1617;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1618;
					_localctx.b = pathParam();
					textures.Add(_localctx.b.value);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			_localctx.value =  new AnimMap(_localctx.a.value, textures);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VideoMapDirectiveContext : ParserRuleContext {
		public VideoMap value;
		public PathParamContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIDEOMAP() { return GetToken(ShaderParser.VIDEOMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		public VideoMapDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_videoMapDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterVideoMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitVideoMapDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVideoMapDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VideoMapDirectiveContext videoMapDirective() {
		VideoMapDirectiveContext _localctx = new VideoMapDirectiveContext(Context, State);
		EnterRule(_localctx, 192, RULE_videoMapDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(VIDEOMAP);
			State = 1628;
			Match(WS);
			State = 1629;
			_localctx.a = pathParam();
			_localctx.value =  new VideoMap(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFuncDirectiveContext : ParserRuleContext {
		public BlendFunc value;
		public BlendFuncSimplifiedTypeContext a;
		public BlendFuncExplicitSrcTypeContext b1;
		public BlendFuncExplicitDestTypeContext b2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLENDFUNC() { return GetToken(ShaderParser.BLENDFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFuncSimplifiedTypeContext blendFuncSimplifiedType() {
			return GetRuleContext<BlendFuncSimplifiedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFuncExplicitSrcTypeContext blendFuncExplicitSrcType() {
			return GetRuleContext<BlendFuncExplicitSrcTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFuncExplicitDestTypeContext blendFuncExplicitDestType() {
			return GetRuleContext<BlendFuncExplicitDestTypeContext>(0);
		}
		public BlendFuncDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFuncDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterBlendFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitBlendFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFuncDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFuncDirectiveContext blendFuncDirective() {
		BlendFuncDirectiveContext _localctx = new BlendFuncDirectiveContext(Context, State);
		EnterRule(_localctx, 194, RULE_blendFuncDirective);
		try {
			State = 1644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1632;
				Match(BLENDFUNC);
				State = 1633;
				Match(WS);
				State = 1634;
				_localctx.a = blendFuncSimplifiedType();
				_localctx.value =  new BlendFuncSimplified(_localctx.a.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1637;
				Match(BLENDFUNC);
				State = 1638;
				Match(WS);
				State = 1639;
				_localctx.b1 = blendFuncExplicitSrcType();
				State = 1640;
				Match(WS);
				State = 1641;
				_localctx.b2 = blendFuncExplicitDestType();
				_localctx.value =  new BlendFuncExplicit(_localctx.b1.value, _localctx.b2.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RGBGenDirectiveContext : ParserRuleContext {
		public RGBGen value;
		public WaveFormFunctionTypeContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGBGEN() { return GetToken(ShaderParser.RGBGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(ShaderParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITYLIGHTING() { return GetToken(ShaderParser.IDENTITYLIGHTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTEX() { return GetToken(ShaderParser.VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEMINUSVERTEX() { return GetToken(ShaderParser.ONEMINUSVERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXACTVERTEX() { return GetToken(ShaderParser.EXACTVERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROMVERTEX() { return GetToken(ShaderParser.FROMVERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(ShaderParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEMINUSENTITY() { return GetToken(ShaderParser.ONEMINUSENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHTINGDIFFUSE() { return GetToken(ShaderParser.LIGHTINGDIFFUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOISE() { return GetToken(ShaderParser.NOISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAVE() { return GetToken(ShaderParser.WAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveFormFunctionTypeContext waveFormFunctionType() {
			return GetRuleContext<WaveFormFunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ShaderParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(ShaderParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(ShaderParser.RROUNDBRACKET, 0); }
		public RGBGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rGBGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterRGBGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitRGBGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRGBGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RGBGenDirectiveContext rGBGenDirective() {
		RGBGenDirectiveContext _localctx = new RGBGenDirectiveContext(Context, State);
		EnterRule(_localctx, 196, RULE_rGBGenDirective);
		int _la;
		try {
			State = 1722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1646;
				Match(RGBGEN);
				State = 1647;
				Match(WS);
				State = 1648;
				Match(IDENTITY);
				_localctx.value =  new RGBGenIdentity();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1650;
				Match(RGBGEN);
				State = 1651;
				Match(WS);
				State = 1652;
				Match(IDENTITYLIGHTING);
				_localctx.value =  new RGBGenIdentityLighting();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1654;
				Match(RGBGEN);
				State = 1655;
				Match(WS);
				State = 1656;
				Match(VERTEX);
				_localctx.value =  new RGBGenVertex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1658;
				Match(RGBGEN);
				State = 1659;
				Match(WS);
				State = 1660;
				Match(ONEMINUSVERTEX);
				_localctx.value =  new RGBGenOneMinusVertex();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1662;
				Match(RGBGEN);
				State = 1663;
				Match(WS);
				State = 1664;
				Match(EXACTVERTEX);
				_localctx.value =  new RGBGenExactVertex();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1666;
				Match(RGBGEN);
				State = 1667;
				Match(WS);
				State = 1668;
				Match(FROMVERTEX);
				_localctx.value =  new RGBGenFromVertex();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1670;
				Match(RGBGEN);
				State = 1671;
				Match(WS);
				State = 1672;
				Match(ENTITY);
				_localctx.value =  new RGBGenEntity();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1674;
				Match(RGBGEN);
				State = 1675;
				Match(WS);
				State = 1676;
				Match(ONEMINUSENTITY);
				_localctx.value =  new RGBGenOneMinusEntity();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1678;
				Match(RGBGEN);
				State = 1679;
				Match(WS);
				State = 1680;
				Match(LIGHTINGDIFFUSE);
				_localctx.value =  new RGBGenLightingDiffuse();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1682;
				Match(RGBGEN);
				State = 1683;
				Match(WS);
				State = 1684;
				Match(NOISE);
				_localctx.value =  new RGBGenNoise();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1686;
				Match(RGBGEN);
				State = 1687;
				Match(WS);
				State = 1688;
				Match(WAVE);
				State = 1689;
				Match(WS);
				State = 1690;
				_localctx.a1 = waveFormFunctionType();
				State = 1691;
				Match(WS);
				State = 1692;
				_localctx.a2 = numberParam();
				State = 1693;
				Match(WS);
				State = 1694;
				_localctx.a3 = numberParam();
				State = 1695;
				Match(WS);
				State = 1696;
				_localctx.a4 = numberParam();
				State = 1697;
				Match(WS);
				State = 1698;
				_localctx.a5 = numberParam();
				_localctx.value =  new RGBGenWave(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1701;
				Match(RGBGEN);
				State = 1702;
				Match(WS);
				State = 1703;
				Match(CONST);
				State = 1705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1704;
					Match(WS);
					}
				}

				State = 1707;
				Match(LROUNDBRACKET);
				State = 1709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1708;
					Match(WS);
					}
				}

				State = 1711;
				_localctx.b1 = numberParam();
				State = 1712;
				Match(WS);
				State = 1713;
				_localctx.b2 = numberParam();
				State = 1714;
				Match(WS);
				State = 1715;
				_localctx.b3 = numberParam();
				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1716;
					Match(WS);
					}
				}

				State = 1719;
				Match(RROUNDBRACKET);
				_localctx.value =  new RGBGenConst(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlphaGenDirectiveContext : ParserRuleContext {
		public AlphaGen value;
		public NumberParamContext a;
		public NumberParamContext b;
		public WaveFormFunctionTypeContext c1;
		public NumberParamContext c2;
		public NumberParamContext c3;
		public NumberParamContext c4;
		public NumberParamContext c5;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHAGEN() { return GetToken(ShaderParser.ALPHAGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHTINGSPECULAR() { return GetToken(ShaderParser.LIGHTINGSPECULAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(ShaderParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEMINUSENTITY() { return GetToken(ShaderParser.ONEMINUSENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTEX() { return GetToken(ShaderParser.VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEMINUSVERTEX() { return GetToken(ShaderParser.ONEMINUSVERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORTAL() { return GetToken(ShaderParser.PORTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(ShaderParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAVE() { return GetToken(ShaderParser.WAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveFormFunctionTypeContext waveFormFunctionType() {
			return GetRuleContext<WaveFormFunctionTypeContext>(0);
		}
		public AlphaGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alphaGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterAlphaGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitAlphaGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlphaGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlphaGenDirectiveContext alphaGenDirective() {
		AlphaGenDirectiveContext _localctx = new AlphaGenDirectiveContext(Context, State);
		EnterRule(_localctx, 198, RULE_alphaGenDirective);
		try {
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724;
				Match(ALPHAGEN);
				State = 1725;
				Match(WS);
				State = 1726;
				Match(LIGHTINGSPECULAR);
				_localctx.value =  new AlphaGenLightingSpecular();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				Match(ALPHAGEN);
				State = 1729;
				Match(WS);
				State = 1730;
				Match(ENTITY);
				_localctx.value =  new AlphaGenEntity();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1732;
				Match(ALPHAGEN);
				State = 1733;
				Match(WS);
				State = 1734;
				Match(ONEMINUSENTITY);
				_localctx.value =  new AlphaGenOneMinusEntity();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1736;
				Match(ALPHAGEN);
				State = 1737;
				Match(WS);
				State = 1738;
				Match(VERTEX);
				_localctx.value =  new AlphaGenVertex();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1740;
				Match(ALPHAGEN);
				State = 1741;
				Match(WS);
				State = 1742;
				Match(ONEMINUSVERTEX);
				_localctx.value =  new AlphaGenOneMinusVertex();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1744;
				Match(ALPHAGEN);
				State = 1745;
				Match(WS);
				State = 1746;
				Match(PORTAL);
				State = 1747;
				Match(WS);
				State = 1748;
				_localctx.a = numberParam();
				_localctx.value =  new AlphaGenPortal(_localctx.a.value);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1751;
				Match(ALPHAGEN);
				State = 1752;
				Match(WS);
				State = 1753;
				Match(CONST);
				State = 1754;
				Match(WS);
				State = 1755;
				_localctx.b = numberParam();
				_localctx.value =  new AlphaGenConst(_localctx.b.value);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1758;
				Match(ALPHAGEN);
				State = 1759;
				Match(WS);
				State = 1760;
				Match(WAVE);
				State = 1761;
				Match(WS);
				State = 1762;
				_localctx.c1 = waveFormFunctionType();
				State = 1763;
				Match(WS);
				State = 1764;
				_localctx.c2 = numberParam();
				State = 1765;
				Match(WS);
				State = 1766;
				_localctx.c3 = numberParam();
				State = 1767;
				Match(WS);
				State = 1768;
				_localctx.c4 = numberParam();
				State = 1769;
				Match(WS);
				State = 1770;
				_localctx.c5 = numberParam();
				_localctx.value =  new AlphaGenWave(_localctx.c1.value, _localctx.c2.value, _localctx.c3.value, _localctx.c4.value, _localctx.c5.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TcGenDirectiveContext : ParserRuleContext {
		public TcGen value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		public NumberParamContext a6;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCGEN() { return GetToken(ShaderParser.TCGEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(ShaderParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHTMAP() { return GetToken(ShaderParser.LIGHTMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVIRONMENT() { return GetToken(ShaderParser.ENVIRONMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(ShaderParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LROUNDBRACKET() { return GetTokens(ShaderParser.LROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET(int i) {
			return GetToken(ShaderParser.LROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RROUNDBRACKET() { return GetTokens(ShaderParser.RROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET(int i) {
			return GetToken(ShaderParser.RROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public TcGenDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcGenDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterTcGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitTcGenDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcGenDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TcGenDirectiveContext tcGenDirective() {
		TcGenDirectiveContext _localctx = new TcGenDirectiveContext(Context, State);
		EnterRule(_localctx, 200, RULE_tcGenDirective);
		int _la;
		try {
			State = 1824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1775;
				Match(TCGEN);
				State = 1776;
				Match(WS);
				State = 1777;
				Match(BASE);
				_localctx.value =  new TcGenBase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1779;
				Match(TCGEN);
				State = 1780;
				Match(WS);
				State = 1781;
				Match(LIGHTMAP);
				_localctx.value =  new TcGenLightmap();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1783;
				Match(TCGEN);
				State = 1784;
				Match(WS);
				State = 1785;
				Match(ENVIRONMENT);
				_localctx.value =  new TcGenEnvironment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1787;
				Match(TCGEN);
				State = 1788;
				Match(WS);
				State = 1789;
				Match(VECTOR);
				State = 1791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1790;
					Match(WS);
					}
				}

				State = 1793;
				Match(LROUNDBRACKET);
				State = 1795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1794;
					Match(WS);
					}
				}

				State = 1797;
				_localctx.a1 = numberParam();
				State = 1798;
				Match(WS);
				State = 1799;
				_localctx.a2 = numberParam();
				State = 1800;
				Match(WS);
				State = 1801;
				_localctx.a3 = numberParam();
				State = 1803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1802;
					Match(WS);
					}
				}

				State = 1805;
				Match(RROUNDBRACKET);
				State = 1807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1806;
					Match(WS);
					}
				}

				State = 1809;
				Match(LROUNDBRACKET);
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1810;
					Match(WS);
					}
				}

				State = 1813;
				_localctx.a4 = numberParam();
				State = 1814;
				Match(WS);
				State = 1815;
				_localctx.a5 = numberParam();
				State = 1816;
				Match(WS);
				State = 1817;
				_localctx.a6 = numberParam();
				State = 1819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 1818;
					Match(WS);
					}
				}

				State = 1821;
				Match(RROUNDBRACKET);
				_localctx.value =  new TcGenVector(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value, _localctx.a4.value, _localctx.a5.value, _localctx.a6.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TcModDirectiveContext : ParserRuleContext {
		public TcMod value;
		public NumberParamContext a;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext c1;
		public NumberParamContext c2;
		public WaveFormFunctionTypeContext d1;
		public NumberParamContext d2;
		public NumberParamContext d3;
		public NumberParamContext d4;
		public NumberParamContext d5;
		public NumberParamContext e1;
		public NumberParamContext e2;
		public NumberParamContext e3;
		public NumberParamContext e4;
		public NumberParamContext e5;
		public NumberParamContext e6;
		public NumberParamContext f1;
		public NumberParamContext f2;
		public NumberParamContext f3;
		public NumberParamContext f4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TCMOD() { return GetToken(ShaderParser.TCMOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ShaderParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ShaderParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(ShaderParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(ShaderParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(ShaderParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRETCH() { return GetToken(ShaderParser.STRETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveFormFunctionTypeContext waveFormFunctionType() {
			return GetRuleContext<WaveFormFunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(ShaderParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TURB() { return GetToken(ShaderParser.TURB, 0); }
		public TcModDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tcModDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterTcModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitTcModDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTcModDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TcModDirectiveContext tcModDirective() {
		TcModDirectiveContext _localctx = new TcModDirectiveContext(Context, State);
		EnterRule(_localctx, 202, RULE_tcModDirective);
		try {
			State = 1896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1826;
				Match(TCMOD);
				State = 1827;
				Match(WS);
				State = 1828;
				Match(ROTATE);
				State = 1829;
				Match(WS);
				State = 1830;
				_localctx.a = numberParam();
				_localctx.value =  new TcModRotate(_localctx.a.value);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1833;
				Match(TCMOD);
				State = 1834;
				Match(WS);
				State = 1835;
				Match(SCALE);
				State = 1836;
				Match(WS);
				State = 1837;
				_localctx.b1 = numberParam();
				State = 1838;
				Match(WS);
				State = 1839;
				_localctx.b2 = numberParam();
				_localctx.value =  new TcModScale(_localctx.b1.value, _localctx.b2.value);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1842;
				Match(TCMOD);
				State = 1843;
				Match(WS);
				State = 1844;
				Match(SCROLL);
				State = 1845;
				Match(WS);
				State = 1846;
				_localctx.c1 = numberParam();
				State = 1847;
				Match(WS);
				State = 1848;
				_localctx.c2 = numberParam();
				_localctx.value =  new TcModScroll(_localctx.c1.value, _localctx.c2.value);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1851;
				Match(TCMOD);
				State = 1852;
				Match(WS);
				State = 1853;
				Match(STRETCH);
				State = 1854;
				Match(WS);
				State = 1855;
				_localctx.d1 = waveFormFunctionType();
				State = 1856;
				Match(WS);
				State = 1857;
				_localctx.d2 = numberParam();
				State = 1858;
				Match(WS);
				State = 1859;
				_localctx.d3 = numberParam();
				State = 1860;
				Match(WS);
				State = 1861;
				_localctx.d4 = numberParam();
				State = 1862;
				Match(WS);
				State = 1863;
				_localctx.d5 = numberParam();
				_localctx.value =  new TcModStretch(_localctx.d1.value, _localctx.d2.value, _localctx.d3.value, _localctx.d4.value, _localctx.d5.value);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1866;
				Match(TCMOD);
				State = 1867;
				Match(WS);
				State = 1868;
				Match(TRANSFORM);
				State = 1869;
				Match(WS);
				State = 1870;
				_localctx.e1 = numberParam();
				State = 1871;
				Match(WS);
				State = 1872;
				_localctx.e2 = numberParam();
				State = 1873;
				Match(WS);
				State = 1874;
				_localctx.e3 = numberParam();
				State = 1875;
				Match(WS);
				State = 1876;
				_localctx.e4 = numberParam();
				State = 1877;
				Match(WS);
				State = 1878;
				_localctx.e5 = numberParam();
				State = 1879;
				Match(WS);
				State = 1880;
				_localctx.e6 = numberParam();
				_localctx.value =  new TcModTransform(_localctx.e1.value, _localctx.e2.value, _localctx.e3.value, _localctx.e4.value, _localctx.e5.value, _localctx.e6.value);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1883;
				Match(TCMOD);
				State = 1884;
				Match(WS);
				State = 1885;
				Match(TURB);
				State = 1886;
				Match(WS);
				State = 1887;
				_localctx.f1 = numberParam();
				State = 1888;
				Match(WS);
				State = 1889;
				_localctx.f2 = numberParam();
				State = 1890;
				Match(WS);
				State = 1891;
				_localctx.f3 = numberParam();
				State = 1892;
				Match(WS);
				State = 1893;
				_localctx.f4 = numberParam();
				_localctx.value =  new TcModTurb(_localctx.f1.value, _localctx.f2.value, _localctx.f3.value, _localctx.f4.value);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DepthFuncDirectiveContext : ParserRuleContext {
		public DepthFunc value;
		public DepthFuncTypeContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPTHFUNC() { return GetToken(ShaderParser.DEPTHFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DepthFuncTypeContext depthFuncType() {
			return GetRuleContext<DepthFuncTypeContext>(0);
		}
		public DepthFuncDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_depthFuncDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterDepthFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitDepthFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDepthFuncDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DepthFuncDirectiveContext depthFuncDirective() {
		DepthFuncDirectiveContext _localctx = new DepthFuncDirectiveContext(Context, State);
		EnterRule(_localctx, 204, RULE_depthFuncDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			Match(DEPTHFUNC);
			State = 1899;
			Match(WS);
			State = 1900;
			_localctx.a = depthFuncType();
			_localctx.value =  new DepthFunc(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DepthWriteDirectiveContext : ParserRuleContext {
		public DepthWrite value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPTHWRITE() { return GetToken(ShaderParser.DEPTHWRITE, 0); }
		public DepthWriteDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_depthWriteDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterDepthWriteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitDepthWriteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDepthWriteDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DepthWriteDirectiveContext depthWriteDirective() {
		DepthWriteDirectiveContext _localctx = new DepthWriteDirectiveContext(Context, State);
		EnterRule(_localctx, 206, RULE_depthWriteDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903;
			Match(DEPTHWRITE);
			_localctx.value =  new DepthWrite();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailDirectiveContext : ParserRuleContext {
		public Detail value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETAIL() { return GetToken(ShaderParser.DETAIL, 0); }
		public DetailDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterDetailDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitDetailDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailDirectiveContext detailDirective() {
		DetailDirectiveContext _localctx = new DetailDirectiveContext(Context, State);
		EnterRule(_localctx, 208, RULE_detailDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906;
			Match(DETAIL);
			_localctx.value =  new Detail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlphaFuncDirectiveContext : ParserRuleContext {
		public AlphaFunc value;
		public AlphaFuncTypeContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHAFUNC() { return GetToken(ShaderParser.ALPHAFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ShaderParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlphaFuncTypeContext alphaFuncType() {
			return GetRuleContext<AlphaFuncTypeContext>(0);
		}
		public AlphaFuncDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alphaFuncDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterAlphaFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitAlphaFuncDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlphaFuncDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlphaFuncDirectiveContext alphaFuncDirective() {
		AlphaFuncDirectiveContext _localctx = new AlphaFuncDirectiveContext(Context, State);
		EnterRule(_localctx, 210, RULE_alphaFuncDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909;
			Match(ALPHAFUNC);
			State = 1910;
			Match(WS);
			State = 1911;
			_localctx.a = alphaFuncType();
			_localctx.value =  new AlphaFunc(_localctx.a.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolParamContext : ParserRuleContext {
		public bool value;
		public IToken a;
		public IToken b;
		public IToken c;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ShaderParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(ShaderParser.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(ShaderParser.SQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(ShaderParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(ShaderParser.DQUOTE, i);
		}
		public BoolParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterBoolParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitBoolParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolParamContext boolParam() {
		BoolParamContext _localctx = new BoolParamContext(Context, State);
		EnterRule(_localctx, 212, RULE_boolParam);
		try {
			State = 1924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1914;
				_localctx.a = Match(INT);
				_localctx.value =  (_localctx.a!=null?_localctx.a.Text:null).Equals("1");
				}
				break;
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1916;
				Match(SQUOTE);
				State = 1917;
				_localctx.b = Match(INT);
				State = 1918;
				Match(SQUOTE);
				_localctx.value =  (_localctx.b!=null?_localctx.b.Text:null).Equals("1");
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1920;
				Match(DQUOTE);
				State = 1921;
				_localctx.c = Match(INT);
				State = 1922;
				Match(DQUOTE);
				_localctx.value =  (_localctx.c!=null?_localctx.c.Text:null).Equals("1");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntParamContext : ParserRuleContext {
		public int value;
		public IToken a;
		public IToken b;
		public IToken c;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ShaderParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(ShaderParser.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(ShaderParser.SQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(ShaderParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(ShaderParser.DQUOTE, i);
		}
		public IntParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterIntParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitIntParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntParamContext intParam() {
		IntParamContext _localctx = new IntParamContext(Context, State);
		EnterRule(_localctx, 214, RULE_intParam);
		try {
			State = 1936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926;
				_localctx.a = Match(INT);
				_localctx.value =  int.Parse((_localctx.a!=null?_localctx.a.Text:null));
				}
				break;
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1928;
				Match(SQUOTE);
				State = 1929;
				_localctx.b = Match(INT);
				State = 1930;
				Match(SQUOTE);
				_localctx.value =  int.Parse((_localctx.b!=null?_localctx.b.Text:null));
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1932;
				Match(DQUOTE);
				State = 1933;
				_localctx.c = Match(INT);
				State = 1934;
				Match(DQUOTE);
				_localctx.value =  int.Parse((_localctx.c!=null?_localctx.c.Text:null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberParamContext : ParserRuleContext {
		public float value;
		public IToken a;
		public IToken b;
		public IToken c;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ShaderParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ShaderParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(ShaderParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(ShaderParser.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(ShaderParser.SQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(ShaderParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(ShaderParser.DQUOTE, i);
		}
		public NumberParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterNumberParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitNumberParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberParamContext numberParam() {
		NumberParamContext _localctx = new NumberParamContext(Context, State);
		EnterRule(_localctx, 216, RULE_numberParam);
		int _la;
		try {
			State = 1948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXP:
			case FLOAT:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1938;
				_localctx.a = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (EXP - 238)) | (1L << (FLOAT - 238)) | (1L << (INT - 238)))) != 0)) ) {
					_localctx.a = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				_localctx.value =  float.Parse((_localctx.a!=null?_localctx.a.Text:null), CultureInfo.GetCultureInfo("en-US"));
				}
				break;
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1940;
				Match(SQUOTE);
				State = 1941;
				_localctx.b = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (EXP - 238)) | (1L << (FLOAT - 238)) | (1L << (INT - 238)))) != 0)) ) {
					_localctx.b = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1942;
				Match(SQUOTE);
				_localctx.value =  float.Parse((_localctx.b!=null?_localctx.b.Text:null), CultureInfo.GetCultureInfo("en-US"));
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1944;
				Match(DQUOTE);
				State = 1945;
				_localctx.c = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (EXP - 238)) | (1L << (FLOAT - 238)) | (1L << (INT - 238)))) != 0)) ) {
					_localctx.c = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1946;
				Match(DQUOTE);
				_localctx.value =  float.Parse((_localctx.c!=null?_localctx.c.Text:null), CultureInfo.GetCultureInfo("en-US"));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathParamContext : ParserRuleContext {
		public string value;
		public IToken a;
		public IToken b;
		public IToken c;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(ShaderParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(ShaderParser.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(ShaderParser.SQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(ShaderParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(ShaderParser.DQUOTE, i);
		}
		public PathParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterPathParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitPathParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathParamContext pathParam() {
		PathParamContext _localctx = new PathParamContext(Context, State);
		EnterRule(_localctx, 218, RULE_pathParam);
		try {
			State = 1960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PATH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950;
				_localctx.a = Match(PATH);
				_localctx.value =  (_localctx.a!=null?_localctx.a.Text:null);
				}
				break;
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1952;
				Match(SQUOTE);
				State = 1953;
				_localctx.b = Match(PATH);
				State = 1954;
				Match(SQUOTE);
				_localctx.value =  (_localctx.b!=null?_localctx.b.Text:null);
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1956;
				Match(DQUOTE);
				State = 1957;
				_localctx.c = Match(PATH);
				State = 1958;
				Match(DQUOTE);
				_localctx.value =  (_localctx.c!=null?_localctx.c.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullTypeContext : ParserRuleContext {
		public CullType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRONT() { return GetToken(ShaderParser.FRONT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACK() { return GetToken(ShaderParser.BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(ShaderParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(ShaderParser.NONE, 0); }
		public CullTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterCullType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitCullType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullTypeContext cullType() {
		CullTypeContext _localctx = new CullTypeContext(Context, State);
		EnterRule(_localctx, 220, RULE_cullType);
		try {
			State = 1970;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FRONT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1962;
				Match(FRONT);
				_localctx.value =  CullType.Front;
				}
				break;
			case BACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1964;
				Match(BACK);
				_localctx.value =  CullType.Back;
				}
				break;
			case DISABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1966;
				Match(DISABLE);
				_localctx.value =  CullType.Disable;
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1968;
				Match(NONE);
				_localctx.value =  CullType.None;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaveFormFunctionTypeContext : ParserRuleContext {
		public WaveFormFunctionType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(ShaderParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIANGLE() { return GetToken(ShaderParser.TRIANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE() { return GetToken(ShaderParser.SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAWTOOTH() { return GetToken(ShaderParser.SAWTOOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVERSESAWTOOTH() { return GetToken(ShaderParser.INVERSESAWTOOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOISE() { return GetToken(ShaderParser.NOISE, 0); }
		public WaveFormFunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waveFormFunctionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterWaveFormFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitWaveFormFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaveFormFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaveFormFunctionTypeContext waveFormFunctionType() {
		WaveFormFunctionTypeContext _localctx = new WaveFormFunctionTypeContext(Context, State);
		EnterRule(_localctx, 222, RULE_waveFormFunctionType);
		try {
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1972;
				Match(SIN);
				_localctx.value =  WaveFormFunctionType.Sin;
				}
				break;
			case TRIANGLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1974;
				Match(TRIANGLE);
				_localctx.value =  WaveFormFunctionType.Triangle;
				}
				break;
			case SQUARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1976;
				Match(SQUARE);
				_localctx.value =  WaveFormFunctionType.Square;
				}
				break;
			case SAWTOOTH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1978;
				Match(SAWTOOTH);
				_localctx.value =  WaveFormFunctionType.SawTooth;
				}
				break;
			case INVERSESAWTOOTH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1980;
				Match(INVERSESAWTOOTH);
				_localctx.value =  WaveFormFunctionType.InverseSawTooth;
				}
				break;
			case NOISE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1982;
				Match(NOISE);
				_localctx.value =  WaveFormFunctionType.Noise;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortTypeContext : ParserRuleContext {
		public SortType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORTAL() { return GetToken(ShaderParser.PORTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKY() { return GetToken(ShaderParser.SKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAQUE() { return GetToken(ShaderParser.OPAQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANNER() { return GetToken(ShaderParser.BANNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERWATER() { return GetToken(ShaderParser.UNDERWATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDITIVE() { return GetToken(ShaderParser.ADDITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEAREST() { return GetToken(ShaderParser.NEAREST, 0); }
		public SortTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterSortType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitSortType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortTypeContext sortType() {
		SortTypeContext _localctx = new SortTypeContext(Context, State);
		EnterRule(_localctx, 224, RULE_sortType);
		try {
			State = 2000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PORTAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986;
				Match(PORTAL);
				_localctx.value =  SortType.Portal;
				}
				break;
			case SKY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1988;
				Match(SKY);
				_localctx.value =  SortType.Sky;
				}
				break;
			case OPAQUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1990;
				Match(OPAQUE);
				_localctx.value =  SortType.Opaque;
				}
				break;
			case BANNER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1992;
				Match(BANNER);
				_localctx.value =  SortType.Banner;
				}
				break;
			case UNDERWATER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1994;
				Match(UNDERWATER);
				_localctx.value =  SortType.UnderWater;
				}
				break;
			case ADDITIVE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1996;
				Match(ADDITIVE);
				_localctx.value =  SortType.Additive;
				}
				break;
			case NEAREST:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1998;
				Match(NEAREST);
				_localctx.value =  SortType.Nearest;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SurfaceParmTypeContext : ParserRuleContext {
		public SurfaceParmType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHASHADOW() { return GetToken(ShaderParser.ALPHASHADOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANTIPORTAL() { return GetToken(ShaderParser.ANTIPORTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREAPORTAL() { return GetToken(ShaderParser.AREAPORTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTCLIP() { return GetToken(ShaderParser.BOTCLIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERPORTAL() { return GetToken(ShaderParser.CLUSTERPORTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETAIL() { return GetToken(ShaderParser.DETAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONOTENTER() { return GetToken(ShaderParser.DONOTENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUST() { return GetToken(ShaderParser.DUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLESH() { return GetToken(ShaderParser.FLESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOG() { return GetToken(ShaderParser.FOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HINT() { return GetToken(ShaderParser.HINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LADDER() { return GetToken(ShaderParser.LADDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAVA() { return GetToken(ShaderParser.LAVA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHTFILTER() { return GetToken(ShaderParser.LIGHTFILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHTGRID() { return GetToken(ShaderParser.LIGHTGRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METALSTEPS() { return GetToken(ShaderParser.METALSTEPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONSTERCLIP() { return GetToken(ShaderParser.MONSTERCLIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODAMAGE() { return GetToken(ShaderParser.NODAMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODLIGHT() { return GetToken(ShaderParser.NODLIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODRAW() { return GetToken(ShaderParser.NODRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODROP() { return GetToken(ShaderParser.NODROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOIMPACT() { return GetToken(ShaderParser.NOIMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMARKS() { return GetToken(ShaderParser.NOMARKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOSTEPS() { return GetToken(ShaderParser.NOSTEPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONSOLID() { return GetToken(ShaderParser.NONSOLID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORIGIN() { return GetToken(ShaderParser.ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAYERCLIP() { return GetToken(ShaderParser.PLAYERCLIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTLIGHT() { return GetToken(ShaderParser.POINTLIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKY() { return GetToken(ShaderParser.SKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICK() { return GetToken(ShaderParser.SLICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLIME() { return GetToken(ShaderParser.SLIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP() { return GetToken(ShaderParser.STRIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURAL() { return GetToken(ShaderParser.STRUCTURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANS() { return GetToken(ShaderParser.TRANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATER() { return GetToken(ShaderParser.WATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIN() { return GetToken(ShaderParser.TIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALUMINIUM() { return GetToken(ShaderParser.ALUMINIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IRON() { return GetToken(ShaderParser.IRON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITANIUM() { return GetToken(ShaderParser.TITANIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEEL() { return GetToken(ShaderParser.STEEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPPER() { return GetToken(ShaderParser.COPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRASS() { return GetToken(ShaderParser.BRASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEMENT() { return GetToken(ShaderParser.CEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROCK() { return GetToken(ShaderParser.ROCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAVEL() { return GetToken(ShaderParser.GRAVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAVEMENT() { return GetToken(ShaderParser.PAVEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRICK() { return GetToken(ShaderParser.BRICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLAY() { return GetToken(ShaderParser.CLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRASS() { return GetToken(ShaderParser.GRASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRT() { return GetToken(ShaderParser.DIRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUD() { return GetToken(ShaderParser.MUD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNOW() { return GetToken(ShaderParser.SNOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ICE() { return GetToken(ShaderParser.ICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAND() { return GetToken(ShaderParser.SAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CERAMICTILE() { return GetToken(ShaderParser.CERAMICTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINOLEUM() { return GetToken(ShaderParser.LINOLEUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUG() { return GetToken(ShaderParser.RUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLASTER() { return GetToken(ShaderParser.PLASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLASTIC() { return GetToken(ShaderParser.PLASTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARDBOARD() { return GetToken(ShaderParser.CARDBOARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HARDWOOD() { return GetToken(ShaderParser.HARDWOOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOFTWOOD() { return GetToken(ShaderParser.SOFTWOOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANK() { return GetToken(ShaderParser.PLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLASS() { return GetToken(ShaderParser.GLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STUCCO() { return GetToken(ShaderParser.STUCCO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSKIP() { return GetToken(ShaderParser.SSKIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOLIGHTMAP() { return GetToken(ShaderParser.NOLIGHTMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONOPAQUE() { return GetToken(ShaderParser.NONOPAQUE, 0); }
		public SurfaceParmTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_surfaceParmType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterSurfaceParmType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitSurfaceParmType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSurfaceParmType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SurfaceParmTypeContext surfaceParmType() {
		SurfaceParmTypeContext _localctx = new SurfaceParmTypeContext(Context, State);
		EnterRule(_localctx, 226, RULE_surfaceParmType);
		try {
			State = 2138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALPHASHADOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2002;
				Match(ALPHASHADOW);
				_localctx.value =  SurfaceParmType.AlphaShadow;
				}
				break;
			case ANTIPORTAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2004;
				Match(ANTIPORTAL);
				_localctx.value =  SurfaceParmType.AntiPortal;
				}
				break;
			case AREAPORTAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2006;
				Match(AREAPORTAL);
				_localctx.value =  SurfaceParmType.AreaPortal;
				}
				break;
			case BOTCLIP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2008;
				Match(BOTCLIP);
				_localctx.value =  SurfaceParmType.BotClip;
				}
				break;
			case CLUSTERPORTAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2010;
				Match(CLUSTERPORTAL);
				_localctx.value =  SurfaceParmType.ClusterPortal;
				}
				break;
			case DETAIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2012;
				Match(DETAIL);
				_localctx.value =  SurfaceParmType.Detail;
				}
				break;
			case DONOTENTER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2014;
				Match(DONOTENTER);
				_localctx.value =  SurfaceParmType.DoNotEnter;
				}
				break;
			case DUST:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2016;
				Match(DUST);
				_localctx.value =  SurfaceParmType.Dust;
				}
				break;
			case FLESH:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2018;
				Match(FLESH);
				_localctx.value =  SurfaceParmType.Flesh;
				}
				break;
			case FOG:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2020;
				Match(FOG);
				_localctx.value =  SurfaceParmType.Fog;
				}
				break;
			case HINT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2022;
				Match(HINT);
				_localctx.value =  SurfaceParmType.Hint;
				}
				break;
			case LADDER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2024;
				Match(LADDER);
				_localctx.value =  SurfaceParmType.Ladder;
				}
				break;
			case LAVA:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2026;
				Match(LAVA);
				_localctx.value =  SurfaceParmType.Lava;
				}
				break;
			case LIGHTFILTER:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2028;
				Match(LIGHTFILTER);
				_localctx.value =  SurfaceParmType.LightFilter;
				}
				break;
			case LIGHTGRID:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2030;
				Match(LIGHTGRID);
				_localctx.value =  SurfaceParmType.LightGrid;
				}
				break;
			case METALSTEPS:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2032;
				Match(METALSTEPS);
				_localctx.value =  SurfaceParmType.MetalSteps;
				}
				break;
			case MONSTERCLIP:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2034;
				Match(MONSTERCLIP);
				_localctx.value =  SurfaceParmType.MonsterClip;
				}
				break;
			case NODAMAGE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2036;
				Match(NODAMAGE);
				_localctx.value =  SurfaceParmType.NoDamage;
				}
				break;
			case NODLIGHT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2038;
				Match(NODLIGHT);
				_localctx.value =  SurfaceParmType.NoDLight;
				}
				break;
			case NODRAW:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2040;
				Match(NODRAW);
				_localctx.value =  SurfaceParmType.NoDraw;
				}
				break;
			case NODROP:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2042;
				Match(NODROP);
				_localctx.value =  SurfaceParmType.NoDrop;
				}
				break;
			case NOIMPACT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2044;
				Match(NOIMPACT);
				_localctx.value =  SurfaceParmType.NoImpact;
				}
				break;
			case NOMARKS:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2046;
				Match(NOMARKS);
				_localctx.value =  SurfaceParmType.NoMarks;
				}
				break;
			case NOSTEPS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2048;
				Match(NOSTEPS);
				_localctx.value =  SurfaceParmType.NoSteps;
				}
				break;
			case NONSOLID:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2050;
				Match(NONSOLID);
				_localctx.value =  SurfaceParmType.NonSolid;
				}
				break;
			case ORIGIN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2052;
				Match(ORIGIN);
				_localctx.value =  SurfaceParmType.Origin;
				}
				break;
			case PLAYERCLIP:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2054;
				Match(PLAYERCLIP);
				_localctx.value =  SurfaceParmType.PlayerClip;
				}
				break;
			case POINTLIGHT:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2056;
				Match(POINTLIGHT);
				_localctx.value =  SurfaceParmType.PointLight;
				}
				break;
			case SKY:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2058;
				Match(SKY);
				_localctx.value =  SurfaceParmType.Sky;
				}
				break;
			case SLICK:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2060;
				Match(SLICK);
				_localctx.value =  SurfaceParmType.Slick;
				}
				break;
			case SLIME:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2062;
				Match(SLIME);
				_localctx.value =  SurfaceParmType.Slime;
				}
				break;
			case STRIP:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2064;
				Match(STRIP);
				_localctx.value =  SurfaceParmType.Strip;
				}
				break;
			case STRUCTURAL:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2066;
				Match(STRUCTURAL);
				_localctx.value =  SurfaceParmType.Structural;
				}
				break;
			case TRANS:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2068;
				Match(TRANS);
				_localctx.value =  SurfaceParmType.Trans;
				}
				break;
			case WATER:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2070;
				Match(WATER);
				_localctx.value =  SurfaceParmType.Water;
				}
				break;
			case TIN:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2072;
				Match(TIN);
				_localctx.value =  SurfaceParmType.Tin;
				}
				break;
			case ALUMINIUM:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2074;
				Match(ALUMINIUM);
				_localctx.value =  SurfaceParmType.Aluminium;
				}
				break;
			case IRON:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2076;
				Match(IRON);
				_localctx.value =  SurfaceParmType.Iron;
				}
				break;
			case TITANIUM:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2078;
				Match(TITANIUM);
				_localctx.value =  SurfaceParmType.Titanium;
				}
				break;
			case STEEL:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2080;
				Match(STEEL);
				_localctx.value =  SurfaceParmType.Steel;
				}
				break;
			case COPPER:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2082;
				Match(COPPER);
				_localctx.value =  SurfaceParmType.Copper;
				}
				break;
			case BRASS:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2084;
				Match(BRASS);
				_localctx.value =  SurfaceParmType.Brass;
				}
				break;
			case CEMENT:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2086;
				Match(CEMENT);
				_localctx.value =  SurfaceParmType.Cement;
				}
				break;
			case ROCK:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2088;
				Match(ROCK);
				_localctx.value =  SurfaceParmType.Rock;
				}
				break;
			case GRAVEL:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2090;
				Match(GRAVEL);
				_localctx.value =  SurfaceParmType.Gravel;
				}
				break;
			case PAVEMENT:
				EnterOuterAlt(_localctx, 46);
				{
				State = 2092;
				Match(PAVEMENT);
				_localctx.value =  SurfaceParmType.Pavement;
				}
				break;
			case BRICK:
				EnterOuterAlt(_localctx, 47);
				{
				State = 2094;
				Match(BRICK);
				_localctx.value =  SurfaceParmType.Brick;
				}
				break;
			case CLAY:
				EnterOuterAlt(_localctx, 48);
				{
				State = 2096;
				Match(CLAY);
				_localctx.value =  SurfaceParmType.Clay;
				}
				break;
			case GRASS:
				EnterOuterAlt(_localctx, 49);
				{
				State = 2098;
				Match(GRASS);
				_localctx.value =  SurfaceParmType.Grass;
				}
				break;
			case DIRT:
				EnterOuterAlt(_localctx, 50);
				{
				State = 2100;
				Match(DIRT);
				_localctx.value =  SurfaceParmType.Dirt;
				}
				break;
			case MUD:
				EnterOuterAlt(_localctx, 51);
				{
				State = 2102;
				Match(MUD);
				_localctx.value =  SurfaceParmType.Mud;
				}
				break;
			case SNOW:
				EnterOuterAlt(_localctx, 52);
				{
				State = 2104;
				Match(SNOW);
				_localctx.value =  SurfaceParmType.Snow;
				}
				break;
			case ICE:
				EnterOuterAlt(_localctx, 53);
				{
				State = 2106;
				Match(ICE);
				_localctx.value =  SurfaceParmType.Ice;
				}
				break;
			case SAND:
				EnterOuterAlt(_localctx, 54);
				{
				State = 2108;
				Match(SAND);
				_localctx.value =  SurfaceParmType.Sand;
				}
				break;
			case CERAMICTILE:
				EnterOuterAlt(_localctx, 55);
				{
				State = 2110;
				Match(CERAMICTILE);
				_localctx.value =  SurfaceParmType.CeramicTile;
				}
				break;
			case LINOLEUM:
				EnterOuterAlt(_localctx, 56);
				{
				State = 2112;
				Match(LINOLEUM);
				_localctx.value =  SurfaceParmType.Linoleum;
				}
				break;
			case RUG:
				EnterOuterAlt(_localctx, 57);
				{
				State = 2114;
				Match(RUG);
				_localctx.value =  SurfaceParmType.Rug;
				}
				break;
			case PLASTER:
				EnterOuterAlt(_localctx, 58);
				{
				State = 2116;
				Match(PLASTER);
				_localctx.value =  SurfaceParmType.Plaster;
				}
				break;
			case PLASTIC:
				EnterOuterAlt(_localctx, 59);
				{
				State = 2118;
				Match(PLASTIC);
				_localctx.value =  SurfaceParmType.Plastic;
				}
				break;
			case CARDBOARD:
				EnterOuterAlt(_localctx, 60);
				{
				State = 2120;
				Match(CARDBOARD);
				_localctx.value =  SurfaceParmType.CardBoard;
				}
				break;
			case HARDWOOD:
				EnterOuterAlt(_localctx, 61);
				{
				State = 2122;
				Match(HARDWOOD);
				_localctx.value =  SurfaceParmType.HardWood;
				}
				break;
			case SOFTWOOD:
				EnterOuterAlt(_localctx, 62);
				{
				State = 2124;
				Match(SOFTWOOD);
				_localctx.value =  SurfaceParmType.SoftWood;
				}
				break;
			case PLANK:
				EnterOuterAlt(_localctx, 63);
				{
				State = 2126;
				Match(PLANK);
				_localctx.value =  SurfaceParmType.Plank;
				}
				break;
			case GLASS:
				EnterOuterAlt(_localctx, 64);
				{
				State = 2128;
				Match(GLASS);
				_localctx.value =  SurfaceParmType.Glass;
				}
				break;
			case STUCCO:
				EnterOuterAlt(_localctx, 65);
				{
				State = 2130;
				Match(STUCCO);
				_localctx.value =  SurfaceParmType.Stucco;
				}
				break;
			case SSKIP:
				EnterOuterAlt(_localctx, 66);
				{
				State = 2132;
				Match(SSKIP);
				_localctx.value =  SurfaceParmType.Skip;
				}
				break;
			case NOLIGHTMAP:
				EnterOuterAlt(_localctx, 67);
				{
				State = 2134;
				Match(NOLIGHTMAP);
				_localctx.value =  SurfaceParmType.NoLightmap;
				}
				break;
			case NONOPAQUE:
				EnterOuterAlt(_localctx, 68);
				{
				State = 2136;
				Match(NONOPAQUE);
				_localctx.value =  SurfaceParmType.NonOpaque;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qer_alphaFuncTypeContext : ParserRuleContext {
		public QerAlphaFuncType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ShaderParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ShaderParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQUAL() { return GetToken(ShaderParser.GEQUAL, 0); }
		public Qer_alphaFuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qer_alphaFuncType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQer_alphaFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQer_alphaFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQer_alphaFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qer_alphaFuncTypeContext qer_alphaFuncType() {
		Qer_alphaFuncTypeContext _localctx = new Qer_alphaFuncTypeContext(Context, State);
		EnterRule(_localctx, 228, RULE_qer_alphaFuncType);
		try {
			State = 2146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GREATER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2140;
				Match(GREATER);
				_localctx.value =  QerAlphaFuncType.Greater;
				}
				break;
			case LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2142;
				Match(LESS);
				_localctx.value =  QerAlphaFuncType.Less;
				}
				break;
			case GEQUAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2144;
				Match(GEQUAL);
				_localctx.value =  QerAlphaFuncType.GEqual;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Q3map_lightmapAxisTypeContext : ParserRuleContext {
		public Q3MapLightmapAxisType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X() { return GetToken(ShaderParser.X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y() { return GetToken(ShaderParser.Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Z() { return GetToken(ShaderParser.Z, 0); }
		public Q3map_lightmapAxisTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_q3map_lightmapAxisType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterQ3map_lightmapAxisType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitQ3map_lightmapAxisType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQ3map_lightmapAxisType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Q3map_lightmapAxisTypeContext q3map_lightmapAxisType() {
		Q3map_lightmapAxisTypeContext _localctx = new Q3map_lightmapAxisTypeContext(Context, State);
		EnterRule(_localctx, 230, RULE_q3map_lightmapAxisType);
		try {
			State = 2154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case X:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2148;
				Match(X);
				_localctx.value =  Q3MapLightmapAxisType.X;
				}
				break;
			case Y:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2150;
				Match(Y);
				_localctx.value =  Q3MapLightmapAxisType.Y;
				}
				break;
			case Z:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2152;
				Match(Z);
				_localctx.value =  Q3MapLightmapAxisType.Z;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFuncSimplifiedTypeContext : ParserRuleContext {
		public BlendFuncSimplifiedType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ShaderParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLEND() { return GetToken(ShaderParser.BLEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(ShaderParser.FILTER, 0); }
		public BlendFuncSimplifiedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFuncSimplifiedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterBlendFuncSimplifiedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitBlendFuncSimplifiedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFuncSimplifiedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFuncSimplifiedTypeContext blendFuncSimplifiedType() {
		BlendFuncSimplifiedTypeContext _localctx = new BlendFuncSimplifiedTypeContext(Context, State);
		EnterRule(_localctx, 232, RULE_blendFuncSimplifiedType);
		try {
			State = 2162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2156;
				Match(ADD);
				_localctx.value =  BlendFuncSimplifiedType.Add;
				}
				break;
			case BLEND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2158;
				Match(BLEND);
				_localctx.value =  BlendFuncSimplifiedType.Blend;
				}
				break;
			case FILTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2160;
				Match(FILTER);
				_localctx.value =  BlendFuncSimplifiedType.Filter;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFuncExplicitSrcTypeContext : ParserRuleContext {
		public BlendFuncExplicitSrcType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE() { return GetToken(ShaderParser.GL_ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ZERO() { return GetToken(ShaderParser.GL_ZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_DST_COLOR() { return GetToken(ShaderParser.GL_DST_COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE_MINUS_DST_COLOR() { return GetToken(ShaderParser.GL_ONE_MINUS_DST_COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_SRC_ALPHA() { return GetToken(ShaderParser.GL_SRC_ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE_MINUS_SRC_ALPHA() { return GetToken(ShaderParser.GL_ONE_MINUS_SRC_ALPHA, 0); }
		public BlendFuncExplicitSrcTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFuncExplicitSrcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterBlendFuncExplicitSrcType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitBlendFuncExplicitSrcType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFuncExplicitSrcType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFuncExplicitSrcTypeContext blendFuncExplicitSrcType() {
		BlendFuncExplicitSrcTypeContext _localctx = new BlendFuncExplicitSrcTypeContext(Context, State);
		EnterRule(_localctx, 234, RULE_blendFuncExplicitSrcType);
		try {
			State = 2176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GL_ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2164;
				Match(GL_ONE);
				_localctx.value =  BlendFuncExplicitSrcType.GL_ONE;
				}
				break;
			case GL_ZERO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2166;
				Match(GL_ZERO);
				_localctx.value =  BlendFuncExplicitSrcType.GL_ZERO;
				}
				break;
			case GL_DST_COLOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2168;
				Match(GL_DST_COLOR);
				_localctx.value =  BlendFuncExplicitSrcType.GL_DST_COLOR;
				}
				break;
			case GL_ONE_MINUS_DST_COLOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2170;
				Match(GL_ONE_MINUS_DST_COLOR);
				_localctx.value =  BlendFuncExplicitSrcType.GL_ONE_MINUS_DST_COLOR;
				}
				break;
			case GL_SRC_ALPHA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2172;
				Match(GL_SRC_ALPHA);
				_localctx.value =  BlendFuncExplicitSrcType.GL_SRC_ALPHA;
				}
				break;
			case GL_ONE_MINUS_SRC_ALPHA:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2174;
				Match(GL_ONE_MINUS_SRC_ALPHA);
				_localctx.value =  BlendFuncExplicitSrcType.GL_ONE_MINUS_SRC_ALPHA;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFuncExplicitDestTypeContext : ParserRuleContext {
		public BlendFuncExplicitDestType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE() { return GetToken(ShaderParser.GL_ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ZERO() { return GetToken(ShaderParser.GL_ZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_SRC_COLOR() { return GetToken(ShaderParser.GL_SRC_COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE_MINUS_SRC_COLOR() { return GetToken(ShaderParser.GL_ONE_MINUS_SRC_COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_SRC_ALPHA() { return GetToken(ShaderParser.GL_SRC_ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE_MINUS_SRC_ALPHA() { return GetToken(ShaderParser.GL_ONE_MINUS_SRC_ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GL_ONE_MINUS_DST_ALPHA() { return GetToken(ShaderParser.GL_ONE_MINUS_DST_ALPHA, 0); }
		public BlendFuncExplicitDestTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFuncExplicitDestType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterBlendFuncExplicitDestType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitBlendFuncExplicitDestType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFuncExplicitDestType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFuncExplicitDestTypeContext blendFuncExplicitDestType() {
		BlendFuncExplicitDestTypeContext _localctx = new BlendFuncExplicitDestTypeContext(Context, State);
		EnterRule(_localctx, 236, RULE_blendFuncExplicitDestType);
		try {
			State = 2192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GL_ONE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2178;
				Match(GL_ONE);
				_localctx.value =  BlendFuncExplicitDestType.GL_ONE;
				}
				break;
			case GL_ZERO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2180;
				Match(GL_ZERO);
				_localctx.value =  BlendFuncExplicitDestType.GL_ZERO;
				}
				break;
			case GL_SRC_COLOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2182;
				Match(GL_SRC_COLOR);
				_localctx.value =  BlendFuncExplicitDestType.GL_SRC_COLOR;
				}
				break;
			case GL_ONE_MINUS_SRC_COLOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2184;
				Match(GL_ONE_MINUS_SRC_COLOR);
				_localctx.value =  BlendFuncExplicitDestType.GL_ONE_MINUS_SRC_COLOR;
				}
				break;
			case GL_SRC_ALPHA:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2186;
				Match(GL_SRC_ALPHA);
				_localctx.value =  BlendFuncExplicitDestType.GL_SRC_ALPHA;
				}
				break;
			case GL_ONE_MINUS_SRC_ALPHA:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2188;
				Match(GL_ONE_MINUS_SRC_ALPHA);
				_localctx.value =  BlendFuncExplicitDestType.GL_ONE_MINUS_SRC_ALPHA;
				}
				break;
			case GL_ONE_MINUS_DST_ALPHA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2190;
				Match(GL_ONE_MINUS_DST_ALPHA);
				_localctx.value =  BlendFuncExplicitDestType.GL_ONE_MINUS_DST_ALPHA;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DepthFuncTypeContext : ParserRuleContext {
		public DepthFuncType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQUAL() { return GetToken(ShaderParser.LEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ShaderParser.EQUAL, 0); }
		public DepthFuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_depthFuncType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterDepthFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitDepthFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDepthFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DepthFuncTypeContext depthFuncType() {
		DepthFuncTypeContext _localctx = new DepthFuncTypeContext(Context, State);
		EnterRule(_localctx, 238, RULE_depthFuncType);
		try {
			State = 2198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2194;
				Match(LEQUAL);
				_localctx.value =  DepthFuncType.LEqual;
				}
				break;
			case EQUAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2196;
				Match(EQUAL);
				_localctx.value =  DepthFuncType.Equal;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlphaFuncTypeContext : ParserRuleContext {
		public AlphaFuncType value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT0() { return GetToken(ShaderParser.GT0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT128() { return GetToken(ShaderParser.LT128, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE128() { return GetToken(ShaderParser.GE128, 0); }
		public AlphaFuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alphaFuncType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.EnterAlphaFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IShaderListener typedListener = listener as IShaderListener;
			if (typedListener != null) typedListener.ExitAlphaFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderVisitor<TResult> typedVisitor = visitor as IShaderVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlphaFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlphaFuncTypeContext alphaFuncType() {
		AlphaFuncTypeContext _localctx = new AlphaFuncTypeContext(Context, State);
		EnterRule(_localctx, 240, RULE_alphaFuncType);
		try {
			State = 2206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GT0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2200;
				Match(GT0);
				_localctx.value =  AlphaFuncType.GT0;
				}
				break;
			case LT128:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2202;
				Match(LT128);
				_localctx.value =  AlphaFuncType.LT128;
				}
				break;
			case GE128:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2204;
				Match(GE128);
				_localctx.value =  AlphaFuncType.GE128;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x101', '\x8A3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\xF9', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '\xFC', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xFF', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x103', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x106', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x10B', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x10E', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x115', '\n', '\x3', '\x3', '\x3', '\x6', '\x3', '\x118', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\x119', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', '\x11E', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x11F', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x125', '\n', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x128', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x12B', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x12F', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x132', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x137', '\n', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\x13A', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x13D', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x141', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x144', '\v', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x14B', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x14E', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x152', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x155', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '\x15A', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x15D', '\v', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x161', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x164', '\v', '\x4', '\x5', '\x4', '\x166', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x16E', '\n', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x171', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x174', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x178', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x17B', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x180', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x183', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x189', '\n', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x18C', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x18F', '\v', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x193', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x196', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x19B', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x19E', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x1A4', '\n', '\a', '\x3', '\a', '\a', '\a', '\x1A7', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\x1AA', '\v', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x1AE', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x1B1', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x1B6', '\n', '\a', '\f', '\a', '\xE', '\a', '\x1B9', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x1C7', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x1ED', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x1F6', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x253', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x257', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x25B', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x263', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x267', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x27F', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x286', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x28D', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x29B', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x372', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x37F', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x383', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x38B', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x394', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x398', '\n', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x3A0', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x3B7', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x3E0', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x3E4', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x3EC', '\n', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x3F5', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x3F9', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x401', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x40A', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x40E', 
		'\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x416', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x41F', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x4BD', '\n', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x4C1', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x5', '\x43', '\x4C9', '\n', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x4D2', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x4D6', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4DE', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4E7', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x4EB', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x4F3', '\n', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x4FC', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x551', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x555', '\n', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x5', 'N', '\x55D', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x561', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x565', '\n', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x5', 'N', '\x56D', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x576', '\n', 
		'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x57A', '\n', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x582', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x586', '\n', 
		'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x58A', '\n', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x592', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x597', 
		'\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x5', 'O', '\x5C4', '\n', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x5FD', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x5', '^', '\x63A', '\n', '^', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', 
		'\x649', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x6', '\x61', '\x658', 
		'\n', '\x61', '\r', '\x61', '\xE', '\x61', '\x659', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', '\x66F', '\n', '\x63', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', 
		'\x6AC', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x6B0', 
		'\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x6B8', '\n', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x6BD', '\n', '\x64', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', 
		'\x6F0', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x702', '\n', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x706', '\n', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x5', '\x66', '\x70E', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x5', '\x66', '\x712', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', 
		'\x66', '\x716', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x71E', '\n', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x723', 
		'\n', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', 
		'\x76B', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x787', '\n', 'l', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x793', '\n', 
		'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x79F', 
		'\n', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', 
		'\x7AB', '\n', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x7B5', '\n', 'p', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x5', 'q', '\x7C3', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x7D3', 
		'\n', 'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x5', 's', 
		'\x85D', '\n', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 
		't', '\x3', 't', '\x5', 't', '\x865', '\n', 't', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x86D', '\n', 
		'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 
		'v', '\x5', 'v', '\x875', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x883', '\n', 'w', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x5', 'x', '\x893', '\n', 'x', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x5', 'y', '\x899', '\n', 'y', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\x8A1', 
		'\n', 'z', '\x3', 'z', '\x2', '\x2', '{', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\x2', '\x4', '\x3', '\x2', '\xFB', '\xFC', '\x3', '\x2', 
		'\xF0', '\xF2', '\x2', '\x97A', '\x2', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x6', '\x147', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x169', '\x3', '\x2', '\x2', '\x2', '\n', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1EC', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x14', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x26E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x271', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x274', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x29A', '\x3', '\x2', '\x2', '\x2', '$', '\x29C', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x2A1', '\x3', '\x2', '\x2', '\x2', '(', '\x2A6', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		',', '\x371', '\x3', '\x2', '\x2', '\x2', '.', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x32', '\x3B8', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x3BD', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x38', '\x3C9', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x3CE', '\x3', '\x2', '\x2', '\x2', '<', '\x3D3', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x3D6', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41E', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x420', '\x3', '\x2', '\x2', '\x2', '\x46', '\x42B', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x437', '\x3', '\x2', '\x2', '\x2', 'L', '\x43A', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x443', '\x3', '\x2', '\x2', '\x2', 'P', '\x446', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x449', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x44C', '\x3', '\x2', '\x2', '\x2', 'V', '\x451', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x456', '\x3', '\x2', '\x2', '\x2', 'Z', '\x45B', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x462', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x467', '\x3', '\x2', '\x2', '\x2', '`', '\x46A', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x64', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x47B', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x484', '\x3', '\x2', '\x2', '\x2', 'j', '\x489', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x48E', '\x3', '\x2', '\x2', '\x2', 'n', '\x491', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x494', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x497', '\x3', '\x2', '\x2', '\x2', 't', '\x49A', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x49D', '\x3', '\x2', '\x2', '\x2', 'x', '\x4A2', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x4A5', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x4A8', '\x3', '\x2', '\x2', '\x2', '~', '\x4AB', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x82', '\x4B3', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x4B8', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x88', '\x4FD', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x502', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x509', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x50C', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x512', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x521', '\x3', '\x2', '\x2', '\x2', '\x96', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x539', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x596', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x5C3', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x5C8', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x5CD', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x5D7', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x5DF', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x5FC', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x603', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x606', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x60B', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x639', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x648', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x64A', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x64F', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x65D', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x66E', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x6EF', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\x76A', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x76C', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\x771', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x774', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\x777', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\x786', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x792', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\x79E', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x7AA', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\x7B4', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x7D2', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\x85C', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x864', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\x86C', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\x874', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x882', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\x892', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x898', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\x8A0', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xF8', '\b', '\x2', '\x1', '\x2', '\xF5', '\xF6', '\x5', '\x4', 
		'\x3', '\x2', '\xF6', '\xF7', '\b', '\x2', '\x1', '\x2', '\xF7', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\x10C', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFC', '\a', '\xFB', '\x2', '\x2', '\xFB', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x104', '\a', '\xFC', '\x2', '\x2', 
		'\x101', '\x103', '\t', '\x2', '\x2', '\x2', '\x102', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x5', '\x4', '\x3', '\x2', 
		'\x108', '\x109', '\b', '\x2', '\x1', '\x2', '\x109', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\b', '\x3', '\x1', '\x2', '\x110', '\x111', '\x5', '\xDC', 'o', 
		'\x2', '\x111', '\x114', '\b', '\x3', '\x1', '\x2', '\x112', '\x113', 
		'\a', '\xEE', '\x2', '\x2', '\x113', '\x115', '\b', '\x3', '\x1', '\x2', 
		'\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x117', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x118', '\t', '\x2', '\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x124', '\a', 
		'\xF5', '\x2', '\x2', '\x11C', '\x11E', '\t', '\x2', '\x2', '\x2', '\x11D', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\x5', '\b', '\x5', '\x2', '\x122', '\x123', '\b', '\x3', 
		'\x1', '\x2', '\x123', '\x125', '\x3', '\x2', '\x2', '\x2', '\x124', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x136', '\x3', '\x2', '\x2', '\x2', '\x126', '\x128', '\a', 
		'\xFB', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x130', '\a', '\xFC', '\x2', '\x2', '\x12D', '\x12F', '\t', 
		'\x2', '\x2', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x5', '\n', '\x6', '\x2', '\x134', '\x135', '\b', '\x3', 
		'\x1', '\x2', '\x135', '\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\a', 
		'\xFB', '\x2', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x142', '\a', '\xFC', '\x2', '\x2', '\x13F', '\x141', '\t', 
		'\x2', '\x2', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x146', '\a', '\xF6', '\x2', '\x2', '\x146', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x147', '\x148', '\b', '\x4', '\x1', '\x2', '\x148', '\x165', 
		'\a', '\xF5', '\x2', '\x2', '\x149', '\x14B', '\a', '\xFB', '\x2', '\x2', 
		'\x14A', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x153', 
		'\a', '\xFC', '\x2', '\x2', '\x150', '\x152', '\t', '\x2', '\x2', '\x2', 
		'\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', 
		'\x5', '\f', '\a', '\x2', '\x157', '\x15B', '\b', '\x4', '\x1', '\x2', 
		'\x158', '\x15A', '\a', '\xFB', '\x2', '\x2', '\x159', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x162', '\a', '\xFC', '\x2', '\x2', 
		'\x15F', '\x161', '\t', '\x2', '\x2', '\x2', '\x160', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x166', '\x3', '\x2', '\x2', '\x2', '\x164', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x168', '\a', '\xF6', '\x2', '\x2', '\x168', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16D', '\b', '\x5', '\x1', 
		'\x2', '\x16A', '\x16B', '\x5', '\xE', '\b', '\x2', '\x16B', '\x16C', 
		'\b', '\x5', '\x1', '\x2', '\x16C', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x181', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x171', '\a', '\xFB', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x175', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x175', '\x179', '\a', '\xFC', '\x2', '\x2', '\x176', 
		'\x178', '\t', '\x2', '\x2', '\x2', '\x177', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x179', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17D', '\x5', '\xE', '\b', '\x2', '\x17D', 
		'\x17E', '\b', '\x5', '\x1', '\x2', '\x17E', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x180', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x184', '\x188', 
		'\b', '\x6', '\x1', '\x2', '\x185', '\x186', '\x5', '\x6', '\x4', '\x2', 
		'\x186', '\x187', '\b', '\x6', '\x1', '\x2', '\x187', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x185', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x18C', '\a', '\xFB', '\x2', '\x2', '\x18B', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x190', '\x194', '\a', '\xFC', '\x2', 
		'\x2', '\x191', '\x193', '\t', '\x2', '\x2', '\x2', '\x192', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x197', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x5', '\x6', '\x4', 
		'\x2', '\x198', '\x199', '\b', '\x6', '\x1', '\x2', '\x199', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A3', '\b', '\a', '\x1', '\x2', '\x1A0', '\x1A1', '\x5', 
		'\xBA', '^', '\x2', '\x1A1', '\x1A2', '\b', '\a', '\x1', '\x2', '\x1A2', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\a', '\xFB', '\x2', '\x2', 
		'\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AF', 
		'\a', '\xFC', '\x2', '\x2', '\x1AC', '\x1AE', '\t', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\x5', '\xBA', '^', '\x2', '\x1B3', '\x1B4', '\b', '\a', '\x1', '\x2', 
		'\x1B4', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\r', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', '\x10', '\t', '\x2', '\x1BB', 
		'\x1BC', '\b', '\b', '\x1', '\x2', '\x1BC', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\x5', '*', '\x16', '\x2', '\x1BE', '\x1BF', 
		'\b', '\b', '\x1', '\x2', '\x1BF', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x5', ',', '\x17', '\x2', '\x1C1', '\x1C2', '\b', '\b', 
		'\x1', '\x2', '\x1C2', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', '\xB0', 'Y', '\x2', '\x1C4', '\x1C5', '\b', '\b', '\x1', '\x2', 
		'\x1C5', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C7', '\xF', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x5', 
		'\x12', '\n', '\x2', '\x1C9', '\x1CA', '\b', '\t', '\x1', '\x2', '\x1CA', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x5', '\x14', 
		'\v', '\x2', '\x1CC', '\x1CD', '\b', '\t', '\x1', '\x2', '\x1CD', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x5', '\x16', '\f', '\x2', 
		'\x1CF', '\x1D0', '\b', '\t', '\x1', '\x2', '\x1D0', '\x1ED', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D2', '\x5', '\x18', '\r', '\x2', '\x1D2', '\x1D3', 
		'\b', '\t', '\x1', '\x2', '\x1D3', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1D5', '\x5', '\x1A', '\xE', '\x2', '\x1D5', '\x1D6', '\b', 
		'\t', '\x1', '\x2', '\x1D6', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\x5', '\x1C', '\xF', '\x2', '\x1D8', '\x1D9', '\b', '\t', '\x1', 
		'\x2', '\x1D9', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', 
		'\x5', '\x1E', '\x10', '\x2', '\x1DB', '\x1DC', '\b', '\t', '\x1', '\x2', 
		'\x1DC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x5', 
		' ', '\x11', '\x2', '\x1DE', '\x1DF', '\b', '\t', '\x1', '\x2', '\x1DF', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x5', '\"', '\x12', 
		'\x2', '\x1E1', '\x1E2', '\b', '\t', '\x1', '\x2', '\x1E2', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '$', '\x13', '\x2', '\x1E4', 
		'\x1E5', '\b', '\t', '\x1', '\x2', '\x1E5', '\x1ED', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E7', '\x5', '&', '\x14', '\x2', '\x1E7', '\x1E8', 
		'\b', '\t', '\x1', '\x2', '\x1E8', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1EA', '\x5', '(', '\x15', '\x2', '\x1EA', '\x1EB', '\b', '\t', 
		'\x1', '\x2', '\x1EB', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1EC', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1EF', '\a', '\x1F', '\x2', '\x2', '\x1EF', '\x1F6', '\b', '\n', '\x1', 
		'\x2', '\x1F0', '\x1F1', '\a', '\x1F', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\a', '\xFB', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', '\xDE', 'p', '\x2', 
		'\x1F3', '\x1F4', '\b', '\n', '\x1', '\x2', '\x1F4', '\x1F6', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\a', ' ', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\xFB', 
		'\x2', '\x2', '\x1F9', '\x1FA', '\a', '\f', '\x2', '\x2', '\x1FA', '\x253', 
		'\b', '\v', '\x1', '\x2', '\x1FB', '\x1FC', '\a', ' ', '\x2', '\x2', '\x1FC', 
		'\x1FD', '\a', '\xFB', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\r', '\x2', 
		'\x2', '\x1FE', '\x253', '\b', '\v', '\x1', '\x2', '\x1FF', '\x200', '\a', 
		' ', '\x2', '\x2', '\x200', '\x201', '\a', '\xFB', '\x2', '\x2', '\x201', 
		'\x202', '\a', '\x16', '\x2', '\x2', '\x202', '\x203', '\a', '\xFB', '\x2', 
		'\x2', '\x203', '\x204', '\x5', '\xDA', 'n', '\x2', '\x204', '\x205', 
		'\a', '\xFB', '\x2', '\x2', '\x205', '\x206', '\x5', '\xDA', 'n', '\x2', 
		'\x206', '\x207', '\a', '\xFB', '\x2', '\x2', '\x207', '\x208', '\x5', 
		'\xDA', 'n', '\x2', '\x208', '\x209', '\b', '\v', '\x1', '\x2', '\x209', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\a', ' ', '\x2', 
		'\x2', '\x20B', '\x20C', '\a', '\xFB', '\x2', '\x2', '\x20C', '\x20D', 
		'\a', '^', '\x2', '\x2', '\x20D', '\x20E', '\a', '\xFB', '\x2', '\x2', 
		'\x20E', '\x20F', '\x5', '\xDA', 'n', '\x2', '\x20F', '\x210', '\a', '\xFB', 
		'\x2', '\x2', '\x210', '\x211', '\x5', '\xDA', 'n', '\x2', '\x211', '\x212', 
		'\a', '\xFB', '\x2', '\x2', '\x212', '\x213', '\x5', '\xDA', 'n', '\x2', 
		'\x213', '\x214', '\a', '\xFB', '\x2', '\x2', '\x214', '\x215', '\x5', 
		'\xE0', 'q', '\x2', '\x215', '\x216', '\a', '\xFB', '\x2', '\x2', '\x216', 
		'\x217', '\x5', '\xDA', 'n', '\x2', '\x217', '\x218', '\a', '\xFB', '\x2', 
		'\x2', '\x218', '\x219', '\x5', '\xDA', 'n', '\x2', '\x219', '\x21A', 
		'\a', '\xFB', '\x2', '\x2', '\x21A', '\x21B', '\x5', '\xDA', 'n', '\x2', 
		'\x21B', '\x21C', '\a', '\xFB', '\x2', '\x2', '\x21C', '\x21D', '\x5', 
		'\xDA', 'n', '\x2', '\x21D', '\x21E', '\b', '\v', '\x1', '\x2', '\x21E', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\a', ' ', '\x2', 
		'\x2', '\x220', '\x221', '\a', '\xFB', '\x2', '\x2', '\x221', '\x222', 
		'\a', 'n', '\x2', '\x2', '\x222', '\x223', '\a', '\xFB', '\x2', '\x2', 
		'\x223', '\x224', '\x5', '\xDA', 'n', '\x2', '\x224', '\x225', '\a', '\xFB', 
		'\x2', '\x2', '\x225', '\x226', '\x5', '\xE0', 'q', '\x2', '\x226', '\x227', 
		'\a', '\xFB', '\x2', '\x2', '\x227', '\x228', '\x5', '\xDA', 'n', '\x2', 
		'\x228', '\x229', '\a', '\xFB', '\x2', '\x2', '\x229', '\x22A', '\x5', 
		'\xDA', 'n', '\x2', '\x22A', '\x22B', '\a', '\xFB', '\x2', '\x2', '\x22B', 
		'\x22C', '\x5', '\xDA', 'n', '\x2', '\x22C', '\x22D', '\b', '\v', '\x1', 
		'\x2', '\x22D', '\x253', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', 
		'\a', ' ', '\x2', '\x2', '\x22F', '\x230', '\a', '\xFB', '\x2', '\x2', 
		'\x230', '\x231', '\a', 'n', '\x2', '\x2', '\x231', '\x232', '\a', '\xFB', 
		'\x2', '\x2', '\x232', '\x233', '\x5', '\xDA', 'n', '\x2', '\x233', '\x234', 
		'\a', '\xFB', '\x2', '\x2', '\x234', '\x235', '\x5', '\xDA', 'n', '\x2', 
		'\x235', '\x236', '\b', '\v', '\x1', '\x2', '\x236', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x237', '\x238', '\a', ' ', '\x2', '\x2', '\x238', '\x239', 
		'\a', '\xFB', '\x2', '\x2', '\x239', '\x23A', '\a', '\xED', '\x2', '\x2', 
		'\x23A', '\x23B', '\a', '\xFB', '\x2', '\x2', '\x23B', '\x23C', '\x5', 
		'\xDA', 'n', '\x2', '\x23C', '\x23D', '\a', '\xFB', '\x2', '\x2', '\x23D', 
		'\x23E', '\x5', '\xE0', 'q', '\x2', '\x23E', '\x23F', '\a', '\xFB', '\x2', 
		'\x2', '\x23F', '\x240', '\x5', '\xDA', 'n', '\x2', '\x240', '\x241', 
		'\a', '\xFB', '\x2', '\x2', '\x241', '\x242', '\x5', '\xDA', 'n', '\x2', 
		'\x242', '\x243', '\a', '\xFB', '\x2', '\x2', '\x243', '\x244', '\x5', 
		'\xDA', 'n', '\x2', '\x244', '\x245', '\a', '\xFB', '\x2', '\x2', '\x245', 
		'\x246', '\x5', '\xDA', 'n', '\x2', '\x246', '\x247', '\b', '\v', '\x1', 
		'\x2', '\x247', '\x253', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', 
		'\a', ' ', '\x2', '\x2', '\x249', '\x24A', '\a', '\xFB', '\x2', '\x2', 
		'\x24A', '\x24B', '\a', '\xDC', '\x2', '\x2', '\x24B', '\x24C', '\x5', 
		'\xD8', 'm', '\x2', '\x24C', '\x24D', '\b', '\v', '\x1', '\x2', '\x24D', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\a', ' ', '\x2', 
		'\x2', '\x24F', '\x250', '\a', '\xFB', '\x2', '\x2', '\x250', '\x251', 
		'\a', '|', '\x2', '\x2', '\x251', '\x253', '\b', '\v', '\x1', '\x2', '\x252', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x252', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x252', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x252', '\x237', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x248', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x253', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x256', '\a', '\x34', '\x2', '\x2', '\x255', '\x257', 
		'\a', '\xFB', '\x2', '\x2', '\x256', '\x255', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x25A', '\a', '\xF7', '\x2', '\x2', '\x259', 
		'\x25B', '\a', '\xFB', '\x2', '\x2', '\x25A', '\x259', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x5', '\xDA', 'n', '\x2', 
		'\x25D', '\x25E', '\a', '\xFB', '\x2', '\x2', '\x25E', '\x25F', '\x5', 
		'\xDA', 'n', '\x2', '\x25F', '\x260', '\a', '\xFB', '\x2', '\x2', '\x260', 
		'\x262', '\x5', '\xDA', 'n', '\x2', '\x261', '\x263', '\a', '\xFB', '\x2', 
		'\x2', '\x262', '\x261', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x266', '\a', '\xF8', '\x2', '\x2', '\x265', '\x267', '\a', 
		'\xFB', '\x2', '\x2', '\x266', '\x265', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x269', '\x5', '\xDA', 'n', '\x2', '\x269', '\x26A', 
		'\b', '\f', '\x1', '\x2', '\x26A', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', '\x26C', '\a', 'i', '\x2', '\x2', '\x26C', '\x26D', '\b', '\r', 
		'\x1', '\x2', '\x26D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', 
		'\a', 'm', '\x2', '\x2', '\x26F', '\x270', '\b', '\xE', '\x1', '\x2', 
		'\x270', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', '\a', 'z', 
		'\x2', '\x2', '\x272', '\x273', '\b', '\xF', '\x1', '\x2', '\x273', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\a', '{', '\x2', '\x2', 
		'\x275', '\x276', '\b', '\x10', '\x1', '\x2', '\x276', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x278', '\b', '\x11', '\x1', '\x2', '\x278', 
		'\x279', '\a', '\xCF', '\x2', '\x2', '\x279', '\x27E', '\a', '\xFB', '\x2', 
		'\x2', '\x27A', '\x27F', '\a', '\xEF', '\x2', '\x2', '\x27B', '\x27C', 
		'\x5', '\xDC', 'o', '\x2', '\x27C', '\x27D', '\b', '\x11', '\x1', '\x2', 
		'\x27D', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27F', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x280', '\x285', '\a', '\xFB', '\x2', 
		'\x2', '\x281', '\x286', '\a', '\xEF', '\x2', '\x2', '\x282', '\x283', 
		'\x5', '\xDA', 'n', '\x2', '\x283', '\x284', '\b', '\x11', '\x1', '\x2', 
		'\x284', '\x286', '\x3', '\x2', '\x2', '\x2', '\x285', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x282', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x287', '\x3', '\x2', '\x2', '\x2', '\x287', '\x28C', '\a', '\xFB', '\x2', 
		'\x2', '\x288', '\x28D', '\a', '\xEF', '\x2', '\x2', '\x289', '\x28A', 
		'\x5', '\xDC', 'o', '\x2', '\x28A', '\x28B', '\b', '\x11', '\x1', '\x2', 
		'\x28B', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x289', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x28E', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\b', '\x11', '\x1', 
		'\x2', '\x28F', '!', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\a', 
		'\xD4', '\x2', '\x2', '\x291', '\x292', '\a', '\xFB', '\x2', '\x2', '\x292', 
		'\x293', '\x5', '\xE2', 'r', '\x2', '\x293', '\x294', '\b', '\x12', '\x1', 
		'\x2', '\x294', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x295', '\x296', 
		'\a', '\xD4', '\x2', '\x2', '\x296', '\x297', '\a', '\xFB', '\x2', '\x2', 
		'\x297', '\x298', '\x5', '\xD8', 'm', '\x2', '\x298', '\x299', '\b', '\x12', 
		'\x1', '\x2', '\x299', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x295', '\x3', '\x2', '\x2', '\x2', 
		'\x29B', '#', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', '\a', '\xDF', 
		'\x2', '\x2', '\x29D', '\x29E', '\a', '\xFB', '\x2', '\x2', '\x29E', '\x29F', 
		'\x5', '\xDA', 'n', '\x2', '\x29F', '\x2A0', '\b', '\x13', '\x1', '\x2', 
		'\x2A0', '%', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\a', 'S', 
		'\x2', '\x2', '\x2A2', '\x2A3', '\a', '\xFB', '\x2', '\x2', '\x2A3', '\x2A4', 
		'\x5', '\xD8', 'm', '\x2', '\x2A4', '\x2A5', '\b', '\x14', '\x1', '\x2', 
		'\x2A5', '\'', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\a', '-', 
		'\x2', '\x2', '\x2A7', '\x2A8', '\b', '\x15', '\x1', '\x2', '\x2A8', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\a', '\xDB', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\a', '\xFB', '\x2', '\x2', '\x2AB', '\x2AC', '\x5', 
		'\xE4', 's', '\x2', '\x2AC', '\x2AD', '\b', '\x16', '\x1', '\x2', '\x2AD', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\x5', '.', '\x18', 
		'\x2', '\x2AF', '\x2B0', '\b', '\x17', '\x1', '\x2', '\x2B0', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', '\x30', '\x19', '\x2', 
		'\x2B2', '\x2B3', '\b', '\x17', '\x1', '\x2', '\x2B3', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', '\x32', '\x1A', '\x2', '\x2B5', 
		'\x2B6', '\b', '\x17', '\x1', '\x2', '\x2B6', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x2B7', '\x2B8', '\x5', '\x34', '\x1B', '\x2', '\x2B8', '\x2B9', 
		'\b', '\x17', '\x1', '\x2', '\x2B9', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x2BA', '\x2BB', '\x5', '\x36', '\x1C', '\x2', '\x2BB', '\x2BC', '\b', 
		'\x17', '\x1', '\x2', '\x2BC', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2BE', '\x5', '\x38', '\x1D', '\x2', '\x2BE', '\x2BF', '\b', '\x17', 
		'\x1', '\x2', '\x2BF', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', 
		'\x5', ':', '\x1E', '\x2', '\x2C1', '\x2C2', '\b', '\x17', '\x1', '\x2', 
		'\x2C2', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', 
		'<', '\x1F', '\x2', '\x2C4', '\x2C5', '\b', '\x17', '\x1', '\x2', '\x2C5', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C7', '\x5', '>', ' ', 
		'\x2', '\x2C7', '\x2C8', '\b', '\x17', '\x1', '\x2', '\x2C8', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\x5', '@', '!', '\x2', 
		'\x2CA', '\x2CB', '\b', '\x17', '\x1', '\x2', '\x2CB', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CD', '\x5', '\x42', '\"', '\x2', '\x2CD', 
		'\x2CE', '\b', '\x17', '\x1', '\x2', '\x2CE', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D0', '\x5', '\x44', '#', '\x2', '\x2D0', '\x2D1', 
		'\b', '\x17', '\x1', '\x2', '\x2D1', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x2D2', '\x2D3', '\x5', '\x46', '$', '\x2', '\x2D3', '\x2D4', '\b', '\x17', 
		'\x1', '\x2', '\x2D4', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', 
		'\x5', 'H', '%', '\x2', '\x2D6', '\x2D7', '\b', '\x17', '\x1', '\x2', 
		'\x2D7', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x5', 
		'J', '&', '\x2', '\x2D9', '\x2DA', '\b', '\x17', '\x1', '\x2', '\x2DA', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x5', 'L', '\'', 
		'\x2', '\x2DC', '\x2DD', '\b', '\x17', '\x1', '\x2', '\x2DD', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\x5', 'N', '(', '\x2', 
		'\x2DF', '\x2E0', '\b', '\x17', '\x1', '\x2', '\x2E0', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\x5', 'P', ')', '\x2', '\x2E2', 
		'\x2E3', '\b', '\x17', '\x1', '\x2', '\x2E3', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x2E4', '\x2E5', '\x5', 'R', '*', '\x2', '\x2E5', '\x2E6', '\b', 
		'\x17', '\x1', '\x2', '\x2E6', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2E7', 
		'\x2E8', '\x5', 'T', '+', '\x2', '\x2E8', '\x2E9', '\b', '\x17', '\x1', 
		'\x2', '\x2E9', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', 
		'\x5', 'V', ',', '\x2', '\x2EB', '\x2EC', '\b', '\x17', '\x1', '\x2', 
		'\x2EC', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\x5', 
		'X', '-', '\x2', '\x2EE', '\x2EF', '\b', '\x17', '\x1', '\x2', '\x2EF', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F1', '\x5', 'Z', '.', 
		'\x2', '\x2F1', '\x2F2', '\b', '\x17', '\x1', '\x2', '\x2F2', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\x5', '\\', '/', '\x2', 
		'\x2F4', '\x2F5', '\b', '\x17', '\x1', '\x2', '\x2F5', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\x5', '^', '\x30', '\x2', '\x2F7', 
		'\x2F8', '\b', '\x17', '\x1', '\x2', '\x2F8', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FA', '\x5', '`', '\x31', '\x2', '\x2FA', '\x2FB', 
		'\b', '\x17', '\x1', '\x2', '\x2FB', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FD', '\x5', '\x62', '\x32', '\x2', '\x2FD', '\x2FE', '\b', 
		'\x17', '\x1', '\x2', '\x2FE', '\x372', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x300', '\x5', '\x64', '\x33', '\x2', '\x300', '\x301', '\b', '\x17', 
		'\x1', '\x2', '\x301', '\x372', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', 
		'\x5', '\x66', '\x34', '\x2', '\x303', '\x304', '\b', '\x17', '\x1', '\x2', 
		'\x304', '\x372', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x5', 
		'h', '\x35', '\x2', '\x306', '\x307', '\b', '\x17', '\x1', '\x2', '\x307', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x5', 'j', '\x36', 
		'\x2', '\x309', '\x30A', '\b', '\x17', '\x1', '\x2', '\x30A', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', '\x5', 'l', '\x37', '\x2', 
		'\x30C', '\x30D', '\b', '\x17', '\x1', '\x2', '\x30D', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x30E', '\x30F', '\x5', 'n', '\x38', '\x2', '\x30F', 
		'\x310', '\b', '\x17', '\x1', '\x2', '\x310', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x312', '\x5', 'p', '\x39', '\x2', '\x312', '\x313', 
		'\b', '\x17', '\x1', '\x2', '\x313', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x314', '\x315', '\x5', 'r', ':', '\x2', '\x315', '\x316', '\b', '\x17', 
		'\x1', '\x2', '\x316', '\x372', '\x3', '\x2', '\x2', '\x2', '\x317', '\x318', 
		'\x5', 't', ';', '\x2', '\x318', '\x319', '\b', '\x17', '\x1', '\x2', 
		'\x319', '\x372', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x5', 
		'v', '<', '\x2', '\x31B', '\x31C', '\b', '\x17', '\x1', '\x2', '\x31C', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', '\x5', 'x', '=', 
		'\x2', '\x31E', '\x31F', '\b', '\x17', '\x1', '\x2', '\x31F', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\x5', 'z', '>', '\x2', 
		'\x321', '\x322', '\b', '\x17', '\x1', '\x2', '\x322', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x324', '\x5', '|', '?', '\x2', '\x324', 
		'\x325', '\b', '\x17', '\x1', '\x2', '\x325', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x326', '\x327', '\x5', '~', '@', '\x2', '\x327', '\x328', '\b', 
		'\x17', '\x1', '\x2', '\x328', '\x372', '\x3', '\x2', '\x2', '\x2', '\x329', 
		'\x32A', '\x5', '\x80', '\x41', '\x2', '\x32A', '\x32B', '\b', '\x17', 
		'\x1', '\x2', '\x32B', '\x372', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', 
		'\x5', '\x82', '\x42', '\x2', '\x32D', '\x32E', '\b', '\x17', '\x1', '\x2', 
		'\x32E', '\x372', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', '\x5', 
		'\x84', '\x43', '\x2', '\x330', '\x331', '\b', '\x17', '\x1', '\x2', '\x331', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\x5', '\x86', 
		'\x44', '\x2', '\x333', '\x334', '\b', '\x17', '\x1', '\x2', '\x334', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\x5', '\x88', 
		'\x45', '\x2', '\x336', '\x337', '\b', '\x17', '\x1', '\x2', '\x337', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', '\x5', '\x8A', 
		'\x46', '\x2', '\x339', '\x33A', '\b', '\x17', '\x1', '\x2', '\x33A', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x5', '\x8C', 
		'G', '\x2', '\x33C', '\x33D', '\b', '\x17', '\x1', '\x2', '\x33D', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\x5', '\x8E', 'H', '\x2', 
		'\x33F', '\x340', '\b', '\x17', '\x1', '\x2', '\x340', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x341', '\x342', '\x5', '\x90', 'I', '\x2', '\x342', 
		'\x343', '\b', '\x17', '\x1', '\x2', '\x343', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x345', '\x5', '\x92', 'J', '\x2', '\x345', '\x346', 
		'\b', '\x17', '\x1', '\x2', '\x346', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x348', '\x5', '\x94', 'K', '\x2', '\x348', '\x349', '\b', '\x17', 
		'\x1', '\x2', '\x349', '\x372', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', 
		'\x5', '\x96', 'L', '\x2', '\x34B', '\x34C', '\b', '\x17', '\x1', '\x2', 
		'\x34C', '\x372', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\x5', 
		'\x98', 'M', '\x2', '\x34E', '\x34F', '\b', '\x17', '\x1', '\x2', '\x34F', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x5', '\x9A', 
		'N', '\x2', '\x351', '\x352', '\b', '\x17', '\x1', '\x2', '\x352', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\x5', '\x9C', 'O', '\x2', 
		'\x354', '\x355', '\b', '\x17', '\x1', '\x2', '\x355', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x356', '\x357', '\x5', '\x9E', 'P', '\x2', '\x357', 
		'\x358', '\b', '\x17', '\x1', '\x2', '\x358', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x359', '\x35A', '\x5', '\xA0', 'Q', '\x2', '\x35A', '\x35B', 
		'\b', '\x17', '\x1', '\x2', '\x35B', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35D', '\x5', '\xA2', 'R', '\x2', '\x35D', '\x35E', '\b', '\x17', 
		'\x1', '\x2', '\x35E', '\x372', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', 
		'\x5', '\xA4', 'S', '\x2', '\x360', '\x361', '\b', '\x17', '\x1', '\x2', 
		'\x361', '\x372', '\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\x5', 
		'\xA6', 'T', '\x2', '\x363', '\x364', '\b', '\x17', '\x1', '\x2', '\x364', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x5', '\xA8', 
		'U', '\x2', '\x366', '\x367', '\b', '\x17', '\x1', '\x2', '\x367', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x368', '\x369', '\x5', '\xAA', 'V', '\x2', 
		'\x369', '\x36A', '\b', '\x17', '\x1', '\x2', '\x36A', '\x372', '\x3', 
		'\x2', '\x2', '\x2', '\x36B', '\x36C', '\x5', '\xAC', 'W', '\x2', '\x36C', 
		'\x36D', '\b', '\x17', '\x1', '\x2', '\x36D', '\x372', '\x3', '\x2', '\x2', 
		'\x2', '\x36E', '\x36F', '\x5', '\xAE', 'X', '\x2', '\x36F', '\x370', 
		'\b', '\x17', '\x1', '\x2', '\x370', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2BA', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2D2', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2D8', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2E1', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x371', '\x2F9', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x371', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x305', '\x3', '\x2', '\x2', '\x2', '\x371', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x371', '\x311', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x314', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x371', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x371', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x323', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x326', '\x3', '\x2', '\x2', '\x2', '\x371', '\x329', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x371', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x335', '\x3', '\x2', '\x2', '\x2', '\x371', '\x338', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x33B', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x371', '\x341', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x344', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x371', '\x34A', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x371', '\x350', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x356', '\x3', '\x2', '\x2', '\x2', '\x371', '\x359', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x371', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x371', '\x362', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x365', '\x3', '\x2', '\x2', '\x2', '\x371', '\x368', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x372', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x373', '\x374', '\a', '}', '\x2', '\x2', '\x374', '\x375', 
		'\a', '\xFB', '\x2', '\x2', '\x375', '\x376', '\a', '\x1C', '\x2', '\x2', 
		'\x376', '\x377', '\a', '\xFB', '\x2', '\x2', '\x377', '\x378', '\x5', 
		'\xDA', 'n', '\x2', '\x378', '\x379', '\b', '\x18', '\x1', '\x2', '\x379', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37B', '\a', '~', '\x2', '\x2', 
		'\x37B', '\x37C', '\a', '\xFB', '\x2', '\x2', '\x37C', '\x37E', '\a', 
		'(', '\x2', '\x2', '\x37D', '\x37F', '\a', '\xFB', '\x2', '\x2', '\x37E', 
		'\x37D', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x382', 
		'\a', '\xF7', '\x2', '\x2', '\x381', '\x383', '\a', '\xFB', '\x2', '\x2', 
		'\x382', '\x381', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x384', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x385', '\x5', '\xDA', 'n', '\x2', '\x385', '\x386', '\a', '\xFB', '\x2', 
		'\x2', '\x386', '\x387', '\x5', '\xDA', 'n', '\x2', '\x387', '\x388', 
		'\a', '\xFB', '\x2', '\x2', '\x388', '\x38A', '\x5', '\xDA', 'n', '\x2', 
		'\x389', '\x38B', '\a', '\xFB', '\x2', '\x2', '\x38A', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\a', '\xF8', '\x2', 
		'\x2', '\x38D', '\x38E', '\b', '\x19', '\x1', '\x2', '\x38E', '\x3B7', 
		'\x3', '\x2', '\x2', '\x2', '\x38F', '\x390', '\a', '~', '\x2', '\x2', 
		'\x390', '\x391', '\a', '\xFB', '\x2', '\x2', '\x391', '\x393', '\a', 
		')', '\x2', '\x2', '\x392', '\x394', '\a', '\xFB', '\x2', '\x2', '\x393', 
		'\x392', '\x3', '\x2', '\x2', '\x2', '\x393', '\x394', '\x3', '\x2', '\x2', 
		'\x2', '\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x397', 
		'\a', '\xF7', '\x2', '\x2', '\x396', '\x398', '\a', '\xFB', '\x2', '\x2', 
		'\x397', '\x396', '\x3', '\x2', '\x2', '\x2', '\x397', '\x398', '\x3', 
		'\x2', '\x2', '\x2', '\x398', '\x399', '\x3', '\x2', '\x2', '\x2', '\x399', 
		'\x39A', '\x5', '\xDA', 'n', '\x2', '\x39A', '\x39B', '\a', '\xFB', '\x2', 
		'\x2', '\x39B', '\x39C', '\x5', '\xDA', 'n', '\x2', '\x39C', '\x39D', 
		'\a', '\xFB', '\x2', '\x2', '\x39D', '\x39F', '\x5', '\xDA', 'n', '\x2', 
		'\x39E', '\x3A0', '\a', '\xFB', '\x2', '\x2', '\x39F', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\a', '\xF8', '\x2', 
		'\x2', '\x3A2', '\x3A3', '\b', '\x19', '\x1', '\x2', '\x3A3', '\x3B7', 
		'\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\a', '~', '\x2', '\x2', 
		'\x3A5', '\x3A6', '\a', '\xFB', '\x2', '\x2', '\x3A6', '\x3A7', '\a', 
		'\xC8', '\x2', '\x2', '\x3A7', '\x3A8', '\a', '\xFB', '\x2', '\x2', '\x3A8', 
		'\x3A9', '\x5', '\xDA', 'n', '\x2', '\x3A9', '\x3AA', '\b', '\x19', '\x1', 
		'\x2', '\x3AA', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AC', 
		'\a', '~', '\x2', '\x2', '\x3AC', '\x3AD', '\a', '\xFB', '\x2', '\x2', 
		'\x3AD', '\x3AE', '\a', '\xEB', '\x2', '\x2', '\x3AE', '\x3B7', '\b', 
		'\x19', '\x1', '\x2', '\x3AF', '\x3B0', '\a', '~', '\x2', '\x2', '\x3B0', 
		'\x3B1', '\a', '\xFB', '\x2', '\x2', '\x3B1', '\x3B2', '\a', '\xCA', '\x2', 
		'\x2', '\x3B2', '\x3B3', '\a', '\xFB', '\x2', '\x2', '\x3B3', '\x3B4', 
		'\x5', '\xDA', 'n', '\x2', '\x3B4', '\x3B5', '\b', '\x19', '\x1', '\x2', 
		'\x3B5', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x37A', '\x3', 
		'\x2', '\x2', '\x2', '\x3B6', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3AB', '\x3', '\x2', '\x2', 
		'\x2', '\x3B6', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', '\a', '\x7F', '\x2', '\x2', 
		'\x3B9', '\x3BA', '\a', '\xFB', '\x2', '\x2', '\x3BA', '\x3BB', '\x5', 
		'\xDC', 'o', '\x2', '\x3BB', '\x3BC', '\b', '\x1A', '\x1', '\x2', '\x3BC', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\a', '\x80', '\x2', 
		'\x2', '\x3BE', '\x3BF', '\a', '\xFB', '\x2', '\x2', '\x3BF', '\x3C0', 
		'\x5', '\xDA', 'n', '\x2', '\x3C0', '\x3C1', '\a', '\xFB', '\x2', '\x2', 
		'\x3C1', '\x3C2', '\x5', '\xDA', 'n', '\x2', '\x3C2', '\x3C3', '\b', '\x1B', 
		'\x1', '\x2', '\x3C3', '\x35', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', 
		'\a', '\x81', '\x2', '\x2', '\x3C5', '\x3C6', '\a', '\xFB', '\x2', '\x2', 
		'\x3C6', '\x3C7', '\x5', '\xDC', 'o', '\x2', '\x3C7', '\x3C8', '\b', '\x1C', 
		'\x1', '\x2', '\x3C8', '\x37', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', 
		'\a', '\x82', '\x2', '\x2', '\x3CA', '\x3CB', '\a', '\xFB', '\x2', '\x2', 
		'\x3CB', '\x3CC', '\x5', '\xDA', 'n', '\x2', '\x3CC', '\x3CD', '\b', '\x1D', 
		'\x1', '\x2', '\x3CD', '\x39', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', 
		'\a', '\x83', '\x2', '\x2', '\x3CF', '\x3D0', '\a', '\xFB', '\x2', '\x2', 
		'\x3D0', '\x3D1', '\x5', '\xDA', 'n', '\x2', '\x3D1', '\x3D2', '\b', '\x1E', 
		'\x1', '\x2', '\x3D2', ';', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D4', 
		'\a', '\x85', '\x2', '\x2', '\x3D4', '\x3D5', '\b', '\x1F', '\x1', '\x2', 
		'\x3D5', '=', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', '\a', '\x86', 
		'\x2', '\x2', '\x3D7', '\x3D8', '\a', '\xFB', '\x2', '\x2', '\x3D8', '\x3D9', 
		'\x5', '\xDC', 'o', '\x2', '\x3D9', '\x3DA', '\b', ' ', '\x1', '\x2', 
		'\x3DA', '?', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\a', '\x87', 
		'\x2', '\x2', '\x3DC', '\x3DD', '\a', '\xFB', '\x2', '\x2', '\x3DD', '\x3DF', 
		'\a', '\x1C', '\x2', '\x2', '\x3DE', '\x3E0', '\a', '\xFB', '\x2', '\x2', 
		'\x3DF', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E1', 
		'\x3E3', '\a', '\xF7', '\x2', '\x2', '\x3E2', '\x3E4', '\a', '\xFB', '\x2', 
		'\x2', '\x3E3', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\x3', '\x2', '\x2', '\x2', 
		'\x3E5', '\x3E6', '\x5', '\xDA', 'n', '\x2', '\x3E6', '\x3E7', '\a', '\xFB', 
		'\x2', '\x2', '\x3E7', '\x3E8', '\x5', '\xDA', 'n', '\x2', '\x3E8', '\x3E9', 
		'\a', '\xFB', '\x2', '\x2', '\x3E9', '\x3EB', '\x5', '\xDA', 'n', '\x2', 
		'\x3EA', '\x3EC', '\a', '\xFB', '\x2', '\x2', '\x3EB', '\x3EA', '\x3', 
		'\x2', '\x2', '\x2', '\x3EB', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3EE', '\a', '\xF8', '\x2', 
		'\x2', '\x3EE', '\x3EF', '\b', '!', '\x1', '\x2', '\x3EF', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3F1', '\a', '\x88', '\x2', '\x2', '\x3F1', 
		'\x3F2', '\a', '\xFB', '\x2', '\x2', '\x3F2', '\x3F4', '\a', '\xC8', '\x2', 
		'\x2', '\x3F3', '\x3F5', '\a', '\xFB', '\x2', '\x2', '\x3F4', '\x3F3', 
		'\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F5', '\x3', '\x2', '\x2', '\x2', 
		'\x3F5', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F8', '\a', 
		'\xF7', '\x2', '\x2', '\x3F7', '\x3F9', '\a', '\xFB', '\x2', '\x2', '\x3F8', 
		'\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', 
		'\x2', '\x3F9', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FB', 
		'\x5', '\xDA', 'n', '\x2', '\x3FB', '\x3FC', '\a', '\xFB', '\x2', '\x2', 
		'\x3FC', '\x3FD', '\x5', '\xDA', 'n', '\x2', '\x3FD', '\x3FE', '\a', '\xFB', 
		'\x2', '\x2', '\x3FE', '\x400', '\x5', '\xDA', 'n', '\x2', '\x3FF', '\x401', 
		'\a', '\xFB', '\x2', '\x2', '\x400', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\x400', '\x401', '\x3', '\x2', '\x2', '\x2', '\x401', '\x402', '\x3', 
		'\x2', '\x2', '\x2', '\x402', '\x403', '\a', '\xF8', '\x2', '\x2', '\x403', 
		'\x404', '\b', '\"', '\x1', '\x2', '\x404', '\x41F', '\x3', '\x2', '\x2', 
		'\x2', '\x405', '\x406', '\a', '\x88', '\x2', '\x2', '\x406', '\x407', 
		'\a', '\xFB', '\x2', '\x2', '\x407', '\x409', '\a', '\xCA', '\x2', '\x2', 
		'\x408', '\x40A', '\a', '\xFB', '\x2', '\x2', '\x409', '\x408', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40A', 
		'\x40B', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40D', '\a', '\xF7', '\x2', 
		'\x2', '\x40C', '\x40E', '\a', '\xFB', '\x2', '\x2', '\x40D', '\x40C', 
		'\x3', '\x2', '\x2', '\x2', '\x40D', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x410', '\x5', 
		'\xDA', 'n', '\x2', '\x410', '\x411', '\a', '\xFB', '\x2', '\x2', '\x411', 
		'\x412', '\x5', '\xDA', 'n', '\x2', '\x412', '\x413', '\a', '\xFB', '\x2', 
		'\x2', '\x413', '\x415', '\x5', '\xDA', 'n', '\x2', '\x414', '\x416', 
		'\a', '\xFB', '\x2', '\x2', '\x415', '\x414', '\x3', '\x2', '\x2', '\x2', 
		'\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', '\x3', 
		'\x2', '\x2', '\x2', '\x417', '\x418', '\a', '\xF8', '\x2', '\x2', '\x418', 
		'\x419', '\b', '\"', '\x1', '\x2', '\x419', '\x41F', '\x3', '\x2', '\x2', 
		'\x2', '\x41A', '\x41B', '\a', '\x88', '\x2', '\x2', '\x41B', '\x41C', 
		'\a', '\xFB', '\x2', '\x2', '\x41C', '\x41D', '\a', '\xEB', '\x2', '\x2', 
		'\x41D', '\x41F', '\b', '\"', '\x1', '\x2', '\x41E', '\x3F0', '\x3', '\x2', 
		'\x2', '\x2', '\x41E', '\x405', '\x3', '\x2', '\x2', '\x2', '\x41E', '\x41A', 
		'\x3', '\x2', '\x2', '\x2', '\x41F', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x420', '\x421', '\a', '\x89', '\x2', '\x2', '\x421', '\x422', '\a', 
		'\xFB', '\x2', '\x2', '\x422', '\x423', '\x5', '\xDA', 'n', '\x2', '\x423', 
		'\x424', '\a', '\xFB', '\x2', '\x2', '\x424', '\x425', '\x5', '\xDA', 
		'n', '\x2', '\x425', '\x426', '\a', '\xFB', '\x2', '\x2', '\x426', '\x427', 
		'\x5', '\xDA', 'n', '\x2', '\x427', '\x428', '\a', '\xFB', '\x2', '\x2', 
		'\x428', '\x429', '\x5', '\xDA', 'n', '\x2', '\x429', '\x42A', '\b', '#', 
		'\x1', '\x2', '\x42A', '\x45', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42C', 
		'\a', '\x8A', '\x2', '\x2', '\x42C', '\x42D', '\a', '\xFB', '\x2', '\x2', 
		'\x42D', '\x42E', '\x5', '\xDA', 'n', '\x2', '\x42E', '\x42F', '\a', '\xFB', 
		'\x2', '\x2', '\x42F', '\x430', '\x5', '\xDA', 'n', '\x2', '\x430', '\x431', 
		'\a', '\xFB', '\x2', '\x2', '\x431', '\x432', '\x5', '\xDA', 'n', '\x2', 
		'\x432', '\x433', '\b', '$', '\x1', '\x2', '\x433', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x434', '\x435', '\a', '\x8B', '\x2', '\x2', '\x435', '\x436', 
		'\b', '%', '\x1', '\x2', '\x436', 'I', '\x3', '\x2', '\x2', '\x2', '\x437', 
		'\x438', '\a', '\x8C', '\x2', '\x2', '\x438', '\x439', '\b', '&', '\x1', 
		'\x2', '\x439', 'K', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43B', '\a', 
		'\x8D', '\x2', '\x2', '\x43B', '\x43C', '\a', '\xFB', '\x2', '\x2', '\x43C', 
		'\x43D', '\x5', '\xDA', 'n', '\x2', '\x43D', '\x43E', '\a', '\xFB', '\x2', 
		'\x2', '\x43E', '\x43F', '\x5', '\xDA', 'n', '\x2', '\x43F', '\x440', 
		'\a', '\xFB', '\x2', '\x2', '\x440', '\x441', '\x5', '\xDA', 'n', '\x2', 
		'\x441', '\x442', '\b', '\'', '\x1', '\x2', '\x442', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x443', '\x444', '\a', '\x8E', '\x2', '\x2', '\x444', '\x445', 
		'\b', '(', '\x1', '\x2', '\x445', 'O', '\x3', '\x2', '\x2', '\x2', '\x446', 
		'\x447', '\a', '\x8F', '\x2', '\x2', '\x447', '\x448', '\b', ')', '\x1', 
		'\x2', '\x448', 'Q', '\x3', '\x2', '\x2', '\x2', '\x449', '\x44A', '\a', 
		'\x90', '\x2', '\x2', '\x44A', '\x44B', '\b', '*', '\x1', '\x2', '\x44B', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44D', '\a', '\x91', '\x2', 
		'\x2', '\x44D', '\x44E', '\a', '\xFB', '\x2', '\x2', '\x44E', '\x44F', 
		'\x5', '\xDC', 'o', '\x2', '\x44F', '\x450', '\b', '+', '\x1', '\x2', 
		'\x450', 'U', '\x3', '\x2', '\x2', '\x2', '\x451', '\x452', '\a', '\x92', 
		'\x2', '\x2', '\x452', '\x453', '\a', '\xFB', '\x2', '\x2', '\x453', '\x454', 
		'\x5', '\xE8', 'u', '\x2', '\x454', '\x455', '\b', ',', '\x1', '\x2', 
		'\x455', 'W', '\x3', '\x2', '\x2', '\x2', '\x456', '\x457', '\a', '\x93', 
		'\x2', '\x2', '\x457', '\x458', '\a', '\xFB', '\x2', '\x2', '\x458', '\x459', 
		'\x5', '\xDA', 'n', '\x2', '\x459', '\x45A', '\b', '-', '\x1', '\x2', 
		'\x45A', 'Y', '\x3', '\x2', '\x2', '\x2', '\x45B', '\x45C', '\a', '\x94', 
		'\x2', '\x2', '\x45C', '\x45D', '\a', '\xFB', '\x2', '\x2', '\x45D', '\x45E', 
		'\x5', '\xDA', 'n', '\x2', '\x45E', '\x45F', '\a', '\xFB', '\x2', '\x2', 
		'\x45F', '\x460', '\x5', '\xDA', 'n', '\x2', '\x460', '\x461', '\b', '.', 
		'\x1', '\x2', '\x461', '[', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', 
		'\a', '\x95', '\x2', '\x2', '\x463', '\x464', '\a', '\xFB', '\x2', '\x2', 
		'\x464', '\x465', '\x5', '\xDA', 'n', '\x2', '\x465', '\x466', '\b', '/', 
		'\x1', '\x2', '\x466', ']', '\x3', '\x2', '\x2', '\x2', '\x467', '\x468', 
		'\a', '\x96', '\x2', '\x2', '\x468', '\x469', '\b', '\x30', '\x1', '\x2', 
		'\x469', '_', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', '\a', '\x97', 
		'\x2', '\x2', '\x46B', '\x46C', '\a', '\xFB', '\x2', '\x2', '\x46C', '\x46D', 
		'\x5', '\xDA', 'n', '\x2', '\x46D', '\x46E', '\b', '\x31', '\x1', '\x2', 
		'\x46E', '\x61', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x470', '\a', '\x98', 
		'\x2', '\x2', '\x470', '\x471', '\a', '\xFB', '\x2', '\x2', '\x471', '\x472', 
		'\x5', '\xD8', 'm', '\x2', '\x472', '\x473', '\b', '\x32', '\x1', '\x2', 
		'\x473', '\x63', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', '\a', '\x99', 
		'\x2', '\x2', '\x475', '\x476', '\a', '\xFB', '\x2', '\x2', '\x476', '\x477', 
		'\x5', '\xDA', 'n', '\x2', '\x477', '\x478', '\a', '\xFB', '\x2', '\x2', 
		'\x478', '\x479', '\x5', '\xDA', 'n', '\x2', '\x479', '\x47A', '\b', '\x33', 
		'\x1', '\x2', '\x47A', '\x65', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x47C', 
		'\a', '\x9A', '\x2', '\x2', '\x47C', '\x47D', '\a', '\xFB', '\x2', '\x2', 
		'\x47D', '\x47E', '\x5', '\xDA', 'n', '\x2', '\x47E', '\x47F', '\a', '\xFB', 
		'\x2', '\x2', '\x47F', '\x480', '\x5', '\xDA', 'n', '\x2', '\x480', '\x481', 
		'\a', '\xFB', '\x2', '\x2', '\x481', '\x482', '\x5', '\xDA', 'n', '\x2', 
		'\x482', '\x483', '\b', '\x34', '\x1', '\x2', '\x483', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x484', '\x485', '\a', '\x9B', '\x2', '\x2', '\x485', '\x486', 
		'\a', '\xFB', '\x2', '\x2', '\x486', '\x487', '\x5', '\xD8', 'm', '\x2', 
		'\x487', '\x488', '\b', '\x35', '\x1', '\x2', '\x488', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x489', '\x48A', '\a', '\x9C', '\x2', '\x2', '\x48A', '\x48B', 
		'\a', '\xFB', '\x2', '\x2', '\x48B', '\x48C', '\x5', '\xD8', 'm', '\x2', 
		'\x48C', '\x48D', '\b', '\x36', '\x1', '\x2', '\x48D', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x48E', '\x48F', '\a', '\x9D', '\x2', '\x2', '\x48F', '\x490', 
		'\b', '\x37', '\x1', '\x2', '\x490', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x491', '\x492', '\a', '\x9E', '\x2', '\x2', '\x492', '\x493', '\b', 
		'\x38', '\x1', '\x2', '\x493', 'o', '\x3', '\x2', '\x2', '\x2', '\x494', 
		'\x495', '\a', '\xA0', '\x2', '\x2', '\x495', '\x496', '\b', '\x39', '\x1', 
		'\x2', '\x496', 'q', '\x3', '\x2', '\x2', '\x2', '\x497', '\x498', '\a', 
		'\xA1', '\x2', '\x2', '\x498', '\x499', '\b', ':', '\x1', '\x2', '\x499', 
		's', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x49B', '\a', '\xA2', '\x2', 
		'\x2', '\x49B', '\x49C', '\b', ';', '\x1', '\x2', '\x49C', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x49D', '\x49E', '\a', '\xA3', '\x2', '\x2', '\x49E', 
		'\x49F', '\a', '\xFB', '\x2', '\x2', '\x49F', '\x4A0', '\x5', '\xDC', 
		'o', '\x2', '\x4A0', '\x4A1', '\b', '<', '\x1', '\x2', '\x4A1', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x4A2', '\x4A3', '\a', '\xA4', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\b', '=', '\x1', '\x2', '\x4A4', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x4A5', '\x4A6', '\a', '\xA5', '\x2', '\x2', '\x4A6', '\x4A7', '\b', 
		'>', '\x1', '\x2', '\x4A7', '{', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4A9', '\a', '\xA6', '\x2', '\x2', '\x4A9', '\x4AA', '\b', '?', '\x1', 
		'\x2', '\x4AA', '}', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', '\a', 
		'\xA7', '\x2', '\x2', '\x4AC', '\x4AD', '\a', '\xFB', '\x2', '\x2', '\x4AD', 
		'\x4AE', '\x5', '\xDA', 'n', '\x2', '\x4AE', '\x4AF', '\b', '@', '\x1', 
		'\x2', '\x4AF', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', 
		'\a', '\xA8', '\x2', '\x2', '\x4B1', '\x4B2', '\b', '\x41', '\x1', '\x2', 
		'\x4B2', '\x81', '\x3', '\x2', '\x2', '\x2', '\x4B3', '\x4B4', '\a', '\xA9', 
		'\x2', '\x2', '\x4B4', '\x4B5', '\a', '\xFB', '\x2', '\x2', '\x4B5', '\x4B6', 
		'\x5', '\xDC', 'o', '\x2', '\x4B6', '\x4B7', '\b', '\x42', '\x1', '\x2', 
		'\x4B7', '\x83', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\a', '\xAA', 
		'\x2', '\x2', '\x4B9', '\x4BA', '\a', '\xFB', '\x2', '\x2', '\x4BA', '\x4BC', 
		'\a', '\x1C', '\x2', '\x2', '\x4BB', '\x4BD', '\a', '\xFB', '\x2', '\x2', 
		'\x4BC', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\x3', 
		'\x2', '\x2', '\x2', '\x4BD', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4BE', 
		'\x4C0', '\a', '\xF7', '\x2', '\x2', '\x4BF', '\x4C1', '\a', '\xFB', '\x2', 
		'\x2', '\x4C0', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', 
		'\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', 
		'\x4C2', '\x4C3', '\x5', '\xDA', 'n', '\x2', '\x4C3', '\x4C4', '\a', '\xFB', 
		'\x2', '\x2', '\x4C4', '\x4C5', '\x5', '\xDA', 'n', '\x2', '\x4C5', '\x4C6', 
		'\a', '\xFB', '\x2', '\x2', '\x4C6', '\x4C8', '\x5', '\xDA', 'n', '\x2', 
		'\x4C7', '\x4C9', '\a', '\xFB', '\x2', '\x2', '\x4C8', '\x4C7', '\x3', 
		'\x2', '\x2', '\x2', '\x4C8', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4C9', 
		'\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CB', '\a', '\xF8', '\x2', 
		'\x2', '\x4CB', '\x4CC', '\b', '\x43', '\x1', '\x2', '\x4CC', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', '\a', '\xAB', '\x2', '\x2', 
		'\x4CE', '\x4CF', '\a', '\xFB', '\x2', '\x2', '\x4CF', '\x4D1', '\a', 
		'\xC8', '\x2', '\x2', '\x4D0', '\x4D2', '\a', '\xFB', '\x2', '\x2', '\x4D1', 
		'\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', '\x3', '\x2', '\x2', 
		'\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D5', 
		'\a', '\xF7', '\x2', '\x2', '\x4D4', '\x4D6', '\a', '\xFB', '\x2', '\x2', 
		'\x4D5', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D6', '\x3', 
		'\x2', '\x2', '\x2', '\x4D6', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D7', 
		'\x4D8', '\x5', '\xDA', 'n', '\x2', '\x4D8', '\x4D9', '\a', '\xFB', '\x2', 
		'\x2', '\x4D9', '\x4DA', '\x5', '\xDA', 'n', '\x2', '\x4DA', '\x4DB', 
		'\a', '\xFB', '\x2', '\x2', '\x4DB', '\x4DD', '\x5', '\xDA', 'n', '\x2', 
		'\x4DC', '\x4DE', '\a', '\xFB', '\x2', '\x2', '\x4DD', '\x4DC', '\x3', 
		'\x2', '\x2', '\x2', '\x4DD', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DE', 
		'\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '\xF8', '\x2', 
		'\x2', '\x4E0', '\x4E1', '\b', '\x44', '\x1', '\x2', '\x4E1', '\x4FC', 
		'\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E3', '\a', '\xAB', '\x2', '\x2', 
		'\x4E3', '\x4E4', '\a', '\xFB', '\x2', '\x2', '\x4E4', '\x4E6', '\a', 
		'\xCA', '\x2', '\x2', '\x4E5', '\x4E7', '\a', '\xFB', '\x2', '\x2', '\x4E6', 
		'\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E7', '\x3', '\x2', '\x2', 
		'\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4EA', 
		'\a', '\xF7', '\x2', '\x2', '\x4E9', '\x4EB', '\a', '\xFB', '\x2', '\x2', 
		'\x4EA', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', '\x3', 
		'\x2', '\x2', '\x2', '\x4EB', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EC', 
		'\x4ED', '\x5', '\xDA', 'n', '\x2', '\x4ED', '\x4EE', '\a', '\xFB', '\x2', 
		'\x2', '\x4EE', '\x4EF', '\x5', '\xDA', 'n', '\x2', '\x4EF', '\x4F0', 
		'\a', '\xFB', '\x2', '\x2', '\x4F0', '\x4F2', '\x5', '\xDA', 'n', '\x2', 
		'\x4F1', '\x4F3', '\a', '\xFB', '\x2', '\x2', '\x4F2', '\x4F1', '\x3', 
		'\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F3', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\a', '\xF8', '\x2', 
		'\x2', '\x4F5', '\x4F6', '\b', '\x44', '\x1', '\x2', '\x4F6', '\x4FC', 
		'\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F8', '\a', '\xAB', '\x2', '\x2', 
		'\x4F8', '\x4F9', '\a', '\xFB', '\x2', '\x2', '\x4F9', '\x4FA', '\a', 
		'\xEB', '\x2', '\x2', '\x4FA', '\x4FC', '\b', '\x44', '\x1', '\x2', '\x4FB', 
		'\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4E2', '\x3', '\x2', '\x2', 
		'\x2', '\x4FB', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4FC', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4FE', '\a', '\xAC', '\x2', '\x2', 
		'\x4FE', '\x4FF', '\a', '\xFB', '\x2', '\x2', '\x4FF', '\x500', '\x5', 
		'\xDA', 'n', '\x2', '\x500', '\x501', '\b', '\x45', '\x1', '\x2', '\x501', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x502', '\x503', '\a', '\xAD', '\x2', 
		'\x2', '\x503', '\x504', '\a', '\xFB', '\x2', '\x2', '\x504', '\x505', 
		'\x5', '\xDA', 'n', '\x2', '\x505', '\x506', '\a', '\xFB', '\x2', '\x2', 
		'\x506', '\x507', '\x5', '\xDA', 'n', '\x2', '\x507', '\x508', '\b', '\x46', 
		'\x1', '\x2', '\x508', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50A', 
		'\a', '\xAE', '\x2', '\x2', '\x50A', '\x50B', '\b', 'G', '\x1', '\x2', 
		'\x50B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\a', '\xAF', 
		'\x2', '\x2', '\x50D', '\x50E', '\b', 'H', '\x1', '\x2', '\x50E', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', '\a', '\xB0', '\x2', '\x2', 
		'\x510', '\x511', '\b', 'I', '\x1', '\x2', '\x511', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x512', '\x513', '\a', '\xB1', '\x2', '\x2', '\x513', '\x514', 
		'\a', '\xFB', '\x2', '\x2', '\x514', '\x515', '\x5', '\xDA', 'n', '\x2', 
		'\x515', '\x516', '\a', '\xFB', '\x2', '\x2', '\x516', '\x517', '\x5', 
		'\xDA', 'n', '\x2', '\x517', '\x518', '\a', '\xFB', '\x2', '\x2', '\x518', 
		'\x519', '\x5', '\xDA', 'n', '\x2', '\x519', '\x51A', '\a', '\xFB', '\x2', 
		'\x2', '\x51A', '\x51B', '\x5', '\xDA', 'n', '\x2', '\x51B', '\x51C', 
		'\a', '\xFB', '\x2', '\x2', '\x51C', '\x51D', '\x5', '\xDA', 'n', '\x2', 
		'\x51D', '\x51E', '\a', '\xFB', '\x2', '\x2', '\x51E', '\x51F', '\x5', 
		'\xDA', 'n', '\x2', '\x51F', '\x520', '\b', 'J', '\x1', '\x2', '\x520', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', '\a', '\xB2', '\x2', 
		'\x2', '\x522', '\x523', '\a', '\xFB', '\x2', '\x2', '\x523', '\x524', 
		'\x5', '\xDA', 'n', '\x2', '\x524', '\x525', '\a', '\xFB', '\x2', '\x2', 
		'\x525', '\x526', '\x5', '\xDA', 'n', '\x2', '\x526', '\x527', '\a', '\xFB', 
		'\x2', '\x2', '\x527', '\x528', '\x5', '\xDA', 'n', '\x2', '\x528', '\x529', 
		'\a', '\xFB', '\x2', '\x2', '\x529', '\x52A', '\x5', '\xDA', 'n', '\x2', 
		'\x52A', '\x52B', '\a', '\xFB', '\x2', '\x2', '\x52B', '\x52C', '\x5', 
		'\xDA', 'n', '\x2', '\x52C', '\x52D', '\a', '\xFB', '\x2', '\x2', '\x52D', 
		'\x52E', '\x5', '\xDA', 'n', '\x2', '\x52E', '\x52F', '\a', '\xFB', '\x2', 
		'\x2', '\x52F', '\x530', '\x5', '\xDA', 'n', '\x2', '\x530', '\x531', 
		'\a', '\xFB', '\x2', '\x2', '\x531', '\x532', '\x5', '\xDA', 'n', '\x2', 
		'\x532', '\x533', '\b', 'K', '\x1', '\x2', '\x533', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x534', '\x535', '\a', '\xB3', '\x2', '\x2', '\x535', '\x536', 
		'\a', '\xFB', '\x2', '\x2', '\x536', '\x537', '\x5', '\xDA', 'n', '\x2', 
		'\x537', '\x538', '\b', 'L', '\x1', '\x2', '\x538', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x539', '\x53A', '\a', '\xB4', '\x2', '\x2', '\x53A', '\x53B', 
		'\a', '\xFB', '\x2', '\x2', '\x53B', '\x53C', '\x5', '\xDC', 'o', '\x2', 
		'\x53C', '\x53D', '\a', '\xFB', '\x2', '\x2', '\x53D', '\x53E', '\x5', 
		'\xDA', 'n', '\x2', '\x53E', '\x53F', '\a', '\xFB', '\x2', '\x2', '\x53F', 
		'\x540', '\x5', '\xDA', 'n', '\x2', '\x540', '\x541', '\a', '\xFB', '\x2', 
		'\x2', '\x541', '\x542', '\x5', '\xDA', 'n', '\x2', '\x542', '\x543', 
		'\a', '\xFB', '\x2', '\x2', '\x543', '\x544', '\x5', '\xDA', 'n', '\x2', 
		'\x544', '\x545', '\a', '\xFB', '\x2', '\x2', '\x545', '\x546', '\x5', 
		'\xDA', 'n', '\x2', '\x546', '\x547', '\a', '\xFB', '\x2', '\x2', '\x547', 
		'\x548', '\x5', '\xDA', 'n', '\x2', '\x548', '\x549', '\a', '\xFB', '\x2', 
		'\x2', '\x549', '\x54A', '\x5', '\xD6', 'l', '\x2', '\x54A', '\x54B', 
		'\b', 'M', '\x1', '\x2', '\x54B', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\x54D', '\a', '\xB5', '\x2', '\x2', '\x54D', '\x54E', '\a', 
		'\xFB', '\x2', '\x2', '\x54E', '\x550', '\a', '\xE8', '\x2', '\x2', '\x54F', 
		'\x551', '\a', '\xFB', '\x2', '\x2', '\x550', '\x54F', '\x3', '\x2', '\x2', 
		'\x2', '\x550', '\x551', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\x552', '\x554', '\a', '\xF7', '\x2', '\x2', 
		'\x553', '\x555', '\a', '\xFB', '\x2', '\x2', '\x554', '\x553', '\x3', 
		'\x2', '\x2', '\x2', '\x554', '\x555', '\x3', '\x2', '\x2', '\x2', '\x555', 
		'\x556', '\x3', '\x2', '\x2', '\x2', '\x556', '\x557', '\x5', '\xDA', 
		'n', '\x2', '\x557', '\x558', '\a', '\xFB', '\x2', '\x2', '\x558', '\x559', 
		'\x5', '\xDA', 'n', '\x2', '\x559', '\x55A', '\a', '\xFB', '\x2', '\x2', 
		'\x55A', '\x55C', '\x5', '\xDA', 'n', '\x2', '\x55B', '\x55D', '\a', '\xFB', 
		'\x2', '\x2', '\x55C', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55D', 
		'\x3', '\x2', '\x2', '\x2', '\x55D', '\x55E', '\x3', '\x2', '\x2', '\x2', 
		'\x55E', '\x560', '\a', '\xF8', '\x2', '\x2', '\x55F', '\x561', '\a', 
		'\xFB', '\x2', '\x2', '\x560', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x560', 
		'\x561', '\x3', '\x2', '\x2', '\x2', '\x561', '\x562', '\x3', '\x2', '\x2', 
		'\x2', '\x562', '\x564', '\a', '\xF7', '\x2', '\x2', '\x563', '\x565', 
		'\a', '\xFB', '\x2', '\x2', '\x564', '\x563', '\x3', '\x2', '\x2', '\x2', 
		'\x564', '\x565', '\x3', '\x2', '\x2', '\x2', '\x565', '\x566', '\x3', 
		'\x2', '\x2', '\x2', '\x566', '\x567', '\x5', '\xDA', 'n', '\x2', '\x567', 
		'\x568', '\a', '\xFB', '\x2', '\x2', '\x568', '\x569', '\x5', '\xDA', 
		'n', '\x2', '\x569', '\x56A', '\a', '\xFB', '\x2', '\x2', '\x56A', '\x56C', 
		'\x5', '\xDA', 'n', '\x2', '\x56B', '\x56D', '\a', '\xFB', '\x2', '\x2', 
		'\x56C', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x56C', '\x56D', '\x3', 
		'\x2', '\x2', '\x2', '\x56D', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x56E', 
		'\x56F', '\a', '\xF8', '\x2', '\x2', '\x56F', '\x570', '\b', 'N', '\x1', 
		'\x2', '\x570', '\x597', '\x3', '\x2', '\x2', '\x2', '\x571', '\x572', 
		'\a', '\xB5', '\x2', '\x2', '\x572', '\x573', '\a', '\xFB', '\x2', '\x2', 
		'\x573', '\x575', '\a', 'N', '\x2', '\x2', '\x574', '\x576', '\a', '\xFB', 
		'\x2', '\x2', '\x575', '\x574', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', 
		'\x3', '\x2', '\x2', '\x2', '\x576', '\x577', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\x579', '\a', '\xF7', '\x2', '\x2', '\x578', '\x57A', '\a', 
		'\xFB', '\x2', '\x2', '\x579', '\x578', '\x3', '\x2', '\x2', '\x2', '\x579', 
		'\x57A', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', 
		'\x2', '\x57B', '\x57C', '\x5', '\xDA', 'n', '\x2', '\x57C', '\x57D', 
		'\a', '\xFB', '\x2', '\x2', '\x57D', '\x57E', '\x5', '\xDA', 'n', '\x2', 
		'\x57E', '\x57F', '\a', '\xFB', '\x2', '\x2', '\x57F', '\x581', '\x5', 
		'\xDA', 'n', '\x2', '\x580', '\x582', '\a', '\xFB', '\x2', '\x2', '\x581', 
		'\x580', '\x3', '\x2', '\x2', '\x2', '\x581', '\x582', '\x3', '\x2', '\x2', 
		'\x2', '\x582', '\x583', '\x3', '\x2', '\x2', '\x2', '\x583', '\x585', 
		'\a', '\xF8', '\x2', '\x2', '\x584', '\x586', '\a', '\xFB', '\x2', '\x2', 
		'\x585', '\x584', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', '\x3', 
		'\x2', '\x2', '\x2', '\x586', '\x587', '\x3', '\x2', '\x2', '\x2', '\x587', 
		'\x589', '\a', '\xF7', '\x2', '\x2', '\x588', '\x58A', '\a', '\xFB', '\x2', 
		'\x2', '\x589', '\x588', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', 
		'\x3', '\x2', '\x2', '\x2', '\x58A', '\x58B', '\x3', '\x2', '\x2', '\x2', 
		'\x58B', '\x58C', '\x5', '\xDA', 'n', '\x2', '\x58C', '\x58D', '\a', '\xFB', 
		'\x2', '\x2', '\x58D', '\x58E', '\x5', '\xDA', 'n', '\x2', '\x58E', '\x58F', 
		'\a', '\xFB', '\x2', '\x2', '\x58F', '\x591', '\x5', '\xDA', 'n', '\x2', 
		'\x590', '\x592', '\a', '\xFB', '\x2', '\x2', '\x591', '\x590', '\x3', 
		'\x2', '\x2', '\x2', '\x591', '\x592', '\x3', '\x2', '\x2', '\x2', '\x592', 
		'\x593', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', '\a', '\xF8', '\x2', 
		'\x2', '\x594', '\x595', '\b', 'N', '\x1', '\x2', '\x595', '\x597', '\x3', 
		'\x2', '\x2', '\x2', '\x596', '\x54C', '\x3', '\x2', '\x2', '\x2', '\x596', 
		'\x571', '\x3', '\x2', '\x2', '\x2', '\x597', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x598', '\x599', '\a', '\xB6', '\x2', '\x2', '\x599', '\x59A', 
		'\a', '\xFB', '\x2', '\x2', '\x59A', '\x59B', '\a', '\xC4', '\x2', '\x2', 
		'\x59B', '\x59C', '\a', '\xFB', '\x2', '\x2', '\x59C', '\x59D', '\x5', 
		'\xDA', 'n', '\x2', '\x59D', '\x59E', '\b', 'O', '\x1', '\x2', '\x59E', 
		'\x5C4', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0', '\a', '\xB6', '\x2', 
		'\x2', '\x5A0', '\x5A1', '\a', '\xFB', '\x2', '\x2', '\x5A1', '\x5A2', 
		'\a', '\xC8', '\x2', '\x2', '\x5A2', '\x5A3', '\a', '\xFB', '\x2', '\x2', 
		'\x5A3', '\x5A4', '\x5', '\xDA', 'n', '\x2', '\x5A4', '\x5A5', '\a', '\xFB', 
		'\x2', '\x2', '\x5A5', '\x5A6', '\x5', '\xDA', 'n', '\x2', '\x5A6', '\x5A7', 
		'\b', 'O', '\x1', '\x2', '\x5A7', '\x5C4', '\x3', '\x2', '\x2', '\x2', 
		'\x5A8', '\x5A9', '\a', '\xB6', '\x2', '\x2', '\x5A9', '\x5AA', '\a', 
		'\xFB', '\x2', '\x2', '\x5AA', '\x5AB', '\a', '\xE4', '\x2', '\x2', '\x5AB', 
		'\x5AC', '\a', '\xFB', '\x2', '\x2', '\x5AC', '\x5AD', '\x5', '\xDA', 
		'n', '\x2', '\x5AD', '\x5AE', '\a', '\xFB', '\x2', '\x2', '\x5AE', '\x5AF', 
		'\x5', '\xDA', 'n', '\x2', '\x5AF', '\x5B0', '\b', 'O', '\x1', '\x2', 
		'\x5B0', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\a', 
		'\xB6', '\x2', '\x2', '\x5B2', '\x5B3', '\a', '\xFB', '\x2', '\x2', '\x5B3', 
		'\x5B4', '\a', '^', '\x2', '\x2', '\x5B4', '\x5B5', '\a', '\xFB', '\x2', 
		'\x2', '\x5B5', '\x5B6', '\x5', '\xDA', 'n', '\x2', '\x5B6', '\x5B7', 
		'\a', '\xFB', '\x2', '\x2', '\x5B7', '\x5B8', '\x5', '\xDA', 'n', '\x2', 
		'\x5B8', '\x5B9', '\b', 'O', '\x1', '\x2', '\x5B9', '\x5C4', '\x3', '\x2', 
		'\x2', '\x2', '\x5BA', '\x5BB', '\a', '\xB6', '\x2', '\x2', '\x5BB', '\x5BC', 
		'\a', '\xFB', '\x2', '\x2', '\x5BC', '\x5BD', '\a', '\xCB', '\x2', '\x2', 
		'\x5BD', '\x5BE', '\a', '\xFB', '\x2', '\x2', '\x5BE', '\x5BF', '\x5', 
		'\xDA', 'n', '\x2', '\x5BF', '\x5C0', '\a', '\xFB', '\x2', '\x2', '\x5C0', 
		'\x5C1', '\x5', '\xDA', 'n', '\x2', '\x5C1', '\x5C2', '\b', 'O', '\x1', 
		'\x2', '\x5C2', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x598', 
		'\x3', '\x2', '\x2', '\x2', '\x5C3', '\x59F', '\x3', '\x2', '\x2', '\x2', 
		'\x5C3', '\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5B1', '\x3', 
		'\x2', '\x2', '\x2', '\x5C3', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5C4', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\a', '\xB7', '\x2', 
		'\x2', '\x5C6', '\x5C7', '\b', 'P', '\x1', '\x2', '\x5C7', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\a', '\xB8', '\x2', '\x2', '\x5C9', 
		'\x5CA', '\a', '\xFB', '\x2', '\x2', '\x5CA', '\x5CB', '\x5', '\xDA', 
		'n', '\x2', '\x5CB', '\x5CC', '\b', 'Q', '\x1', '\x2', '\x5CC', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\a', '\xB9', '\x2', '\x2', 
		'\x5CE', '\x5CF', '\a', '\xFB', '\x2', '\x2', '\x5CF', '\x5D0', '\x5', 
		'\xDA', 'n', '\x2', '\x5D0', '\x5D1', '\a', '\xFB', '\x2', '\x2', '\x5D1', 
		'\x5D2', '\x5', '\xDA', 'n', '\x2', '\x5D2', '\x5D3', '\b', 'R', '\x1', 
		'\x2', '\x5D3', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D5', 
		'\a', '\xBA', '\x2', '\x2', '\x5D5', '\x5D6', '\b', 'S', '\x1', '\x2', 
		'\x5D6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D8', '\a', '\xBB', 
		'\x2', '\x2', '\x5D8', '\x5D9', '\a', '\xFB', '\x2', '\x2', '\x5D9', '\x5DA', 
		'\x5', '\xDA', 'n', '\x2', '\x5DA', '\x5DB', '\b', 'T', '\x1', '\x2', 
		'\x5DB', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', '\a', '\xBC', 
		'\x2', '\x2', '\x5DD', '\x5DE', '\b', 'U', '\x1', '\x2', '\x5DE', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', '\a', '\xBD', '\x2', '\x2', 
		'\x5E0', '\x5E1', '\b', 'V', '\x1', '\x2', '\x5E1', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x5E2', '\x5E3', '\a', '\x9F', '\x2', '\x2', '\x5E3', '\x5E4', 
		'\b', 'W', '\x1', '\x2', '\x5E4', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x5E5', '\x5E6', '\a', '\x84', '\x2', '\x2', '\x5E6', '\x5E7', '\a', 
		'\xFB', '\x2', '\x2', '\x5E7', '\x5E8', '\x5', '\xDA', 'n', '\x2', '\x5E8', 
		'\x5E9', '\a', '\xFB', '\x2', '\x2', '\x5E9', '\x5EA', '\x5', '\xDA', 
		'n', '\x2', '\x5EA', '\x5EB', '\a', '\xFB', '\x2', '\x2', '\x5EB', '\x5EC', 
		'\x5', '\xDA', 'n', '\x2', '\x5EC', '\x5ED', '\a', '\xFB', '\x2', '\x2', 
		'\x5ED', '\x5EE', '\x5', '\xDA', 'n', '\x2', '\x5EE', '\x5EF', '\b', 'X', 
		'\x1', '\x2', '\x5EF', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F1', 
		'\x5', '\xB2', 'Z', '\x2', '\x5F1', '\x5F2', '\b', 'Y', '\x1', '\x2', 
		'\x5F2', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F4', '\x5', 
		'\xB4', '[', '\x2', '\x5F4', '\x5F5', '\b', 'Y', '\x1', '\x2', '\x5F5', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7', '\x5', '\xB6', 
		'\\', '\x2', '\x5F7', '\x5F8', '\b', 'Y', '\x1', '\x2', '\x5F8', '\x5FD', 
		'\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\x5', '\xB8', ']', '\x2', 
		'\x5FA', '\x5FB', '\b', 'Y', '\x1', '\x2', '\x5FB', '\x5FD', '\x3', '\x2', 
		'\x2', '\x2', '\x5FC', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5F3', 
		'\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5F6', '\x3', '\x2', '\x2', '\x2', 
		'\x5FC', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\x5FE', '\x5FF', '\a', '\xBF', '\x2', '\x2', '\x5FF', 
		'\x600', '\a', '\xFB', '\x2', '\x2', '\x600', '\x601', '\x5', '\xDC', 
		'o', '\x2', '\x601', '\x602', '\b', 'Z', '\x1', '\x2', '\x602', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x604', '\a', '\xC0', '\x2', '\x2', 
		'\x604', '\x605', '\b', '[', '\x1', '\x2', '\x605', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x606', '\x607', '\a', '\xC1', '\x2', '\x2', '\x607', '\x608', 
		'\a', '\xFB', '\x2', '\x2', '\x608', '\x609', '\x5', '\xDA', 'n', '\x2', 
		'\x609', '\x60A', '\b', '\\', '\x1', '\x2', '\x60A', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\x60B', '\x60C', '\a', '\xBE', '\x2', '\x2', '\x60C', '\x60D', 
		'\a', '\xFB', '\x2', '\x2', '\x60D', '\x60E', '\x5', '\xE6', 't', '\x2', 
		'\x60E', '\x60F', '\a', '\xFB', '\x2', '\x2', '\x60F', '\x610', '\x5', 
		'\xDA', 'n', '\x2', '\x610', '\x611', '\b', ']', '\x1', '\x2', '\x611', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\x5', '\xBC', '_', 
		'\x2', '\x613', '\x614', '\b', '^', '\x1', '\x2', '\x614', '\x63A', '\x3', 
		'\x2', '\x2', '\x2', '\x615', '\x616', '\x5', '\xBE', '`', '\x2', '\x616', 
		'\x617', '\b', '^', '\x1', '\x2', '\x617', '\x63A', '\x3', '\x2', '\x2', 
		'\x2', '\x618', '\x619', '\x5', '\xC0', '\x61', '\x2', '\x619', '\x61A', 
		'\b', '^', '\x1', '\x2', '\x61A', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x61B', '\x61C', '\x5', '\xC2', '\x62', '\x2', '\x61C', '\x61D', '\b', 
		'^', '\x1', '\x2', '\x61D', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x61E', 
		'\x61F', '\x5', '\xC4', '\x63', '\x2', '\x61F', '\x620', '\b', '^', '\x1', 
		'\x2', '\x620', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x621', '\x622', 
		'\x5', '\xC6', '\x64', '\x2', '\x622', '\x623', '\b', '^', '\x1', '\x2', 
		'\x623', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\x5', 
		'\xC8', '\x65', '\x2', '\x625', '\x626', '\b', '^', '\x1', '\x2', '\x626', 
		'\x63A', '\x3', '\x2', '\x2', '\x2', '\x627', '\x628', '\x5', '\xCA', 
		'\x66', '\x2', '\x628', '\x629', '\b', '^', '\x1', '\x2', '\x629', '\x63A', 
		'\x3', '\x2', '\x2', '\x2', '\x62A', '\x62B', '\x5', '\xCC', 'g', '\x2', 
		'\x62B', '\x62C', '\b', '^', '\x1', '\x2', '\x62C', '\x63A', '\x3', '\x2', 
		'\x2', '\x2', '\x62D', '\x62E', '\x5', '\xCE', 'h', '\x2', '\x62E', '\x62F', 
		'\b', '^', '\x1', '\x2', '\x62F', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x630', '\x631', '\x5', '\xD0', 'i', '\x2', '\x631', '\x632', '\b', '^', 
		'\x1', '\x2', '\x632', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x633', '\x634', 
		'\x5', '\xD2', 'j', '\x2', '\x634', '\x635', '\b', '^', '\x1', '\x2', 
		'\x635', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x636', '\x637', '\x5', 
		'\xD4', 'k', '\x2', '\x637', '\x638', '\b', '^', '\x1', '\x2', '\x638', 
		'\x63A', '\x3', '\x2', '\x2', '\x2', '\x639', '\x612', '\x3', '\x2', '\x2', 
		'\x2', '\x639', '\x615', '\x3', '\x2', '\x2', '\x2', '\x639', '\x618', 
		'\x3', '\x2', '\x2', '\x2', '\x639', '\x61B', '\x3', '\x2', '\x2', '\x2', 
		'\x639', '\x61E', '\x3', '\x2', '\x2', '\x2', '\x639', '\x621', '\x3', 
		'\x2', '\x2', '\x2', '\x639', '\x624', '\x3', '\x2', '\x2', '\x2', '\x639', 
		'\x627', '\x3', '\x2', '\x2', '\x2', '\x639', '\x62A', '\x3', '\x2', '\x2', 
		'\x2', '\x639', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x639', '\x630', 
		'\x3', '\x2', '\x2', '\x2', '\x639', '\x633', '\x3', '\x2', '\x2', '\x2', 
		'\x639', '\x636', '\x3', '\x2', '\x2', '\x2', '\x63A', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x63B', '\x63C', '\a', '[', '\x2', '\x2', '\x63C', 
		'\x63D', '\a', '\xFB', '\x2', '\x2', '\x63D', '\x63E', '\x5', '\xDC', 
		'o', '\x2', '\x63E', '\x63F', '\b', '_', '\x1', '\x2', '\x63F', '\x649', 
		'\x3', '\x2', '\x2', '\x2', '\x640', '\x641', '\a', '[', '\x2', '\x2', 
		'\x641', '\x642', '\a', '\xFB', '\x2', '\x2', '\x642', '\x643', '\a', 
		'$', '\x2', '\x2', '\x643', '\x649', '\b', '_', '\x1', '\x2', '\x644', 
		'\x645', '\a', '[', '\x2', '\x2', '\x645', '\x646', '\a', '\xFB', '\x2', 
		'\x2', '\x646', '\x647', '\a', '%', '\x2', '\x2', '\x647', '\x649', '\b', 
		'_', '\x1', '\x2', '\x648', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x648', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x648', '\x644', '\x3', '\x2', '\x2', 
		'\x2', '\x649', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', 
		'\a', '\x1A', '\x2', '\x2', '\x64B', '\x64C', '\a', '\xFB', '\x2', '\x2', 
		'\x64C', '\x64D', '\x5', '\xDC', 'o', '\x2', '\x64D', '\x64E', '\b', '`', 
		'\x1', '\x2', '\x64E', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', 
		'\b', '\x61', '\x1', '\x2', '\x650', '\x651', '\a', '\t', '\x2', '\x2', 
		'\x651', '\x652', '\a', '\xFB', '\x2', '\x2', '\x652', '\x657', '\x5', 
		'\xDA', 'n', '\x2', '\x653', '\x654', '\t', '\x2', '\x2', '\x2', '\x654', 
		'\x655', '\x5', '\xDC', 'o', '\x2', '\x655', '\x656', '\b', '\x61', '\x1', 
		'\x2', '\x656', '\x658', '\x3', '\x2', '\x2', '\x2', '\x657', '\x653', 
		'\x3', '\x2', '\x2', '\x2', '\x658', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\x659', '\x657', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', '\x3', 
		'\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', '\x2', '\x65B', 
		'\x65C', '\b', '\x61', '\x1', '\x2', '\x65C', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x65D', '\x65E', '\a', '\xEA', '\x2', '\x2', '\x65E', '\x65F', 
		'\a', '\xFB', '\x2', '\x2', '\x65F', '\x660', '\x5', '\xDC', 'o', '\x2', 
		'\x660', '\x661', '\b', '\x62', '\x1', '\x2', '\x661', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x662', '\x663', '\a', '\x12', '\x2', '\x2', '\x663', 
		'\x664', '\a', '\xFB', '\x2', '\x2', '\x664', '\x665', '\x5', '\xEA', 
		'v', '\x2', '\x665', '\x666', '\b', '\x63', '\x1', '\x2', '\x666', '\x66F', 
		'\x3', '\x2', '\x2', '\x2', '\x667', '\x668', '\a', '\x12', '\x2', '\x2', 
		'\x668', '\x669', '\a', '\xFB', '\x2', '\x2', '\x669', '\x66A', '\x5', 
		'\xEC', 'w', '\x2', '\x66A', '\x66B', '\a', '\xFB', '\x2', '\x2', '\x66B', 
		'\x66C', '\x5', '\xEE', 'x', '\x2', '\x66C', '\x66D', '\b', '\x63', '\x1', 
		'\x2', '\x66D', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x662', 
		'\x3', '\x2', '\x2', '\x2', '\x66E', '\x667', '\x3', '\x2', '\x2', '\x2', 
		'\x66F', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x670', '\x671', '\a', '\xC2', 
		'\x2', '\x2', '\x671', '\x672', '\a', '\xFB', '\x2', '\x2', '\x672', '\x673', 
		'\a', 'J', '\x2', '\x2', '\x673', '\x6BD', '\b', '\x64', '\x1', '\x2', 
		'\x674', '\x675', '\a', '\xC2', '\x2', '\x2', '\x675', '\x676', '\a', 
		'\xFB', '\x2', '\x2', '\x676', '\x677', '\a', 'K', '\x2', '\x2', '\x677', 
		'\x6BD', '\b', '\x64', '\x1', '\x2', '\x678', '\x679', '\a', '\xC2', '\x2', 
		'\x2', '\x679', '\x67A', '\a', '\xFB', '\x2', '\x2', '\x67A', '\x67B', 
		'\a', '\xE9', '\x2', '\x2', '\x67B', '\x6BD', '\b', '\x64', '\x1', '\x2', 
		'\x67C', '\x67D', '\a', '\xC2', '\x2', '\x2', '\x67D', '\x67E', '\a', 
		'\xFB', '\x2', '\x2', '\x67E', '\x67F', '\a', 'q', '\x2', '\x2', '\x67F', 
		'\x6BD', '\b', '\x64', '\x1', '\x2', '\x680', '\x681', '\a', '\xC2', '\x2', 
		'\x2', '\x681', '\x682', '\a', '\xFB', '\x2', '\x2', '\x682', '\x683', 
		'\a', '\x30', '\x2', '\x2', '\x683', '\x6BD', '\b', '\x64', '\x1', '\x2', 
		'\x684', '\x685', '\a', '\xC2', '\x2', '\x2', '\x685', '\x686', '\a', 
		'\xFB', '\x2', '\x2', '\x686', '\x687', '\a', '\x35', '\x2', '\x2', '\x687', 
		'\x6BD', '\b', '\x64', '\x1', '\x2', '\x688', '\x689', '\a', '\xC2', '\x2', 
		'\x2', '\x689', '\x68A', '\a', '\xFB', '\x2', '\x2', '\x68A', '\x68B', 
		'\a', ',', '\x2', '\x2', '\x68B', '\x6BD', '\b', '\x64', '\x1', '\x2', 
		'\x68C', '\x68D', '\a', '\xC2', '\x2', '\x2', '\x68D', '\x68E', '\a', 
		'\xFB', '\x2', '\x2', '\x68E', '\x68F', '\a', 'p', '\x2', '\x2', '\x68F', 
		'\x6BD', '\b', '\x64', '\x1', '\x2', '\x690', '\x691', '\a', '\xC2', '\x2', 
		'\x2', '\x691', '\x692', '\a', '\xFB', '\x2', '\x2', '\x692', '\x693', 
		'\a', 'V', '\x2', '\x2', '\x693', '\x6BD', '\b', '\x64', '\x1', '\x2', 
		'\x694', '\x695', '\a', '\xC2', '\x2', '\x2', '\x695', '\x696', '\a', 
		'\xFB', '\x2', '\x2', '\x696', '\x697', '\a', '\x66', '\x2', '\x2', '\x697', 
		'\x6BD', '\b', '\x64', '\x1', '\x2', '\x698', '\x699', '\a', '\xC2', '\x2', 
		'\x2', '\x699', '\x69A', '\a', '\xFB', '\x2', '\x2', '\x69A', '\x69B', 
		'\a', '\xED', '\x2', '\x2', '\x69B', '\x69C', '\a', '\xFB', '\x2', '\x2', 
		'\x69C', '\x69D', '\x5', '\xE0', 'q', '\x2', '\x69D', '\x69E', '\a', '\xFB', 
		'\x2', '\x2', '\x69E', '\x69F', '\x5', '\xDA', 'n', '\x2', '\x69F', '\x6A0', 
		'\a', '\xFB', '\x2', '\x2', '\x6A0', '\x6A1', '\x5', '\xDA', 'n', '\x2', 
		'\x6A1', '\x6A2', '\a', '\xFB', '\x2', '\x2', '\x6A2', '\x6A3', '\x5', 
		'\xDA', 'n', '\x2', '\x6A3', '\x6A4', '\a', '\xFB', '\x2', '\x2', '\x6A4', 
		'\x6A5', '\x5', '\xDA', 'n', '\x2', '\x6A5', '\x6A6', '\b', '\x64', '\x1', 
		'\x2', '\x6A6', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', 
		'\a', '\xC2', '\x2', '\x2', '\x6A8', '\x6A9', '\a', '\xFB', '\x2', '\x2', 
		'\x6A9', '\x6AB', '\a', '\x1C', '\x2', '\x2', '\x6AA', '\x6AC', '\a', 
		'\xFB', '\x2', '\x2', '\x6AB', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\x3', '\x2', '\x2', 
		'\x2', '\x6AD', '\x6AF', '\a', '\xF7', '\x2', '\x2', '\x6AE', '\x6B0', 
		'\a', '\xFB', '\x2', '\x2', '\x6AF', '\x6AE', '\x3', '\x2', '\x2', '\x2', 
		'\x6AF', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x6B1', '\x3', 
		'\x2', '\x2', '\x2', '\x6B1', '\x6B2', '\x5', '\xDA', 'n', '\x2', '\x6B2', 
		'\x6B3', '\a', '\xFB', '\x2', '\x2', '\x6B3', '\x6B4', '\x5', '\xDA', 
		'n', '\x2', '\x6B4', '\x6B5', '\a', '\xFB', '\x2', '\x2', '\x6B5', '\x6B7', 
		'\x5', '\xDA', 'n', '\x2', '\x6B6', '\x6B8', '\a', '\xFB', '\x2', '\x2', 
		'\x6B7', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B8', '\x3', 
		'\x2', '\x2', '\x2', '\x6B8', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6B9', 
		'\x6BA', '\a', '\xF8', '\x2', '\x2', '\x6BA', '\x6BB', '\b', '\x64', '\x1', 
		'\x2', '\x6BB', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\x6BC', '\x674', '\x3', '\x2', '\x2', '\x2', 
		'\x6BC', '\x678', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x67C', '\x3', 
		'\x2', '\x2', '\x2', '\x6BC', '\x680', '\x3', '\x2', '\x2', '\x2', '\x6BC', 
		'\x684', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x688', '\x3', '\x2', '\x2', 
		'\x2', '\x6BC', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x6BC', '\x694', '\x3', '\x2', '\x2', '\x2', 
		'\x6BC', '\x698', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6A7', '\x3', 
		'\x2', '\x2', '\x2', '\x6BD', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x6BE', 
		'\x6BF', '\a', '\x6', '\x2', '\x2', '\x6BF', '\x6C0', '\a', '\xFB', '\x2', 
		'\x2', '\x6C0', '\x6C1', '\a', 'W', '\x2', '\x2', '\x6C1', '\x6F0', '\b', 
		'\x65', '\x1', '\x2', '\x6C2', '\x6C3', '\a', '\x6', '\x2', '\x2', '\x6C3', 
		'\x6C4', '\a', '\xFB', '\x2', '\x2', '\x6C4', '\x6C5', '\a', ',', '\x2', 
		'\x2', '\x6C5', '\x6F0', '\b', '\x65', '\x1', '\x2', '\x6C6', '\x6C7', 
		'\a', '\x6', '\x2', '\x2', '\x6C7', '\x6C8', '\a', '\xFB', '\x2', '\x2', 
		'\x6C8', '\x6C9', '\a', 'p', '\x2', '\x2', '\x6C9', '\x6F0', '\b', '\x65', 
		'\x1', '\x2', '\x6CA', '\x6CB', '\a', '\x6', '\x2', '\x2', '\x6CB', '\x6CC', 
		'\a', '\xFB', '\x2', '\x2', '\x6CC', '\x6CD', '\a', '\xE9', '\x2', '\x2', 
		'\x6CD', '\x6F0', '\b', '\x65', '\x1', '\x2', '\x6CE', '\x6CF', '\a', 
		'\x6', '\x2', '\x2', '\x6CF', '\x6D0', '\a', '\xFB', '\x2', '\x2', '\x6D0', 
		'\x6D1', '\a', 'q', '\x2', '\x2', '\x6D1', '\x6F0', '\b', '\x65', '\x1', 
		'\x2', '\x6D2', '\x6D3', '\a', '\x6', '\x2', '\x2', '\x6D3', '\x6D4', 
		'\a', '\xFB', '\x2', '\x2', '\x6D4', '\x6D5', '\a', '{', '\x2', '\x2', 
		'\x6D5', '\x6D6', '\a', '\xFB', '\x2', '\x2', '\x6D6', '\x6D7', '\x5', 
		'\xDA', 'n', '\x2', '\x6D7', '\x6D8', '\b', '\x65', '\x1', '\x2', '\x6D8', 
		'\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DA', '\a', '\x6', '\x2', 
		'\x2', '\x6DA', '\x6DB', '\a', '\xFB', '\x2', '\x2', '\x6DB', '\x6DC', 
		'\a', '\x1C', '\x2', '\x2', '\x6DC', '\x6DD', '\a', '\xFB', '\x2', '\x2', 
		'\x6DD', '\x6DE', '\x5', '\xDA', 'n', '\x2', '\x6DE', '\x6DF', '\b', '\x65', 
		'\x1', '\x2', '\x6DF', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6E1', 
		'\a', '\x6', '\x2', '\x2', '\x6E1', '\x6E2', '\a', '\xFB', '\x2', '\x2', 
		'\x6E2', '\x6E3', '\a', '\xED', '\x2', '\x2', '\x6E3', '\x6E4', '\a', 
		'\xFB', '\x2', '\x2', '\x6E4', '\x6E5', '\x5', '\xE0', 'q', '\x2', '\x6E5', 
		'\x6E6', '\a', '\xFB', '\x2', '\x2', '\x6E6', '\x6E7', '\x5', '\xDA', 
		'n', '\x2', '\x6E7', '\x6E8', '\a', '\xFB', '\x2', '\x2', '\x6E8', '\x6E9', 
		'\x5', '\xDA', 'n', '\x2', '\x6E9', '\x6EA', '\a', '\xFB', '\x2', '\x2', 
		'\x6EA', '\x6EB', '\x5', '\xDA', 'n', '\x2', '\x6EB', '\x6EC', '\a', '\xFB', 
		'\x2', '\x2', '\x6EC', '\x6ED', '\x5', '\xDA', 'n', '\x2', '\x6ED', '\x6EE', 
		'\b', '\x65', '\x1', '\x2', '\x6EE', '\x6F0', '\x3', '\x2', '\x2', '\x2', 
		'\x6EF', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6C2', '\x3', 
		'\x2', '\x2', '\x2', '\x6EF', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6EF', 
		'\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6CE', '\x3', '\x2', '\x2', 
		'\x2', '\x6EF', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6D9', 
		'\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x6F0', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', '\a', '\xDD', 
		'\x2', '\x2', '\x6F2', '\x6F3', '\a', '\xFB', '\x2', '\x2', '\x6F3', '\x6F4', 
		'\a', '\x10', '\x2', '\x2', '\x6F4', '\x723', '\b', '\x66', '\x1', '\x2', 
		'\x6F5', '\x6F6', '\a', '\xDD', '\x2', '\x2', '\x6F6', '\x6F7', '\a', 
		'\xFB', '\x2', '\x2', '\x6F7', '\x6F8', '\a', 'X', '\x2', '\x2', '\x6F8', 
		'\x723', '\b', '\x66', '\x1', '\x2', '\x6F9', '\x6FA', '\a', '\xDD', '\x2', 
		'\x2', '\x6FA', '\x6FB', '\a', '\xFB', '\x2', '\x2', '\x6FB', '\x6FC', 
		'\a', '.', '\x2', '\x2', '\x6FC', '\x723', '\b', '\x66', '\x1', '\x2', 
		'\x6FD', '\x6FE', '\a', '\xDD', '\x2', '\x2', '\x6FE', '\x6FF', '\a', 
		'\xFB', '\x2', '\x2', '\x6FF', '\x701', '\a', '\xE8', '\x2', '\x2', '\x700', 
		'\x702', '\a', '\xFB', '\x2', '\x2', '\x701', '\x700', '\x3', '\x2', '\x2', 
		'\x2', '\x701', '\x702', '\x3', '\x2', '\x2', '\x2', '\x702', '\x703', 
		'\x3', '\x2', '\x2', '\x2', '\x703', '\x705', '\a', '\xF7', '\x2', '\x2', 
		'\x704', '\x706', '\a', '\xFB', '\x2', '\x2', '\x705', '\x704', '\x3', 
		'\x2', '\x2', '\x2', '\x705', '\x706', '\x3', '\x2', '\x2', '\x2', '\x706', 
		'\x707', '\x3', '\x2', '\x2', '\x2', '\x707', '\x708', '\x5', '\xDA', 
		'n', '\x2', '\x708', '\x709', '\a', '\xFB', '\x2', '\x2', '\x709', '\x70A', 
		'\x5', '\xDA', 'n', '\x2', '\x70A', '\x70B', '\a', '\xFB', '\x2', '\x2', 
		'\x70B', '\x70D', '\x5', '\xDA', 'n', '\x2', '\x70C', '\x70E', '\a', '\xFB', 
		'\x2', '\x2', '\x70D', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x70D', '\x70E', 
		'\x3', '\x2', '\x2', '\x2', '\x70E', '\x70F', '\x3', '\x2', '\x2', '\x2', 
		'\x70F', '\x711', '\a', '\xF8', '\x2', '\x2', '\x710', '\x712', '\a', 
		'\xFB', '\x2', '\x2', '\x711', '\x710', '\x3', '\x2', '\x2', '\x2', '\x711', 
		'\x712', '\x3', '\x2', '\x2', '\x2', '\x712', '\x713', '\x3', '\x2', '\x2', 
		'\x2', '\x713', '\x715', '\a', '\xF7', '\x2', '\x2', '\x714', '\x716', 
		'\a', '\xFB', '\x2', '\x2', '\x715', '\x714', '\x3', '\x2', '\x2', '\x2', 
		'\x715', '\x716', '\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\x3', 
		'\x2', '\x2', '\x2', '\x717', '\x718', '\x5', '\xDA', 'n', '\x2', '\x718', 
		'\x719', '\a', '\xFB', '\x2', '\x2', '\x719', '\x71A', '\x5', '\xDA', 
		'n', '\x2', '\x71A', '\x71B', '\a', '\xFB', '\x2', '\x2', '\x71B', '\x71D', 
		'\x5', '\xDA', 'n', '\x2', '\x71C', '\x71E', '\a', '\xFB', '\x2', '\x2', 
		'\x71D', '\x71C', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x71E', '\x3', 
		'\x2', '\x2', '\x2', '\x71E', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x71F', 
		'\x720', '\a', '\xF8', '\x2', '\x2', '\x720', '\x721', '\b', '\x66', '\x1', 
		'\x2', '\x721', '\x723', '\x3', '\x2', '\x2', '\x2', '\x722', '\x6F1', 
		'\x3', '\x2', '\x2', '\x2', '\x722', '\x6F5', '\x3', '\x2', '\x2', '\x2', 
		'\x722', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x722', '\x6FD', '\x3', 
		'\x2', '\x2', '\x2', '\x723', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x724', 
		'\x725', '\a', '\xDE', '\x2', '\x2', '\x725', '\x726', '\a', '\xFB', '\x2', 
		'\x2', '\x726', '\x727', '\a', '\xC4', '\x2', '\x2', '\x727', '\x728', 
		'\a', '\xFB', '\x2', '\x2', '\x728', '\x729', '\x5', '\xDA', 'n', '\x2', 
		'\x729', '\x72A', '\b', 'g', '\x1', '\x2', '\x72A', '\x76B', '\x3', '\x2', 
		'\x2', '\x2', '\x72B', '\x72C', '\a', '\xDE', '\x2', '\x2', '\x72C', '\x72D', 
		'\a', '\xFB', '\x2', '\x2', '\x72D', '\x72E', '\a', '\xC8', '\x2', '\x2', 
		'\x72E', '\x72F', '\a', '\xFB', '\x2', '\x2', '\x72F', '\x730', '\x5', 
		'\xDA', 'n', '\x2', '\x730', '\x731', '\a', '\xFB', '\x2', '\x2', '\x731', 
		'\x732', '\x5', '\xDA', 'n', '\x2', '\x732', '\x733', '\b', 'g', '\x1', 
		'\x2', '\x733', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x734', '\x735', 
		'\a', '\xDE', '\x2', '\x2', '\x735', '\x736', '\a', '\xFB', '\x2', '\x2', 
		'\x736', '\x737', '\a', '\xC9', '\x2', '\x2', '\x737', '\x738', '\a', 
		'\xFB', '\x2', '\x2', '\x738', '\x739', '\x5', '\xDA', 'n', '\x2', '\x739', 
		'\x73A', '\a', '\xFB', '\x2', '\x2', '\x73A', '\x73B', '\x5', '\xDA', 
		'n', '\x2', '\x73B', '\x73C', '\b', 'g', '\x1', '\x2', '\x73C', '\x76B', 
		'\x3', '\x2', '\x2', '\x2', '\x73D', '\x73E', '\a', '\xDE', '\x2', '\x2', 
		'\x73E', '\x73F', '\a', '\xFB', '\x2', '\x2', '\x73F', '\x740', '\a', 
		'\xD7', '\x2', '\x2', '\x740', '\x741', '\a', '\xFB', '\x2', '\x2', '\x741', 
		'\x742', '\x5', '\xE0', 'q', '\x2', '\x742', '\x743', '\a', '\xFB', '\x2', 
		'\x2', '\x743', '\x744', '\x5', '\xDA', 'n', '\x2', '\x744', '\x745', 
		'\a', '\xFB', '\x2', '\x2', '\x745', '\x746', '\x5', '\xDA', 'n', '\x2', 
		'\x746', '\x747', '\a', '\xFB', '\x2', '\x2', '\x747', '\x748', '\x5', 
		'\xDA', 'n', '\x2', '\x748', '\x749', '\a', '\xFB', '\x2', '\x2', '\x749', 
		'\x74A', '\x5', '\xDA', 'n', '\x2', '\x74A', '\x74B', '\b', 'g', '\x1', 
		'\x2', '\x74B', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x74D', 
		'\a', '\xDE', '\x2', '\x2', '\x74D', '\x74E', '\a', '\xFB', '\x2', '\x2', 
		'\x74E', '\x74F', '\a', '\xE3', '\x2', '\x2', '\x74F', '\x750', '\a', 
		'\xFB', '\x2', '\x2', '\x750', '\x751', '\x5', '\xDA', 'n', '\x2', '\x751', 
		'\x752', '\a', '\xFB', '\x2', '\x2', '\x752', '\x753', '\x5', '\xDA', 
		'n', '\x2', '\x753', '\x754', '\a', '\xFB', '\x2', '\x2', '\x754', '\x755', 
		'\x5', '\xDA', 'n', '\x2', '\x755', '\x756', '\a', '\xFB', '\x2', '\x2', 
		'\x756', '\x757', '\x5', '\xDA', 'n', '\x2', '\x757', '\x758', '\a', '\xFB', 
		'\x2', '\x2', '\x758', '\x759', '\x5', '\xDA', 'n', '\x2', '\x759', '\x75A', 
		'\a', '\xFB', '\x2', '\x2', '\x75A', '\x75B', '\x5', '\xDA', 'n', '\x2', 
		'\x75B', '\x75C', '\b', 'g', '\x1', '\x2', '\x75C', '\x76B', '\x3', '\x2', 
		'\x2', '\x2', '\x75D', '\x75E', '\a', '\xDE', '\x2', '\x2', '\x75E', '\x75F', 
		'\a', '\xFB', '\x2', '\x2', '\x75F', '\x760', '\a', '\xE6', '\x2', '\x2', 
		'\x760', '\x761', '\a', '\xFB', '\x2', '\x2', '\x761', '\x762', '\x5', 
		'\xDA', 'n', '\x2', '\x762', '\x763', '\a', '\xFB', '\x2', '\x2', '\x763', 
		'\x764', '\x5', '\xDA', 'n', '\x2', '\x764', '\x765', '\a', '\xFB', '\x2', 
		'\x2', '\x765', '\x766', '\x5', '\xDA', 'n', '\x2', '\x766', '\x767', 
		'\a', '\xFB', '\x2', '\x2', '\x767', '\x768', '\x5', '\xDA', 'n', '\x2', 
		'\x768', '\x769', '\b', 'g', '\x1', '\x2', '\x769', '\x76B', '\x3', '\x2', 
		'\x2', '\x2', '\x76A', '\x724', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x72B', 
		'\x3', '\x2', '\x2', '\x2', '\x76A', '\x734', '\x3', '\x2', '\x2', '\x2', 
		'\x76A', '\x73D', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x74C', '\x3', 
		'\x2', '\x2', '\x2', '\x76A', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x76B', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', '\a', '!', '\x2', 
		'\x2', '\x76D', '\x76E', '\a', '\xFB', '\x2', '\x2', '\x76E', '\x76F', 
		'\x5', '\xF0', 'y', '\x2', '\x76F', '\x770', '\b', 'h', '\x1', '\x2', 
		'\x770', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x771', '\x772', '\a', '\"', 
		'\x2', '\x2', '\x772', '\x773', '\b', 'i', '\x1', '\x2', '\x773', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x774', '\x775', '\a', '#', '\x2', '\x2', 
		'\x775', '\x776', '\b', 'j', '\x1', '\x2', '\x776', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x777', '\x778', '\a', '\x5', '\x2', '\x2', '\x778', '\x779', 
		'\a', '\xFB', '\x2', '\x2', '\x779', '\x77A', '\x5', '\xF2', 'z', '\x2', 
		'\x77A', '\x77B', '\b', 'k', '\x1', '\x2', '\x77B', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\x77C', '\x77D', '\a', '\xF2', '\x2', '\x2', '\x77D', '\x787', 
		'\b', 'l', '\x1', '\x2', '\x77E', '\x77F', '\a', '\xFA', '\x2', '\x2', 
		'\x77F', '\x780', '\a', '\xF2', '\x2', '\x2', '\x780', '\x781', '\a', 
		'\xFA', '\x2', '\x2', '\x781', '\x787', '\b', 'l', '\x1', '\x2', '\x782', 
		'\x783', '\a', '\xF9', '\x2', '\x2', '\x783', '\x784', '\a', '\xF2', '\x2', 
		'\x2', '\x784', '\x785', '\a', '\xF9', '\x2', '\x2', '\x785', '\x787', 
		'\b', 'l', '\x1', '\x2', '\x786', '\x77C', '\x3', '\x2', '\x2', '\x2', 
		'\x786', '\x77E', '\x3', '\x2', '\x2', '\x2', '\x786', '\x782', '\x3', 
		'\x2', '\x2', '\x2', '\x787', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x788', 
		'\x789', '\a', '\xF2', '\x2', '\x2', '\x789', '\x793', '\b', 'm', '\x1', 
		'\x2', '\x78A', '\x78B', '\a', '\xFA', '\x2', '\x2', '\x78B', '\x78C', 
		'\a', '\xF2', '\x2', '\x2', '\x78C', '\x78D', '\a', '\xFA', '\x2', '\x2', 
		'\x78D', '\x793', '\b', 'm', '\x1', '\x2', '\x78E', '\x78F', '\a', '\xF9', 
		'\x2', '\x2', '\x78F', '\x790', '\a', '\xF2', '\x2', '\x2', '\x790', '\x791', 
		'\a', '\xF9', '\x2', '\x2', '\x791', '\x793', '\b', 'm', '\x1', '\x2', 
		'\x792', '\x788', '\x3', '\x2', '\x2', '\x2', '\x792', '\x78A', '\x3', 
		'\x2', '\x2', '\x2', '\x792', '\x78E', '\x3', '\x2', '\x2', '\x2', '\x793', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x794', '\x795', '\t', '\x3', '\x2', 
		'\x2', '\x795', '\x79F', '\b', 'n', '\x1', '\x2', '\x796', '\x797', '\a', 
		'\xFA', '\x2', '\x2', '\x797', '\x798', '\t', '\x3', '\x2', '\x2', '\x798', 
		'\x799', '\a', '\xFA', '\x2', '\x2', '\x799', '\x79F', '\b', 'n', '\x1', 
		'\x2', '\x79A', '\x79B', '\a', '\xF9', '\x2', '\x2', '\x79B', '\x79C', 
		'\t', '\x3', '\x2', '\x2', '\x79C', '\x79D', '\a', '\xF9', '\x2', '\x2', 
		'\x79D', '\x79F', '\b', 'n', '\x1', '\x2', '\x79E', '\x794', '\x3', '\x2', 
		'\x2', '\x2', '\x79E', '\x796', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x79A', 
		'\x3', '\x2', '\x2', '\x2', '\x79F', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x7A0', '\x7A1', '\a', '\xF4', '\x2', '\x2', '\x7A1', '\x7AB', '\b', 
		'o', '\x1', '\x2', '\x7A2', '\x7A3', '\a', '\xFA', '\x2', '\x2', '\x7A3', 
		'\x7A4', '\a', '\xF4', '\x2', '\x2', '\x7A4', '\x7A5', '\a', '\xFA', '\x2', 
		'\x2', '\x7A5', '\x7AB', '\b', 'o', '\x1', '\x2', '\x7A6', '\x7A7', '\a', 
		'\xF9', '\x2', '\x2', '\x7A7', '\x7A8', '\a', '\xF4', '\x2', '\x2', '\x7A8', 
		'\x7A9', '\a', '\xF9', '\x2', '\x2', '\x7A9', '\x7AB', '\b', 'o', '\x1', 
		'\x2', '\x7AA', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7A2', 
		'\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7A6', '\x3', '\x2', '\x2', '\x2', 
		'\x7AB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AD', '\a', '\x36', 
		'\x2', '\x2', '\x7AD', '\x7B5', '\b', 'p', '\x1', '\x2', '\x7AE', '\x7AF', 
		'\a', '\xE', '\x2', '\x2', '\x7AF', '\x7B5', '\b', 'p', '\x1', '\x2', 
		'\x7B0', '\x7B1', '\a', '+', '\x2', '\x2', '\x7B1', '\x7B5', '\b', 'p', 
		'\x1', '\x2', '\x7B2', '\x7B3', '\a', 'j', '\x2', '\x2', '\x7B3', '\x7B5', 
		'\b', 'p', '\x1', '\x2', '\x7B4', '\x7AC', '\x3', '\x2', '\x2', '\x2', 
		'\x7B4', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B0', '\x3', 
		'\x2', '\x2', '\x2', '\x7B4', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B5', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B7', '\a', '\xCC', '\x2', 
		'\x2', '\x7B7', '\x7C3', '\b', 'q', '\x1', '\x2', '\x7B8', '\x7B9', '\a', 
		'\xE5', '\x2', '\x2', '\x7B9', '\x7C3', '\b', 'q', '\x1', '\x2', '\x7BA', 
		'\x7BB', '\a', '\xD5', '\x2', '\x2', '\x7BB', '\x7C3', '\b', 'q', '\x1', 
		'\x2', '\x7BC', '\x7BD', '\a', '\xC7', '\x2', '\x2', '\x7BD', '\x7C3', 
		'\b', 'q', '\x1', '\x2', '\x7BE', '\x7BF', '\a', 'L', '\x2', '\x2', '\x7BF', 
		'\x7C3', '\b', 'q', '\x1', '\x2', '\x7C0', '\x7C1', '\a', '\x66', '\x2', 
		'\x2', '\x7C1', '\x7C3', '\b', 'q', '\x1', '\x2', '\x7C2', '\x7B6', '\x3', 
		'\x2', '\x2', '\x2', '\x7C2', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7C2', 
		'\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7C2', '\x7BC', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x7C2', '\x7C0', 
		'\x3', '\x2', '\x2', '\x2', '\x7C3', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\x7C4', '\x7C5', '\a', '{', '\x2', '\x2', '\x7C5', '\x7D3', '\b', 'r', 
		'\x1', '\x2', '\x7C6', '\x7C7', '\a', '\xCE', '\x2', '\x2', '\x7C7', '\x7D3', 
		'\b', 'r', '\x1', '\x2', '\x7C8', '\x7C9', '\a', 'r', '\x2', '\x2', '\x7C9', 
		'\x7D3', '\b', 'r', '\x1', '\x2', '\x7CA', '\x7CB', '\a', '\xF', '\x2', 
		'\x2', '\x7CB', '\x7D3', '\b', 'r', '\x1', '\x2', '\x7CC', '\x7CD', '\a', 
		'\xE7', '\x2', '\x2', '\x7CD', '\x7D3', '\b', 'r', '\x1', '\x2', '\x7CE', 
		'\x7CF', '\a', '\x4', '\x2', '\x2', '\x7CF', '\x7D3', '\b', 'r', '\x1', 
		'\x2', '\x7D0', '\x7D1', '\a', '`', '\x2', '\x2', '\x7D1', '\x7D3', '\b', 
		'r', '\x1', '\x2', '\x7D2', '\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7D2', 
		'\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7C8', '\x3', '\x2', '\x2', 
		'\x2', '\x7D2', '\x7CA', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7CC', 
		'\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7CE', '\x3', '\x2', '\x2', '\x2', 
		'\x7D2', '\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x7D4', '\x7D5', '\a', '\a', '\x2', '\x2', '\x7D5', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x7D6', '\x7D7', '\a', '\n', '\x2', 
		'\x2', '\x7D7', '\x85D', '\b', 's', '\x1', '\x2', '\x7D8', '\x7D9', '\a', 
		'\v', '\x2', '\x2', '\x7D9', '\x85D', '\b', 's', '\x1', '\x2', '\x7DA', 
		'\x7DB', '\a', '\x13', '\x2', '\x2', '\x7DB', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x7DC', '\x7DD', '\a', '\x1E', '\x2', '\x2', '\x7DD', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x7DE', '\x7DF', '\a', '#', '\x2', '\x2', '\x7DF', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x7E0', '\x7E1', '\a', '\'', '\x2', 
		'\x2', '\x7E1', '\x85D', '\b', 's', '\x1', '\x2', '\x7E2', '\x7E3', '\a', 
		'*', '\x2', '\x2', '\x7E3', '\x85D', '\b', 's', '\x1', '\x2', '\x7E4', 
		'\x7E5', '\a', '\x32', '\x2', '\x2', '\x7E5', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x7E6', '\x7E7', '\a', '\x33', '\x2', '\x2', '\x7E7', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x7E8', '\x7E9', '\a', 'H', '\x2', '\x2', '\x7E9', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x7EA', '\x7EB', '\a', 'O', '\x2', 
		'\x2', '\x7EB', '\x85D', '\b', 's', '\x1', '\x2', '\x7EC', '\x7ED', '\a', 
		'P', '\x2', '\x2', '\x7ED', '\x85D', '\b', 's', '\x1', '\x2', '\x7EE', 
		'\x7EF', '\a', 'T', '\x2', '\x2', '\x7EF', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x7F0', '\x7F1', '\a', 'U', '\x2', '\x2', '\x7F1', '\x85D', '\b', 
		's', '\x1', '\x2', '\x7F2', '\x7F3', '\a', '\\', '\x2', '\x2', '\x7F3', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x7F4', '\x7F5', '\a', ']', '\x2', 
		'\x2', '\x7F5', '\x85D', '\b', 's', '\x1', '\x2', '\x7F6', '\x7F7', '\a', 
		'\x61', '\x2', '\x2', '\x7F7', '\x85D', '\b', 's', '\x1', '\x2', '\x7F8', 
		'\x7F9', '\a', '\x62', '\x2', '\x2', '\x7F9', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x7FA', '\x7FB', '\a', '\x63', '\x2', '\x2', '\x7FB', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x7FC', '\x7FD', '\a', '\x64', '\x2', '\x2', 
		'\x7FD', '\x85D', '\b', 's', '\x1', '\x2', '\x7FE', '\x7FF', '\a', '\x65', 
		'\x2', '\x2', '\x7FF', '\x85D', '\b', 's', '\x1', '\x2', '\x800', '\x801', 
		'\a', 'h', '\x2', '\x2', '\x801', '\x85D', '\b', 's', '\x1', '\x2', '\x802', 
		'\x803', '\a', 'o', '\x2', '\x2', '\x803', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x804', '\x805', '\a', 'l', '\x2', '\x2', '\x805', '\x85D', '\b', 
		's', '\x1', '\x2', '\x806', '\x807', '\a', 's', '\x2', '\x2', '\x807', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x808', '\x809', '\a', 'x', '\x2', 
		'\x2', '\x809', '\x85D', '\b', 's', '\x1', '\x2', '\x80A', '\x80B', '\a', 
		'y', '\x2', '\x2', '\x80B', '\x85D', '\b', 's', '\x1', '\x2', '\x80C', 
		'\x80D', '\a', '\xCE', '\x2', '\x2', '\x80D', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x80E', '\x80F', '\a', '\xD0', '\x2', '\x2', '\x80F', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x810', '\x811', '\a', '\xD1', '\x2', '\x2', 
		'\x811', '\x85D', '\b', 's', '\x1', '\x2', '\x812', '\x813', '\a', '\xD8', 
		'\x2', '\x2', '\x813', '\x85D', '\b', 's', '\x1', '\x2', '\x814', '\x815', 
		'\a', '\xD9', '\x2', '\x2', '\x815', '\x85D', '\b', 's', '\x1', '\x2', 
		'\x816', '\x817', '\a', '\xE2', '\x2', '\x2', '\x817', '\x85D', '\b', 
		's', '\x1', '\x2', '\x818', '\x819', '\a', '\xEC', '\x2', '\x2', '\x819', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x81A', '\x81B', '\a', '\xE0', '\x2', 
		'\x2', '\x81B', '\x85D', '\b', 's', '\x1', '\x2', '\x81C', '\x81D', '\a', 
		'\b', '\x2', '\x2', '\x81D', '\x85D', '\b', 's', '\x1', '\x2', '\x81E', 
		'\x81F', '\a', 'M', '\x2', '\x2', '\x81F', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x820', '\x821', '\a', '\xE1', '\x2', '\x2', '\x821', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x822', '\x823', '\a', '\xD6', '\x2', '\x2', 
		'\x823', '\x85D', '\b', 's', '\x1', '\x2', '\x824', '\x825', '\a', '\x1D', 
		'\x2', '\x2', '\x825', '\x85D', '\b', 's', '\x1', '\x2', '\x826', '\x827', 
		'\a', '\x14', '\x2', '\x2', '\x827', '\x85D', '\b', 's', '\x1', '\x2', 
		'\x828', '\x829', '\a', '\x18', '\x2', '\x2', '\x829', '\x85D', '\b', 
		's', '\x1', '\x2', '\x82A', '\x82B', '\a', '\xC3', '\x2', '\x2', '\x82B', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x82C', '\x82D', '\a', '\x43', '\x2', 
		'\x2', '\x82D', '\x85D', '\b', 's', '\x1', '\x2', '\x82E', '\x82F', '\a', 
		't', '\x2', '\x2', '\x82F', '\x85D', '\b', 's', '\x1', '\x2', '\x830', 
		'\x831', '\a', '\x15', '\x2', '\x2', '\x831', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x832', '\x833', '\a', '\x1B', '\x2', '\x2', '\x833', '\x85D', 
		'\b', 's', '\x1', '\x2', '\x834', '\x835', '\a', '\x44', '\x2', '\x2', 
		'\x835', '\x85D', '\b', 's', '\x1', '\x2', '\x836', '\x837', '\a', '&', 
		'\x2', '\x2', '\x837', '\x85D', '\b', 's', '\x1', '\x2', '\x838', '\x839', 
		'\a', '_', '\x2', '\x2', '\x839', '\x85D', '\b', 's', '\x1', '\x2', '\x83A', 
		'\x83B', '\a', '\xD2', '\x2', '\x2', '\x83B', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x83C', '\x83D', '\a', 'I', '\x2', '\x2', '\x83D', '\x85D', '\b', 
		's', '\x1', '\x2', '\x83E', '\x83F', '\a', '\xC6', '\x2', '\x2', '\x83F', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x840', '\x841', '\a', '\x19', '\x2', 
		'\x2', '\x841', '\x85D', '\b', 's', '\x1', '\x2', '\x842', '\x843', '\a', 
		'Y', '\x2', '\x2', '\x843', '\x85D', '\b', 's', '\x1', '\x2', '\x844', 
		'\x845', '\a', '\xC5', '\x2', '\x2', '\x845', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x846', '\x847', '\a', 'v', '\x2', '\x2', '\x847', '\x85D', '\b', 
		's', '\x1', '\x2', '\x848', '\x849', '\a', 'w', '\x2', '\x2', '\x849', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x84A', '\x84B', '\a', '\x17', '\x2', 
		'\x2', '\x84B', '\x85D', '\b', 's', '\x1', '\x2', '\x84C', '\x84D', '\a', 
		'G', '\x2', '\x2', '\x84D', '\x85D', '\b', 's', '\x1', '\x2', '\x84E', 
		'\x84F', '\a', '\xD3', '\x2', '\x2', '\x84F', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x850', '\x851', '\a', 'u', '\x2', '\x2', '\x851', '\x85D', '\b', 
		's', '\x1', '\x2', '\x852', '\x853', '\a', '\x42', '\x2', '\x2', '\x853', 
		'\x85D', '\b', 's', '\x1', '\x2', '\x854', '\x855', '\a', '\xDA', '\x2', 
		'\x2', '\x855', '\x85D', '\b', 's', '\x1', '\x2', '\x856', '\x857', '\a', 
		'\xCD', '\x2', '\x2', '\x857', '\x85D', '\b', 's', '\x1', '\x2', '\x858', 
		'\x859', '\a', 'g', '\x2', '\x2', '\x859', '\x85D', '\b', 's', '\x1', 
		'\x2', '\x85A', '\x85B', '\a', 'k', '\x2', '\x2', '\x85B', '\x85D', '\b', 
		's', '\x1', '\x2', '\x85C', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x7D6', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7D8', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7DC', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x7DE', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x7E0', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7E2', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x7E4', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x7E6', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7E8', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x7EE', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7F2', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x7F6', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7F8', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x7FC', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x7FE', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x800', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x802', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x804', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x806', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x808', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x80A', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x80C', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x80E', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x810', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x812', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x814', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x816', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x818', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x81C', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x81E', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x820', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x822', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x824', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x826', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x828', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x82C', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x82E', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x830', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x832', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x834', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x836', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x838', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x83A', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x83C', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x83E', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x840', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x842', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x844', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x846', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x848', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x84C', 
		'\x3', '\x2', '\x2', '\x2', '\x85C', '\x84E', '\x3', '\x2', '\x2', '\x2', 
		'\x85C', '\x850', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x852', '\x3', 
		'\x2', '\x2', '\x2', '\x85C', '\x854', '\x3', '\x2', '\x2', '\x2', '\x85C', 
		'\x856', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x858', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x85A', '\x3', '\x2', '\x2', '\x2', '\x85D', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\a', '\x45', '\x2', '\x2', 
		'\x85F', '\x865', '\b', 't', '\x1', '\x2', '\x860', '\x861', '\a', 'R', 
		'\x2', '\x2', '\x861', '\x865', '\b', 't', '\x1', '\x2', '\x862', '\x863', 
		'\a', '\x38', '\x2', '\x2', '\x863', '\x865', '\b', 't', '\x1', '\x2', 
		'\x864', '\x85E', '\x3', '\x2', '\x2', '\x2', '\x864', '\x860', '\x3', 
		'\x2', '\x2', '\x2', '\x864', '\x862', '\x3', '\x2', '\x2', '\x2', '\x865', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x866', '\x867', '\a', '\xFF', '\x2', 
		'\x2', '\x867', '\x86D', '\b', 'u', '\x1', '\x2', '\x868', '\x869', '\a', 
		'\x100', '\x2', '\x2', '\x869', '\x86D', '\b', 'u', '\x1', '\x2', '\x86A', 
		'\x86B', '\a', '\x101', '\x2', '\x2', '\x86B', '\x86D', '\b', 'u', '\x1', 
		'\x2', '\x86C', '\x866', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x868', 
		'\x3', '\x2', '\x2', '\x2', '\x86C', '\x86A', '\x3', '\x2', '\x2', '\x2', 
		'\x86D', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x86E', '\x86F', '\a', '\x3', 
		'\x2', '\x2', '\x86F', '\x875', '\b', 'v', '\x1', '\x2', '\x870', '\x871', 
		'\a', '\x11', '\x2', '\x2', '\x871', '\x875', '\b', 'v', '\x1', '\x2', 
		'\x872', '\x873', '\a', '\x31', '\x2', '\x2', '\x873', '\x875', '\b', 
		'v', '\x1', '\x2', '\x874', '\x86E', '\x3', '\x2', '\x2', '\x2', '\x874', 
		'\x870', '\x3', '\x2', '\x2', '\x2', '\x874', '\x872', '\x3', '\x2', '\x2', 
		'\x2', '\x875', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x876', '\x877', 
		'\a', ':', '\x2', '\x2', '\x877', '\x883', '\b', 'w', '\x1', '\x2', '\x878', 
		'\x879', '\a', '\x41', '\x2', '\x2', '\x879', '\x883', '\b', 'w', '\x1', 
		'\x2', '\x87A', '\x87B', '\a', '\x39', '\x2', '\x2', '\x87B', '\x883', 
		'\b', 'w', '\x1', '\x2', '\x87C', '\x87D', '\a', '<', '\x2', '\x2', '\x87D', 
		'\x883', '\b', 'w', '\x1', '\x2', '\x87E', '\x87F', '\a', '?', '\x2', 
		'\x2', '\x87F', '\x883', '\b', 'w', '\x1', '\x2', '\x880', '\x881', '\a', 
		'=', '\x2', '\x2', '\x881', '\x883', '\b', 'w', '\x1', '\x2', '\x882', 
		'\x876', '\x3', '\x2', '\x2', '\x2', '\x882', '\x878', '\x3', '\x2', '\x2', 
		'\x2', '\x882', '\x87A', '\x3', '\x2', '\x2', '\x2', '\x882', '\x87C', 
		'\x3', '\x2', '\x2', '\x2', '\x882', '\x87E', '\x3', '\x2', '\x2', '\x2', 
		'\x882', '\x880', '\x3', '\x2', '\x2', '\x2', '\x883', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\x884', '\x885', '\a', ':', '\x2', '\x2', '\x885', 
		'\x893', '\b', 'x', '\x1', '\x2', '\x886', '\x887', '\a', '\x41', '\x2', 
		'\x2', '\x887', '\x893', '\b', 'x', '\x1', '\x2', '\x888', '\x889', '\a', 
		'@', '\x2', '\x2', '\x889', '\x893', '\b', 'x', '\x1', '\x2', '\x88A', 
		'\x88B', '\a', '>', '\x2', '\x2', '\x88B', '\x893', '\b', 'x', '\x1', 
		'\x2', '\x88C', '\x88D', '\a', '?', '\x2', '\x2', '\x88D', '\x893', '\b', 
		'x', '\x1', '\x2', '\x88E', '\x88F', '\a', '=', '\x2', '\x2', '\x88F', 
		'\x893', '\b', 'x', '\x1', '\x2', '\x890', '\x891', '\a', ';', '\x2', 
		'\x2', '\x891', '\x893', '\b', 'x', '\x1', '\x2', '\x892', '\x884', '\x3', 
		'\x2', '\x2', '\x2', '\x892', '\x886', '\x3', '\x2', '\x2', '\x2', '\x892', 
		'\x888', '\x3', '\x2', '\x2', '\x2', '\x892', '\x88A', '\x3', '\x2', '\x2', 
		'\x2', '\x892', '\x88C', '\x3', '\x2', '\x2', '\x2', '\x892', '\x88E', 
		'\x3', '\x2', '\x2', '\x2', '\x892', '\x890', '\x3', '\x2', '\x2', '\x2', 
		'\x893', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x894', '\x895', '\a', 'Q', 
		'\x2', '\x2', '\x895', '\x899', '\b', 'y', '\x1', '\x2', '\x896', '\x897', 
		'\a', '/', '\x2', '\x2', '\x897', '\x899', '\b', 'y', '\x1', '\x2', '\x898', 
		'\x894', '\x3', '\x2', '\x2', '\x2', '\x898', '\x896', '\x3', '\x2', '\x2', 
		'\x2', '\x899', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', 
		'\a', '\x46', '\x2', '\x2', '\x89B', '\x8A1', '\b', 'z', '\x1', '\x2', 
		'\x89C', '\x89D', '\a', 'Z', '\x2', '\x2', '\x89D', '\x8A1', '\b', 'z', 
		'\x1', '\x2', '\x89E', '\x89F', '\a', '\x37', '\x2', '\x2', '\x89F', '\x8A1', 
		'\b', 'z', '\x1', '\x2', '\x8A0', '\x89A', '\x3', '\x2', '\x2', '\x2', 
		'\x8A0', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x89E', '\x3', 
		'\x2', '\x2', '\x2', '\x8A1', '\xF3', '\x3', '\x2', '\x2', '\x2', 'w', 
		'\xF8', '\xFD', '\x104', '\x10C', '\x114', '\x119', '\x11F', '\x124', 
		'\x129', '\x130', '\x136', '\x13B', '\x142', '\x14C', '\x153', '\x15B', 
		'\x162', '\x165', '\x16D', '\x172', '\x179', '\x181', '\x188', '\x18D', 
		'\x194', '\x19C', '\x1A3', '\x1A8', '\x1AF', '\x1B7', '\x1C6', '\x1EC', 
		'\x1F5', '\x252', '\x256', '\x25A', '\x262', '\x266', '\x27E', '\x285', 
		'\x28C', '\x29A', '\x371', '\x37E', '\x382', '\x38A', '\x393', '\x397', 
		'\x39F', '\x3B6', '\x3DF', '\x3E3', '\x3EB', '\x3F4', '\x3F8', '\x400', 
		'\x409', '\x40D', '\x415', '\x41E', '\x4BC', '\x4C0', '\x4C8', '\x4D1', 
		'\x4D5', '\x4DD', '\x4E6', '\x4EA', '\x4F2', '\x4FB', '\x550', '\x554', 
		'\x55C', '\x560', '\x564', '\x56C', '\x575', '\x579', '\x581', '\x585', 
		'\x589', '\x591', '\x596', '\x5C3', '\x5FC', '\x639', '\x648', '\x659', 
		'\x66E', '\x6AB', '\x6AF', '\x6B7', '\x6BC', '\x6EF', '\x701', '\x705', 
		'\x70D', '\x711', '\x715', '\x71D', '\x722', '\x76A', '\x786', '\x792', 
		'\x79E', '\x7AA', '\x7B4', '\x7C2', '\x7D2', '\x85C', '\x864', '\x86C', 
		'\x874', '\x882', '\x892', '\x898', '\x8A0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
