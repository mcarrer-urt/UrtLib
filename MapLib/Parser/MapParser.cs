//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/michael/Repos/UrtLib/MapLib/Parser/Map.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	#pragma warning disable 3021
    using System.Globalization;
    using MapLib;
    using MapLib.Elements;
    using MapLib.Geometry;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MapParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PATCHDEF2=1, QUOTE=2, LROUNDBRACKET=3, RROUNDBRACKET=4, LCURLYBRACKET=5, 
		RCURLYBRACKET=6, KEYVALUE=7, PATH=8, EXP=9, DECIMAL=10, INT=11, WS=12, 
		NL=13, WORD=14, COMMENT=15;
	public const int
		RULE_map = 0, RULE_entity = 1, RULE_entityKey = 2, RULE_entityElement = 3, 
		RULE_brushElement = 4, RULE_brushFace = 5, RULE_patchElement = 6, RULE_patchVertex = 7, 
		RULE_keyValueParam = 8, RULE_pathParam = 9, RULE_intParam = 10, RULE_numberParam = 11;
	public static readonly string[] ruleNames = {
		"map", "entity", "entityKey", "entityElement", "brushElement", "brushFace", 
		"patchElement", "patchVertex", "keyValueParam", "pathParam", "intParam", 
		"numberParam"
	};

	private static readonly string[] _LiteralNames = {
		null, "'patchDef2'", "'\"'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PATCHDEF2", "QUOTE", "LROUNDBRACKET", "RROUNDBRACKET", "LCURLYBRACKET", 
		"RCURLYBRACKET", "KEYVALUE", "PATH", "EXP", "DECIMAL", "INT", "WS", "NL", 
		"WORD", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Map.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MapParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MapParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MapParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MapContext : ParserRuleContext {
		public Map value;
		public EntityContext a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MapParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MapParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 0, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			 _localctx.value =  new Map(); 
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LCURLYBRACKET || _la==NL) {
				{
				{
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 25;
					Match(NL);
					}
					}
					State = 30;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 31;
				_localctx.a = entity();
				State = 32;
				Match(NL);
				 _localctx.value.Entities.Add(_localctx.a.value); 
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public Entity value;
		public EntityKeyContext a;
		public EntityElementContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(MapParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MapParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MapParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(MapParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityKeyContext[] entityKey() {
			return GetRuleContexts<EntityKeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityKeyContext entityKey(int i) {
			return GetRuleContext<EntityKeyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityElementContext[] entityElement() {
			return GetRuleContexts<EntityElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityElementContext entityElement(int i) {
			return GetRuleContext<EntityElementContext>(i);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 2, RULE_entity);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new Entity() { Keys = new List<EntityKey>(), Elements = new List<EntityElement>()};
			State = 41;
			Match(LCURLYBRACKET);
			State = 42;
			Match(NL);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 43;
					_localctx.a = entityKey();
					State = 44;
					Match(NL);
					 _localctx.value.Keys.Add(_localctx.a.value); 
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LCURLYBRACKET || _la==WS) {
				{
				{
				State = 52;
				_localctx.b = entityElement();
				State = 53;
				Match(NL);
				 _localctx.value.Elements.Add(_localctx.b.value); 
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityKeyContext : ParserRuleContext {
		public EntityKey value;
		public KeyValueParamContext a1;
		public KeyValueParamContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MapParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MapParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueParamContext[] keyValueParam() {
			return GetRuleContexts<KeyValueParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueParamContext keyValueParam(int i) {
			return GetRuleContext<KeyValueParamContext>(i);
		}
		public EntityKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterEntityKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitEntityKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityKeyContext entityKey() {
		EntityKeyContext _localctx = new EntityKeyContext(Context, State);
		EnterRule(_localctx, 4, RULE_entityKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 63;
				Match(WS);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			_localctx.a1 = keyValueParam();
			State = 70;
			Match(WS);
			State = 71;
			_localctx.a2 = keyValueParam();
			 _localctx.value =  new EntityKey() { Name=_localctx.a1.value.Replace("\"", string.Empty), Value=_localctx.a2.value.Replace("\"", string.Empty) }; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityElementContext : ParserRuleContext {
		public EntityElement value;
		public BrushElementContext a1;
		public PatchElementContext a2;
		[System.Diagnostics.DebuggerNonUserCode] public BrushElementContext brushElement() {
			return GetRuleContext<BrushElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatchElementContext patchElement() {
			return GetRuleContext<PatchElementContext>(0);
		}
		public EntityElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterEntityElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitEntityElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityElementContext entityElement() {
		EntityElementContext _localctx = new EntityElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_entityElement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				_localctx.a1 = brushElement();
				_localctx.value =  _localctx.a1.value;
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				_localctx.a2 = patchElement();
				_localctx.value =  _localctx.a2.value;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrushElementContext : ParserRuleContext {
		public Brush value;
		public BrushFaceContext b;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET() { return GetToken(MapParser.LCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MapParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MapParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET() { return GetToken(MapParser.RCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MapParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MapParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BrushFaceContext[] brushFace() {
			return GetRuleContexts<BrushFaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BrushFaceContext brushFace(int i) {
			return GetRuleContext<BrushFaceContext>(i);
		}
		public BrushElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brushElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterBrushElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitBrushElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrushElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrushElementContext brushElement() {
		BrushElementContext _localctx = new BrushElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_brushElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			_localctx.value =  new Brush() { Faces = new List<Face>()};
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 83;
				Match(WS);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			Match(LCURLYBRACKET);
			State = 90;
			Match(NL);
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 91;
						Match(WS);
						}
						}
						State = 96;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 97;
					_localctx.b = brushFace();
					State = 98;
					Match(NL);
					 _localctx.value.Faces.Add(_localctx.b.value); 
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 106;
				Match(WS);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrushFaceContext : ParserRuleContext {
		public Face value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext b1;
		public NumberParamContext b2;
		public NumberParamContext b3;
		public NumberParamContext c1;
		public NumberParamContext c2;
		public NumberParamContext c3;
		public PathParamContext d;
		public NumberParamContext e1;
		public NumberParamContext e2;
		public NumberParamContext e3;
		public NumberParamContext e4;
		public NumberParamContext e5;
		public IntParamContext e6;
		public IntParamContext e7;
		public NumberParamContext e8;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LROUNDBRACKET() { return GetTokens(MapParser.LROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET(int i) {
			return GetToken(MapParser.LROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MapParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MapParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RROUNDBRACKET() { return GetTokens(MapParser.RROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET(int i) {
			return GetToken(MapParser.RROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext[] intParam() {
			return GetRuleContexts<IntParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam(int i) {
			return GetRuleContext<IntParamContext>(i);
		}
		public BrushFaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brushFace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterBrushFace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitBrushFace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrushFace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BrushFaceContext brushFace() {
		BrushFaceContext _localctx = new BrushFaceContext(Context, State);
		EnterRule(_localctx, 10, RULE_brushFace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(LROUNDBRACKET);
			State = 115;
			Match(WS);
			State = 116;
			_localctx.a1 = numberParam();
			State = 117;
			Match(WS);
			State = 118;
			_localctx.a2 = numberParam();
			State = 119;
			Match(WS);
			State = 120;
			_localctx.a3 = numberParam();
			State = 121;
			Match(WS);
			State = 122;
			Match(RROUNDBRACKET);
			State = 123;
			Match(WS);
			State = 124;
			Match(LROUNDBRACKET);
			State = 125;
			Match(WS);
			State = 126;
			_localctx.b1 = numberParam();
			State = 127;
			Match(WS);
			State = 128;
			_localctx.b2 = numberParam();
			State = 129;
			Match(WS);
			State = 130;
			_localctx.b3 = numberParam();
			State = 131;
			Match(WS);
			State = 132;
			Match(RROUNDBRACKET);
			State = 133;
			Match(WS);
			State = 134;
			Match(LROUNDBRACKET);
			State = 135;
			Match(WS);
			State = 136;
			_localctx.c1 = numberParam();
			State = 137;
			Match(WS);
			State = 138;
			_localctx.c2 = numberParam();
			State = 139;
			Match(WS);
			State = 140;
			_localctx.c3 = numberParam();
			State = 141;
			Match(WS);
			State = 142;
			Match(RROUNDBRACKET);
			State = 143;
			Match(WS);
			State = 144;
			_localctx.d = pathParam();
			State = 145;
			Match(WS);
			State = 146;
			_localctx.e1 = numberParam();
			State = 147;
			Match(WS);
			State = 148;
			_localctx.e2 = numberParam();
			State = 149;
			Match(WS);
			State = 150;
			_localctx.e3 = numberParam();
			State = 151;
			Match(WS);
			State = 152;
			_localctx.e4 = numberParam();
			State = 153;
			Match(WS);
			State = 154;
			_localctx.e5 = numberParam();
			State = 155;
			Match(WS);
			State = 156;
			_localctx.e6 = intParam();
			State = 157;
			Match(WS);
			State = 158;
			_localctx.e7 = intParam();
			State = 159;
			Match(WS);
			State = 160;
			_localctx.e8 = numberParam();
			 
						_localctx.value =  new Face(new Point3D(_localctx.a1.value, _localctx.a2.value, _localctx.a3.value), new Point3D(_localctx.b1.value, _localctx.b2.value, _localctx.b3.value), new Point3D(_localctx.c1.value, _localctx.c2.value, _localctx.c3.value));

						_localctx.value.Texture = _localctx.d.value;
						_localctx.value.XOffset = _localctx.e1.value;
						_localctx.value.YOffset = _localctx.e2.value;
						_localctx.value.Rotation = _localctx.e3.value;
						_localctx.value.XScale = _localctx.e4.value;
						_localctx.value.YScale = _localctx.e5.value;
						_localctx.value.ContentFlags = _localctx.e6.value;
						_localctx.value.SurfaceFlags = _localctx.e7.value;
						_localctx.value.Unknown = _localctx.e8.value;
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatchElementContext : ParserRuleContext {
		public Patch value;
		public PathParamContext a;
		public IntParamContext b1;
		public IntParamContext b2;
		public NumberParamContext b3;
		public NumberParamContext b4;
		public NumberParamContext b5;
		public PatchVertexContext c;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLYBRACKET() { return GetTokens(MapParser.LCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLYBRACKET(int i) {
			return GetToken(MapParser.LCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(MapParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(MapParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCHDEF2() { return GetToken(MapParser.PATCHDEF2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LROUNDBRACKET() { return GetTokens(MapParser.LROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET(int i) {
			return GetToken(MapParser.LROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MapParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MapParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RROUNDBRACKET() { return GetTokens(MapParser.RROUNDBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET(int i) {
			return GetToken(MapParser.RROUNDBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLYBRACKET() { return GetTokens(MapParser.RCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLYBRACKET(int i) {
			return GetToken(MapParser.RCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathParamContext pathParam() {
			return GetRuleContext<PathParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext[] intParam() {
			return GetRuleContexts<IntParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntParamContext intParam(int i) {
			return GetRuleContext<IntParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatchVertexContext[] patchVertex() {
			return GetRuleContexts<PatchVertexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatchVertexContext patchVertex(int i) {
			return GetRuleContext<PatchVertexContext>(i);
		}
		public PatchElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patchElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterPatchElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitPatchElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatchElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchElementContext patchElement() {
		PatchElementContext _localctx = new PatchElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_patchElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			 _localctx.value =  new Patch();
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 164;
				Match(WS);
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(LCURLYBRACKET);
			State = 171;
			Match(NL);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 172;
				Match(WS);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(PATCHDEF2);
			State = 179;
			Match(NL);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 180;
				Match(WS);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(LCURLYBRACKET);
			State = 187;
			Match(NL);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 188;
				Match(WS);
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			_localctx.a = pathParam();
			State = 195;
			Match(NL);
			 _localctx.value.Texture =  _localctx.a.value; 
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 197;
				Match(WS);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(LROUNDBRACKET);
			State = 204;
			Match(WS);
			State = 205;
			_localctx.b1 = intParam();
			State = 206;
			Match(WS);
			State = 207;
			_localctx.b2 = intParam();
			State = 208;
			Match(WS);
			State = 209;
			_localctx.b3 = numberParam();
			State = 210;
			Match(WS);
			State = 211;
			_localctx.b4 = numberParam();
			State = 212;
			Match(WS);
			State = 213;
			_localctx.b5 = numberParam();
			State = 214;
			Match(WS);
			State = 215;
			Match(RROUNDBRACKET);
			State = 216;
			Match(NL);
			 
						_localctx.value.Vertices = new PatchVertex[_localctx.b1.value, _localctx.b2.value];
						var list = new List<List<PatchVertex>>();
					
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 218;
				Match(WS);
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 224;
			Match(LROUNDBRACKET);
			State = 225;
			Match(NL);
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{

									var line = new List<PatchVertex>();
								
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 227;
						Match(WS);
						}
						}
						State = 232;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 233;
					Match(LROUNDBRACKET);
					State = 244;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 234;
							Match(WS);
							State = 235;
							_localctx.c = patchVertex();
							State = 240;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
							case 1:
								{
								State = 236;
								Match(WS);
								State = 238;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==NL) {
									{
									State = 237;
									Match(NL);
									}
								}

								}
								break;
							}
							 
												line.Add(_localctx.c.value);
											
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 246;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 248;
						Match(WS);
						}
						}
						State = 253;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 254;
					Match(RROUNDBRACKET);
					State = 255;
					Match(NL);
					 
									list.Add(line);
								
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}

						for(int i = 0; i < list.Count; i++)
							for(int j = 0; j < list[i].Count; j++)
								_localctx.value.Vertices[i, j] = list[i][j];
					
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 264;
				Match(WS);
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270;
			Match(RROUNDBRACKET);
			State = 271;
			Match(NL);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 272;
				Match(WS);
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 278;
			Match(RCURLYBRACKET);
			State = 279;
			Match(NL);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 280;
				Match(WS);
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(RCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatchVertexContext : ParserRuleContext {
		public PatchVertex value;
		public NumberParamContext a1;
		public NumberParamContext a2;
		public NumberParamContext a3;
		public NumberParamContext a4;
		public NumberParamContext a5;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LROUNDBRACKET() { return GetToken(MapParser.LROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(MapParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(MapParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RROUNDBRACKET() { return GetToken(MapParser.RROUNDBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext[] numberParam() {
			return GetRuleContexts<NumberParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberParamContext numberParam(int i) {
			return GetRuleContext<NumberParamContext>(i);
		}
		public PatchVertexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patchVertex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterPatchVertex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitPatchVertex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatchVertex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchVertexContext patchVertex() {
		PatchVertexContext _localctx = new PatchVertexContext(Context, State);
		EnterRule(_localctx, 14, RULE_patchVertex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 288;
				Match(WS);
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(LROUNDBRACKET);
			State = 295;
			Match(WS);
			State = 296;
			_localctx.a1 = numberParam();
			State = 297;
			Match(WS);
			State = 298;
			_localctx.a2 = numberParam();
			State = 299;
			Match(WS);
			State = 300;
			_localctx.a3 = numberParam();
			State = 301;
			Match(WS);
			State = 302;
			_localctx.a4 = numberParam();
			State = 303;
			Match(WS);
			State = 304;
			_localctx.a5 = numberParam();
			State = 305;
			Match(WS);
			State = 306;
			Match(RROUNDBRACKET);

						_localctx.value =  new PatchVertex()
						{
							X = _localctx.a1.value,
							Y = _localctx.a2.value,
							Z = _localctx.a3.value,
							TextureCoordX = _localctx.a4.value,
							TextureCoordY = _localctx.a5.value
						};
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueParamContext : ParserRuleContext {
		public string value;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYVALUE() { return GetToken(MapParser.KEYVALUE, 0); }
		public KeyValueParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterKeyValueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitKeyValueParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueParamContext keyValueParam() {
		KeyValueParamContext _localctx = new KeyValueParamContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValueParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_localctx.a = Match(KEYVALUE);
			_localctx.value =  (_localctx.a!=null?_localctx.a.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathParamContext : ParserRuleContext {
		public string value;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(MapParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(MapParser.PATH, 0); }
		public PathParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterPathParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitPathParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathParamContext pathParam() {
		PathParamContext _localctx = new PathParamContext(Context, State);
		EnterRule(_localctx, 18, RULE_pathParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_localctx.a = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PATH || _la==WORD) ) {
				_localctx.a = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			_localctx.value =  (_localctx.a!=null?_localctx.a.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntParamContext : ParserRuleContext {
		public int value;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MapParser.INT, 0); }
		public IntParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterIntParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitIntParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntParamContext intParam() {
		IntParamContext _localctx = new IntParamContext(Context, State);
		EnterRule(_localctx, 20, RULE_intParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_localctx.a = Match(INT);
			_localctx.value =  int.Parse((_localctx.a!=null?_localctx.a.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberParamContext : ParserRuleContext {
		public double value;
		public IToken a;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MapParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MapParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MapParser.EXP, 0); }
		public NumberParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.EnterNumberParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMapListener typedListener = listener as IMapListener;
			if (typedListener != null) typedListener.ExitNumberParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMapVisitor<TResult> typedVisitor = visitor as IMapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberParamContext numberParam() {
		NumberParamContext _localctx = new NumberParamContext(Context, State);
		EnterRule(_localctx, 22, RULE_numberParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_localctx.a = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXP) | (1L << DECIMAL) | (1L << INT))) != 0)) ) {
				_localctx.a = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			_localctx.value =  double.Parse((_localctx.a!=null?_localctx.a.Text:null), CultureInfo.GetCultureInfo("en-US"));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '\x144', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x1D', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ' ', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x32', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x35', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '>', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\a', 
		'\x4', '\x43', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x46', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'S', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'W', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Z', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '_', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x62', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'h', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'k', '\v', '\x6', '\x3', '\x6', '\a', '\x6', 'n', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'q', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '\xA8', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\xAB', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\xB0', '\n', '\b', '\f', '\b', '\xE', '\b', '\xB3', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xB8', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\xBB', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\xC0', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\xC3', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\xC9', '\n', '\b', '\f', '\b', '\xE', '\b', '\xCC', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\xDE', '\n', '\b', '\f', '\b', '\xE', '\b', '\xE1', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\xE7', '\n', '\b', '\f', '\b', '\xE', '\b', '\xEA', '\v', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\xF1', '\n', '\b', '\x5', '\b', '\xF3', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x6', '\b', '\xF7', '\n', '\b', '\r', '\b', '\xE', '\b', 
		'\xF8', '\x3', '\b', '\a', '\b', '\xFC', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\xFF', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\x105', '\n', '\b', '\f', '\b', '\xE', '\b', '\x108', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x10C', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\x10F', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x114', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x117', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\x11C', '\n', '\b', '\f', '\b', '\xE', '\b', '\x11F', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\a', '\t', '\x124', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x127', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x2', '\x4', '\x4', '\x2', '\n', '\n', '\x10', '\x10', '\x3', 
		'\x2', '\v', '\r', '\x2', '\x151', '\x2', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '*', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'R', '\x3', '\x2', '\x2', '\x2', '\n', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\f', 't', '\x3', '\x2', '\x2', '\x2', '\xE', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x137', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x18', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\'', '\b', '\x2', '\x1', '\x2', '\x1B', 
		'\x1D', '\a', '\xF', '\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', ' ', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'!', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x5', '\x4', '\x3', '\x2', '\"', '#', '\a', '\xF', '\x2', 
		'\x2', '#', '$', '\b', '\x2', '\x1', '\x2', '$', '&', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x1E', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x3', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\b', '\x3', '\x1', '\x2', '+', 
		',', '\a', '\a', '\x2', '\x2', ',', '\x33', '\a', '\xF', '\x2', '\x2', 
		'-', '.', '\x5', '\x6', '\x4', '\x2', '.', '/', '\a', '\xF', '\x2', '\x2', 
		'/', '\x30', '\b', '\x3', '\x1', '\x2', '\x30', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '-', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\x5', '\b', '\x5', '\x2', '\x37', '\x38', '\a', '\xF', '\x2', '\x2', 
		'\x38', '\x39', '\b', '\x3', '\x1', '\x2', '\x39', ';', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x36', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\b', '\x2', '\x2', '@', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x43', '\a', '\xE', '\x2', '\x2', '\x42', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '\x12', '\n', '\x2', 
		'H', 'I', '\a', '\xE', '\x2', '\x2', 'I', 'J', '\x5', '\x12', '\n', '\x2', 
		'J', 'K', '\b', '\x4', '\x1', '\x2', 'K', '\a', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x5', '\n', '\x6', '\x2', 'M', 'N', '\b', '\x5', '\x1', '\x2', 
		'N', 'S', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\xE', '\b', '\x2', 
		'P', 'Q', '\b', '\x5', '\x1', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'L', '\x3', '\x2', '\x2', '\x2', 'R', 'O', '\x3', '\x2', '\x2', '\x2', 
		'S', '\t', '\x3', '\x2', '\x2', '\x2', 'T', 'X', '\b', '\x6', '\x1', '\x2', 
		'U', 'W', '\a', '\xE', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\a', '\x2', '\x2', 
		'\\', 'i', '\a', '\xF', '\x2', '\x2', ']', '_', '\a', '\xE', '\x2', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\f', '\a', '\x2', 
		'\x64', '\x65', '\a', '\xF', '\x2', '\x2', '\x65', '\x66', '\b', '\x6', 
		'\x1', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '`', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', 
		'\xE', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '\b', '\x2', '\x2', 's', '\v', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '\x5', '\x2', '\x2', 'u', 'v', '\a', 
		'\xE', '\x2', '\x2', 'v', 'w', '\x5', '\x18', '\r', '\x2', 'w', 'x', '\a', 
		'\xE', '\x2', '\x2', 'x', 'y', '\x5', '\x18', '\r', '\x2', 'y', 'z', '\a', 
		'\xE', '\x2', '\x2', 'z', '{', '\x5', '\x18', '\r', '\x2', '{', '|', '\a', 
		'\xE', '\x2', '\x2', '|', '}', '\a', '\x6', '\x2', '\x2', '}', '~', '\a', 
		'\xE', '\x2', '\x2', '~', '\x7F', '\a', '\x5', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\xE', '\x2', '\x2', '\x80', '\x81', '\x5', '\x18', '\r', '\x2', 
		'\x81', '\x82', '\a', '\xE', '\x2', '\x2', '\x82', '\x83', '\x5', '\x18', 
		'\r', '\x2', '\x83', '\x84', '\a', '\xE', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\x18', '\r', '\x2', '\x85', '\x86', '\a', '\xE', '\x2', '\x2', 
		'\x86', '\x87', '\a', '\x6', '\x2', '\x2', '\x87', '\x88', '\a', '\xE', 
		'\x2', '\x2', '\x88', '\x89', '\a', '\x5', '\x2', '\x2', '\x89', '\x8A', 
		'\a', '\xE', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x18', '\r', '\x2', 
		'\x8B', '\x8C', '\a', '\xE', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x18', 
		'\r', '\x2', '\x8D', '\x8E', '\a', '\xE', '\x2', '\x2', '\x8E', '\x8F', 
		'\x5', '\x18', '\r', '\x2', '\x8F', '\x90', '\a', '\xE', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\x6', '\x2', '\x2', '\x91', '\x92', '\a', '\xE', 
		'\x2', '\x2', '\x92', '\x93', '\x5', '\x14', '\v', '\x2', '\x93', '\x94', 
		'\a', '\xE', '\x2', '\x2', '\x94', '\x95', '\x5', '\x18', '\r', '\x2', 
		'\x95', '\x96', '\a', '\xE', '\x2', '\x2', '\x96', '\x97', '\x5', '\x18', 
		'\r', '\x2', '\x97', '\x98', '\a', '\xE', '\x2', '\x2', '\x98', '\x99', 
		'\x5', '\x18', '\r', '\x2', '\x99', '\x9A', '\a', '\xE', '\x2', '\x2', 
		'\x9A', '\x9B', '\x5', '\x18', '\r', '\x2', '\x9B', '\x9C', '\a', '\xE', 
		'\x2', '\x2', '\x9C', '\x9D', '\x5', '\x18', '\r', '\x2', '\x9D', '\x9E', 
		'\a', '\xE', '\x2', '\x2', '\x9E', '\x9F', '\x5', '\x16', '\f', '\x2', 
		'\x9F', '\xA0', '\a', '\xE', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x16', 
		'\f', '\x2', '\xA1', '\xA2', '\a', '\xE', '\x2', '\x2', '\xA2', '\xA3', 
		'\x5', '\x18', '\r', '\x2', '\xA3', '\xA4', '\b', '\a', '\x1', '\x2', 
		'\xA4', '\r', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA9', '\b', '\b', 
		'\x1', '\x2', '\xA6', '\xA8', '\a', '\xE', '\x2', '\x2', '\xA7', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\a', '\x2', '\x2', 
		'\xAD', '\xB1', '\a', '\xF', '\x2', '\x2', '\xAE', '\xB0', '\a', '\xE', 
		'\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\a', '\x3', '\x2', '\x2', '\xB5', '\xB9', '\a', '\xF', '\x2', '\x2', 
		'\xB6', '\xB8', '\a', '\xE', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\a', '\a', '\x2', '\x2', '\xBD', '\xC1', 
		'\a', '\xF', '\x2', '\x2', '\xBE', '\xC0', '\a', '\xE', '\x2', '\x2', 
		'\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x14', 
		'\v', '\x2', '\xC5', '\xC6', '\a', '\xF', '\x2', '\x2', '\xC6', '\xCA', 
		'\b', '\b', '\x1', '\x2', '\xC7', '\xC9', '\a', '\xE', '\x2', '\x2', '\xC8', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x5', '\x2', 
		'\x2', '\xCE', '\xCF', '\a', '\xE', '\x2', '\x2', '\xCF', '\xD0', '\x5', 
		'\x16', '\f', '\x2', '\xD0', '\xD1', '\a', '\xE', '\x2', '\x2', '\xD1', 
		'\xD2', '\x5', '\x16', '\f', '\x2', '\xD2', '\xD3', '\a', '\xE', '\x2', 
		'\x2', '\xD3', '\xD4', '\x5', '\x18', '\r', '\x2', '\xD4', '\xD5', '\a', 
		'\xE', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x18', '\r', '\x2', '\xD6', 
		'\xD7', '\a', '\xE', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x18', '\r', 
		'\x2', '\xD8', '\xD9', '\a', '\xE', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\x6', '\x2', '\x2', '\xDA', '\xDB', '\a', '\xF', '\x2', '\x2', '\xDB', 
		'\xDF', '\b', '\b', '\x1', '\x2', '\xDC', '\xDE', '\a', '\xE', '\x2', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', 
		'\x5', '\x2', '\x2', '\xE3', '\x106', '\a', '\xF', '\x2', '\x2', '\xE4', 
		'\xE8', '\b', '\b', '\x1', '\x2', '\xE5', '\xE7', '\a', '\xE', '\x2', 
		'\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xF6', '\a', 
		'\x5', '\x2', '\x2', '\xEC', '\xED', '\a', '\xE', '\x2', '\x2', '\xED', 
		'\xF2', '\x5', '\x10', '\t', '\x2', '\xEE', '\xF0', '\a', '\xE', '\x2', 
		'\x2', '\xEF', '\xF1', '\a', '\xF', '\x2', '\x2', '\xF0', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\b', '\b', '\x1', '\x2', '\xF5', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\xE', '\x2', 
		'\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', 
		'\x6', '\x2', '\x2', '\x101', '\x102', '\a', '\xF', '\x2', '\x2', '\x102', 
		'\x103', '\b', '\b', '\x1', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x105', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10D', '\b', '\b', '\x1', '\x2', '\x10A', '\x10C', '\a', '\xE', '\x2', 
		'\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\a', '\x6', '\x2', '\x2', '\x111', '\x115', '\a', '\xF', '\x2', 
		'\x2', '\x112', '\x114', '\a', '\xE', '\x2', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x118', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\b', '\x2', 
		'\x2', '\x119', '\x11D', '\a', '\xF', '\x2', '\x2', '\x11A', '\x11C', 
		'\a', '\xE', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\a', '\b', '\x2', '\x2', '\x121', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x124', '\a', '\xE', '\x2', '\x2', '\x123', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\a', 
		'\x5', '\x2', '\x2', '\x129', '\x12A', '\a', '\xE', '\x2', '\x2', '\x12A', 
		'\x12B', '\x5', '\x18', '\r', '\x2', '\x12B', '\x12C', '\a', '\xE', '\x2', 
		'\x2', '\x12C', '\x12D', '\x5', '\x18', '\r', '\x2', '\x12D', '\x12E', 
		'\a', '\xE', '\x2', '\x2', '\x12E', '\x12F', '\x5', '\x18', '\r', '\x2', 
		'\x12F', '\x130', '\a', '\xE', '\x2', '\x2', '\x130', '\x131', '\x5', 
		'\x18', '\r', '\x2', '\x131', '\x132', '\a', '\xE', '\x2', '\x2', '\x132', 
		'\x133', '\x5', '\x18', '\r', '\x2', '\x133', '\x134', '\a', '\xE', '\x2', 
		'\x2', '\x134', '\x135', '\a', '\x6', '\x2', '\x2', '\x135', '\x136', 
		'\b', '\t', '\x1', '\x2', '\x136', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\a', '\t', '\x2', '\x2', '\x138', '\x139', '\b', '\n', 
		'\x1', '\x2', '\x139', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', 
		'\t', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\b', '\v', '\x1', '\x2', 
		'\x13C', '\x15', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '\r', 
		'\x2', '\x2', '\x13E', '\x13F', '\b', '\f', '\x1', '\x2', '\x13F', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\t', '\x3', '\x2', '\x2', 
		'\x141', '\x142', '\b', '\r', '\x1', '\x2', '\x142', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1E', '\'', '\x33', '<', '\x44', 'R', 'X', '`', 
		'i', 'o', '\xA9', '\xB1', '\xB9', '\xC1', '\xCA', '\xDF', '\xE8', '\xF0', 
		'\xF2', '\xF8', '\xFD', '\x106', '\x10D', '\x115', '\x11D', '\x125',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
